var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.453,1,2.576]],["body/modules/AppModule.html",[0,2.163,1,5.141,2,1.667,3,1.772,4,2.024,5,2.024,6,1.772,7,3.057,8,3.057,9,2.922,10,2.922,11,2.922,12,2.922,13,4.173,14,0.019,15,3.615,16,4.173,17,3.872,18,4.262,19,4.173,20,2.836,21,2.024,22,1.89,23,0.175,24,0.155,25,0.155,26,3.402,27,3.056,28,0.368,29,0.328,30,3.402,31,2.922,32,2.606,33,2.37,34,0.944,35,2.606,36,3.402,37,2.606,38,3.402,39,3.402,40,3.402,41,3.402,42,3.321,43,3.402,44,2.836,45,2.606,46,3.402,47,3.402,48,3.402,49,3.402,50,4.768,51,3.402,52,3.402,53,2.606,54,3.402,55,3.402,56,2.024,57,3.402,58,3.402,59,0.175,60,0.024,61,0.012,62,0.012]],["title/controllers/AuthControllers.html",[63,2.054,64,2.576]],["body/controllers/AuthControllers.html",[14,0.019,23,0.127,24,0.112,25,0.112,28,0.328,29,0.238,34,0.686,44,1.469,45,1.892,59,0.127,60,0.018,61,0.009,62,0.009,63,1.372,64,2.626,65,1.372,66,2.121,67,1.892,68,1.892,69,0.172,70,0.633,71,1.164,72,3.238,73,3.238,74,3.238,75,3.238,76,4.573,77,2.47,78,1.32,79,5.263,80,4.99,81,2.41,82,3.77,83,3.77,84,0.694,85,2.47,86,1.083,87,0.925,88,0.456,89,1.083,90,2.701,91,1.028,92,2.47,93,3.045,94,3.77,95,2.47,96,4.734,97,2.121,98,3.77,99,3.77,100,2.47,101,1.407,102,1.743,103,2.47,104,2.665,105,3.77,106,2.47,107,2.47,108,5.118,109,3.77,110,2.47,111,2.47,112,2.121,113,1.469,114,1.892,115,0.81,116,2.47,117,1.72,118,2.121,119,2.121,120,1.892,121,1.469,122,2.72,123,2.121,124,1.623,125,1.892,126,1.286,127,2.47,128,2.47,129,0.485,130,0.668,131,2.47,132,2.367,133,1.169,134,2.47,135,2.47,136,2.47,137,2.665,138,2.508,139,3.92,140,2.47,141,2.47,142,0.741,143,2,144,2.47,145,2.47,146,0.437,147,3.77,148,2.47,149,3.77,150,3.77,151,2.121,152,2.47,153,2.47,154,2.47,155,2.47,156,2.47,157,2.121,158,2.47,159,2.47,160,2.47]],["title/modules/AuthModule.html",[0,1.453,13,2.371]],["body/modules/AuthModule.html",[0,2.247,2,1.792,3,1.904,4,2.175,5,2.175,6,1.904,7,3.176,8,2.031,13,4.792,14,0.019,17,3.96,20,2.982,21,2.175,22,2.031,23,0.188,24,0.166,25,0.166,27,3.213,28,0.366,29,0.353,33,3.491,34,1.015,59,0.188,60,0.026,61,0.012,62,0.012,64,3.983,65,2.783,122,3.96,123,3.14,161,3.14,162,3.14,163,3.14,164,3.96,165,3.96,166,3.96,167,3.96,168,3.697,169,3.656,170,3.656,171,3.14,172,3.14,173,3.14,174,3.14,175,3.656,176,3.14]],["title/injectables/AuthServices.html",[122,2.2,177,0.212]],["body/injectables/AuthServices.html",[14,0.019,23,0.159,24,0.141,25,0.141,28,0.342,29,0.299,59,0.159,60,0.022,61,0.011,62,0.011,69,0.216,70,0.749,71,1.182,72,3.834,73,3.834,74,3.834,75,3.834,78,1.24,84,0.763,86,1.191,87,1.018,88,0.502,89,1.191,91,1.068,93,3.404,97,3.834,101,1.952,102,2.646,104,2.98,112,2.664,115,1.118,120,2.376,122,2.656,129,0.877,130,1.074,142,1.124,146,0.549,165,3.871,166,3.871,167,3.871,168,3.614,171,2.664,172,2.664,173,2.664,174,2.664,177,0.256,178,0.904,179,2.664,180,2.664,181,2.761,182,3.102,183,4.464,184,3.102,185,2.376,186,4.464,187,3.102,188,3.42,189,3.102,190,4.464,191,3.102,192,1.988,193,3.102,194,3.102,195,3.102,196,3.102,197,3.102]],["title/classes/ChangePasswdBody.html",[60,0.026,198,2.576]],["body/classes/ChangePasswdBody.html",[14,0.019,23,0.258,24,0.229,25,0.229,28,0.316,59,0.258,60,0.044,61,0.015,62,0.015,69,0.351,78,1.211,81,2.197,84,0.633,88,0.416,126,2.617,198,4.292,199,2.197,200,4.316,201,2.08,202,2.761,203,3.849,204,4.719,205,5.025,206,4.292,207,4.292,208,3.221,209,3.221,210,3.849]],["title/injectables/ChangePasswdUseCase.html",[177,0.212,211,2.2]],["body/injectables/ChangePasswdUseCase.html",[14,0.019,23,0.195,24,0.172,25,0.172,28,0.321,29,0.365,34,1.052,59,0.195,60,0.027,61,0.013,62,0.013,69,0.264,70,0.862,71,0.978,78,1.322,84,0.646,86,1.009,87,0.862,88,0.425,89,1.009,91,0.707,101,1.916,115,1.031,124,2.387,129,1.009,130,0.909,133,1.426,143,2.245,146,1.105,177,0.294,178,1.104,202,1.569,211,3.054,212,3.253,213,2.245,214,1.752,215,2.441,216,3.788,217,3.932,218,5.002,219,3.788,220,2.638,221,3.291,222,1.54,223,1.973,224,2.428,225,1.752,226,1.856,227,1.856,228,2.428,229,3.932,230,2.901,231,5.134,232,3.788,233,3.788,234,2.638,235,2.638]],["title/modules/CommonModule.html",[0,1.453,164,2.2]],["body/modules/CommonModule.html",[0,2.529,2,2.279,3,2.421,4,2.766,5,2.766,6,2.421,7,3.574,8,3.574,14,0.019,20,3.493,21,2.766,22,2.582,23,0.239,24,0.211,25,0.211,27,2.981,28,0.33,29,0.448,33,4.089,34,1.291,59,0.239,60,0.033,61,0.015,62,0.015,164,4.3,181,3.287,236,3.993,237,3.993,238,3.993,239,4.649,240,4.649]],["title/injectables/CommonServices.html",[177,0.212,181,1.617]],["body/injectables/CommonServices.html",[14,0.019,23,0.17,24,0.151,25,0.151,28,0.303,29,0.32,34,0.922,59,0.17,60,0.024,61,0.012,62,0.012,68,3.589,69,0.232,70,0.787,71,0.912,78,1.354,84,0.743,86,1.067,87,0.99,88,0.45,89,1.067,90,2.297,91,0.874,115,0.588,124,2.292,129,0.652,130,1.045,133,0.758,142,0.652,146,0.588,177,0.269,178,0.967,181,2.049,201,1.582,214,1.535,222,1.239,241,2.543,242,4.665,243,4.686,244,4.665,245,3.32,246,4.025,247,5.068,248,3.32,249,1.975,250,3.32,251,4.11,252,3.32,253,2.167,254,2.851,255,2.851,256,4.025,257,3.589,258,4.025,259,3.264,260,4.025,261,3.264,262,2.167,263,4.665,264,4.025,265,4.025,266,3.32,267,1.844,268,4.025,269,1.729,270,3.589,271,0.796,272,3.231,273,3.231,274,1.975,275,2.851,276,2.851,277,1.844,278,2.851,279,2.851,280,2.543,281,2.543,282,2.851,283,2.851]],["title/modules/DatabaseModule.html",[0,1.453,15,2.054]],["body/modules/DatabaseModule.html",[0,2.518,2,2.626,7,2.976,8,2.976,14,0.019,15,3.558,23,0.275,24,0.244,25,0.244,28,0.329,29,0.517,59,0.275,60,0.038,61,0.016,62,0.016,284,5.359,285,5.249,286,5.359]],["title/injectables/DeleteUserUseCase.html",[177,0.212,287,2.2]],["body/injectables/DeleteUserUseCase.html",[14,0.019,23,0.21,24,0.186,25,0.186,28,0.311,29,0.395,34,1.136,59,0.21,60,0.029,61,0.013,62,0.013,69,0.286,70,0.908,71,1.016,84,0.681,86,1.062,87,0.908,88,0.448,89,1.062,91,0.764,115,1.072,124,2.441,129,1.062,130,0.957,133,1.235,143,2.365,146,0.957,177,0.31,178,1.193,213,2.365,214,1.893,215,2.49,220,2.851,222,1.43,223,2.132,224,2.624,225,1.893,226,2.006,227,2.006,228,2.624,287,3.217,288,3.516,289,4.094,290,4.142,291,1.946,292,4.094,293,2.24,294,4.094]],["title/injectables/EmailVerifyUseCase.html",[165,2.2,177,0.212]],["body/injectables/EmailVerifyUseCase.html",[14,0.019,23,0.206,24,0.182,25,0.182,28,0.308,29,0.387,34,1.113,59,0.206,60,0.029,61,0.013,62,0.013,69,0.28,70,0.895,71,1.006,78,1.178,84,0.672,86,1.048,87,0.895,88,0.442,89,1.048,91,0.748,101,1.991,115,1.061,124,2.427,129,1.048,130,0.944,133,1.218,142,0.788,143,2.333,146,0.944,165,3.173,177,0.306,178,1.169,213,2.333,214,1.854,215,2.477,217,4.085,222,1.411,223,2.088,225,1.854,226,1.965,227,1.965,262,1.854,295,3.444,296,4.01,297,4.01,298,2.57,299,4.01,300,3.444,301,4.581,302,4.01]],["title/interfaces/Env.html",[271,0.887,303,2.576]],["body/interfaces/Env.html",[14,0.019,23,0.151,24,0.134,25,0.134,28,0.221,42,2.053,53,2.258,59,0.151,61,0.011,62,0.011,69,0.206,70,0.495,78,1.429,88,0.544,90,2.109,101,2.086,117,2.053,121,1.754,132,1.363,138,1.445,142,1.219,146,0.522,201,1.453,222,1.478,259,4.139,261,2.053,262,2.35,271,0.707,291,1.994,303,3.892,304,1.445,305,2.258,306,5.103,307,5.103,308,5.103,309,5.103,310,5.103,311,5.103,312,5.103,313,3.696,314,3.296,315,3.696,316,2.532,317,2.532,318,2.532,319,2.532,320,2.532,321,2.532,322,2.532,323,2.532,324,2.532,325,2.532,326,2.532,327,2.258,328,1.89,329,2.532,330,2.258,331,2.532,332,2.532,333,2.532,334,3.296,335,2.258,336,2.532,337,2.532,338,2.532,339,2.532,340,2.532,341,2.053,342,2.258,343,2.258,344,2.053,345,2.258,346,3.696,347,2.532,348,2.532,349,2.532,350,2.532,351,2.532,352,2.532,353,2.532,354,3.696,355,2.258,356,2.053,357,2.532,358,2.532,359,2.532,360,2.258,361,2.532,362,2.532,363,2.532,364,2.258,365,4.799,366,2.532,367,2.532,368,2.532,369,2.532,370,3.696,371,3.696,372,3.696]],["title/injectables/FavoriteRepository.html",[177,0.212,373,1.926]],["body/injectables/FavoriteRepository.html",[14,0.019,23,0.15,24,0.133,25,0.133,28,0.286,29,0.282,59,0.15,60,0.021,61,0.011,62,0.011,69,0.204,70,0.719,71,1.169,84,0.746,86,1.164,87,0.995,88,0.461,89,1.164,91,1.039,115,0.519,129,0.841,130,0.758,133,1.156,142,0.841,146,0.519,177,0.246,178,0.854,188,2.244,222,1.133,253,3.221,271,0.703,291,2.411,293,1.774,373,2.231,374,2.244,375,3.679,376,3.679,377,2.983,378,3.679,379,2.929,380,3.246,381,2.929,382,3.679,383,4.349,384,3.721,385,2.929,386,3.683,387,4.349,388,2.929,389,4.349,390,2.929,391,4.349,392,2.929,393,2.099,394,2.516,395,1.743,396,1.683,397,2.04,398,2.983,399,1.436,400,2.516,401,2.231,402,1.878,403,2.516,404,2.516,405,2.516,406,1.878,407,2.516,408,1.878,409,2.244,410,2.516]],["title/classes/Favorites.html",[60,0.026,393,1.812]],["body/classes/Favorites.html",[14,0.019,23,0.22,24,0.195,25,0.195,28,0.318,56,2.55,59,0.22,60,0.03,61,0.014,62,0.014,69,0.299,81,2.437,84,0.702,88,0.543,199,1.874,201,1.881,222,1.474,262,3.032,291,2.107,384,3.225,386,3.684,393,3.035,395,2.55,396,2.19,397,2.985,408,3.572,411,3.681,412,5.573,413,3.315,414,5.022,415,4.286,416,4.286,417,4.743,418,3.283,419,4.743,420,3.881,421,1.874,422,2.747,423,3.283,424,3.681,425,3.283,426,4.268]],["title/injectables/GetFavoritesUseCase.html",[177,0.212,427,2.2]],["body/injectables/GetFavoritesUseCase.html",[14,0.019,23,0.236,24,0.209,25,0.209,28,0.299,29,0.442,59,0.236,60,0.033,61,0.014,62,0.014,69,0.32,70,0.977,71,1.073,84,0.733,86,1.144,87,0.977,88,0.482,89,1.144,91,0.856,102,2.121,115,0.812,129,0.901,130,0.812,133,1.048,142,0.901,177,0.334,178,1.337,213,2.546,274,2.729,290,4.459,291,2.055,293,1.9,373,3.694,427,3.463,428,3.94,429,3.94,430,4.587,431,4.587,432,3.513,433,4.587]],["title/injectables/GetProductsUseCase.html",[177,0.212,434,2.054]],["body/injectables/GetProductsUseCase.html",[14,0.019,23,0.223,24,0.197,25,0.197,28,0.289,29,0.418,59,0.223,60,0.031,61,0.014,62,0.014,69,0.303,70,0.943,71,1.046,78,1.373,84,0.707,86,1.104,87,0.943,88,0.465,89,1.104,91,0.81,102,2.007,115,0.768,129,0.853,130,0.768,142,1.224,177,0.322,178,1.265,213,2.457,249,3.342,274,2.582,434,3.12,435,3.728,436,4.34,437,3.883,438,4.34,439,5.618,440,3.431,441,4.34,442,3.602,443,3.728,444,4.34,445,4.34,446,4.34]],["title/injectables/GetUserUseCase.html",[177,0.212,447,2.2]],["body/injectables/GetUserUseCase.html",[14,0.019,23,0.209,24,0.185,25,0.185,28,0.31,29,0.392,34,1.13,59,0.209,60,0.029,61,0.013,62,0.013,69,0.284,70,0.904,71,1.013,84,0.678,86,1.058,87,0.904,88,0.446,89,1.058,91,0.759,102,1.882,115,1.069,124,2.437,129,1.058,130,0.954,133,0.929,142,0.799,143,2.355,146,0.954,177,0.309,178,1.186,213,2.355,214,1.882,215,2.486,220,2.834,222,1.597,223,2.119,224,2.609,225,1.882,226,1.994,227,1.994,228,2.609,262,1.882,290,4.126,291,1.94,293,2.231,447,3.204,448,3.495,449,4.069,450,4.069]],["title/classes/HandleError.html",[60,0.026,113,2.2]],["body/classes/HandleError.html",[14,0.019,23,0.235,24,0.208,25,0.208,28,0.235,29,0.441,32,4.89,59,0.235,60,0.033,61,0.014,62,0.014,69,0.319,70,0.975,84,0.576,86,0.898,87,0.767,88,0.378,89,0.898,91,0.853,113,3.456,132,2.114,138,2.847,146,0.81,199,1.999,225,2.953,226,2.241,341,3.184,342,3.502,343,3.502,344,3.184,345,3.502,451,3.927,452,4.989,453,5.809,454,4.572,455,3.927,456,3.502,457,4.572,458,4.093,459,4.572,460,3.927,461,4.572,462,4.572,463,4.572,464,3.184,465,4.572,466,4.572]],["title/classes/HttpExceptionFilter.html",[60,0.026,467,2.833]],["body/classes/HttpExceptionFilter.html",[14,0.019,23,0.208,24,0.185,25,0.185,28,0.276,29,0.391,59,0.208,60,0.029,61,0.013,62,0.013,69,0.283,70,0.902,78,1.056,79,3.108,80,3.108,84,0.511,86,0.797,87,0.681,88,0.336,89,0.797,91,0.757,121,2.414,137,3.14,142,0.797,143,2.807,146,1.215,199,1.774,227,1.988,257,4.618,399,2.635,401,2.113,455,3.485,456,4.916,467,4.117,468,3.485,469,6.029,470,5.376,471,6.419,472,4.057,473,4.057,474,4.057,475,4.057,476,4.057,477,4.057,478,4.057,479,6.029,480,4.057,481,6.029,482,4.057,483,5.376,484,4.057,485,4.057,486,4.057,487,4.057]],["title/interfaces/IFavoritesRepository.html",[271,0.887,398,2.576]],["body/interfaces/IFavoritesRepository.html",[14,0.019,23,0.157,24,0.139,25,0.139,28,0.292,29,0.294,59,0.157,60,0.022,61,0.011,62,0.011,69,0.213,70,0.741,71,0.953,84,0.715,86,1.116,87,0.953,88,0.47,89,1.116,91,1.06,115,0.541,129,0.6,130,0.782,133,1.184,142,0.867,146,0.541,177,0.253,188,2.339,222,1.167,253,3.248,271,0.732,291,2.42,293,1.829,304,1.496,373,1.59,374,2.339,375,3.791,376,3.791,377,3.074,378,3.791,380,1.957,382,2.622,383,4.453,384,3.746,386,3.736,387,4.453,389,4.453,391,4.453,393,2.163,394,2.622,395,1.816,396,1.735,397,2.127,398,3.611,399,1.496,400,2.622,401,2.299,402,1.957,403,2.622,404,2.622,405,2.622,406,1.957,407,2.622,408,1.957,409,2.339,410,2.622,488,3.053,489,3.053,490,3.053,491,3.053]],["title/interfaces/IUserRepository.html",[271,0.887,492,2.371]],["body/interfaces/IUserRepository.html",[14,0.019,23,0.142,24,0.125,25,0.125,28,0.278,29,0.266,59,0.21,60,0.02,61,0.01,62,0.01,69,0.192,70,0.688,71,0.97,78,0.542,84,0.728,86,1.136,87,0.97,88,0.479,89,1.136,91,1.079,104,3.011,115,0.488,129,0.542,130,0.488,133,1.32,142,0.805,146,0.488,177,0.235,202,1.143,215,0.979,222,1.871,234,3.405,235,3.769,249,1.641,253,3.271,271,0.983,291,1.858,293,1.697,304,1.352,328,2.627,380,1.768,395,1.641,399,1.352,401,2.134,402,1.768,406,1.768,413,2.438,421,1.206,492,3.134,493,1.921,494,3.519,495,4.144,496,3.519,497,4.22,498,3.744,499,2.758,500,2.369,501,3.744,502,2.758,503,3.744,504,2.369,505,4.144,506,4.027,507,3.469,508,2.758,509,3.744,510,3.744,511,2.758,512,2.369,513,2.758,514,3.138,515,2.113,516,3.138,517,2.113,518,3.744,519,2.113,520,1.768,521,2.113,522,2.113,523,2.113,524,2.113,525,2.113,526,2.113,527,2.113]],["title/classes/LoginBody.html",[60,0.026,93,2.2]],["body/classes/LoginBody.html",[14,0.019,23,0.241,24,0.214,25,0.214,28,0.303,59,0.241,60,0.042,61,0.015,62,0.015,69,0.328,78,1.333,81,2.584,84,0.744,88,0.489,93,3.515,101,2.413,126,2.446,199,2.054,201,1.995,202,2.678,203,3.598,204,4.526,206,4.503,207,4.503,208,3.011,209,3.011,210,3.598,528,4.034,529,4.034,530,4.034,531,4.697,532,4.697,533,5.075,534,4.034,535,4.034]],["title/injectables/LoginUseCase.html",[166,2.2,177,0.212]],["body/injectables/LoginUseCase.html",[14,0.019,23,0.174,24,0.154,25,0.154,28,0.334,29,0.327,34,0.942,59,0.174,60,0.024,61,0.012,62,0.012,69,0.237,70,0.799,71,0.923,84,0.599,86,0.935,87,0.799,88,0.394,89,0.935,90,2.332,91,0.633,93,3.545,101,1.776,102,1.569,115,0.973,120,2.599,124,2.308,129,0.935,130,0.843,133,1.087,142,0.667,143,2.844,146,1.152,166,2.831,177,0.273,178,0.989,202,1.406,213,2.404,214,1.569,215,2.37,221,3.051,222,1.259,223,1.767,224,2.176,225,2.542,226,2.694,227,2.694,228,2.176,267,1.885,269,1.767,277,1.885,293,1.406,298,2.176,300,2.915,301,2.915,460,2.915,536,2.915,537,3.394,538,2.915,539,3.394,540,3.394,541,4.759,542,3.394,543,3.394,544,3.394,545,2.364,546,3.394,547,2.364,548,3.394,549,3.394]],["title/injectables/PasswdRecoveryUseCase.html",[167,2.2,177,0.212]],["body/injectables/PasswdRecoveryUseCase.html",[14,0.019,23,0.188,24,0.166,25,0.166,28,0.331,29,0.353,34,1.015,59,0.188,60,0.026,61,0.012,62,0.012,69,0.255,70,0.841,71,0.96,78,1.123,84,0.631,86,0.985,87,0.841,88,0.415,89,0.985,91,0.682,101,2.296,115,1.089,124,2.362,129,0.985,130,1.013,133,0.835,143,2.192,146,1.089,167,2.982,177,0.287,178,1.066,181,2.981,192,2.344,213,2.192,214,1.691,215,2.419,217,3.839,223,1.904,224,2.344,225,1.691,226,1.792,227,1.792,228,2.344,267,2.031,269,1.904,272,2.175,273,2.175,277,2.031,298,2.344,355,2.801,364,2.801,545,2.547,547,2.547,550,3.14,551,3.656,552,3.656,553,5.012,554,3.656,555,2.801,556,5.012,557,3.656,558,3.656,559,2.801]],["title/injectables/PopulateProductsService.html",[18,2.2,177,0.212]],["body/injectables/PopulateProductsService.html",[14,0.019,18,2.568,23,0.329,24,0.135,25,0.135,28,0.288,29,0.286,34,0.822,59,0.152,60,0.021,61,0.011,62,0.011,69,0.207,70,0.725,71,0.855,78,1.1,84,0.705,86,0.582,87,0.497,88,0.357,89,0.582,91,0.805,115,0.524,124,2.205,129,0.582,130,1.136,132,1.369,133,0.986,137,1.542,138,1.451,142,0.848,146,0.902,177,0.248,178,0.863,201,1.457,208,3.266,214,1.369,271,0.71,274,1.761,291,1.387,396,2.2,440,3.236,464,2.062,560,2.268,561,4.809,562,4.288,563,4.317,564,2.961,565,4.146,566,2.961,567,2.543,568,3.306,569,2.268,570,4.759,571,4.759,572,4.759,573,4.759,574,3.708,575,2.543,576,4.376,577,4.376,578,2.543,579,4.376,580,5.337,581,4.376,582,4.376,583,2.543,584,2.543,585,2.543,586,2.268,587,2.543,588,2.543,589,2.543,590,2.543,591,2.543,592,3.708,593,2.543,594,2.062,595,3.708,596,2.543,597,2.543,598,2.543,599,2.543]],["title/interfaces/ProductEl.html",[271,0.887,565,2.576]],["body/interfaces/ProductEl.html",[14,0.019,18,1.761,23,0.35,24,0.135,25,0.135,28,0.288,29,0.286,34,0.822,59,0.152,60,0.021,61,0.011,62,0.011,69,0.207,71,0.497,78,1.371,88,0.514,115,0.524,124,1.808,130,0.902,132,1.369,133,0.986,137,1.542,138,1.451,142,0.848,146,0.902,177,0.248,201,1.457,208,3.266,271,0.71,274,1.761,291,1.997,304,1.451,396,1.697,440,3.492,464,2.062,560,2.268,561,2.543,562,2.268,565,3.9,567,2.543,568,3.306,569,2.268,570,5.136,571,5.136,572,5.136,573,5.136,574,3.708,575,2.543,576,4.376,577,4.376,578,2.543,579,4.376,580,5.337,581,4.376,582,4.376,583,2.543,584,2.543,585,2.543,586,2.268,587,2.543,588,2.543,589,2.543,590,2.543,591,2.543,592,3.708,593,2.543,594,2.062,595,3.708,596,2.543,597,2.543,598,2.543,599,2.543]],["title/interfaces/ProductRepositoryInterface.html",[271,0.887,600,2.576]],["body/interfaces/ProductRepositoryInterface.html",[14,0.019,23,0.191,24,0.169,25,0.169,28,0.296,29,0.358,59,0.191,60,0.026,61,0.013,62,0.013,69,0.259,70,0.851,71,0.968,78,1.369,84,0.726,86,0.996,87,0.851,88,0.419,89,0.996,91,1.076,115,0.658,129,0.73,130,0.658,142,1.133,177,0.291,253,3.268,271,0.891,304,1.821,396,1.992,399,1.821,401,1.935,421,2.216,437,2.064,440,2.639,442,2.382,600,4.016,601,2.846,602,5.567,603,4.352,604,4.352,605,3.716,606,4.953,607,3.716,608,4.953,609,3.716,610,2.846,611,3.192,612,3.192,613,3.192,614,4.953,615,3.192,616,4.352,617,3.192,618,4.352,619,4.352,620,3.192]],["title/classes/Products.html",[60,0.026,396,1.453]],["body/classes/Products.html",[14,0.019,23,0.29,24,0.137,25,0.137,28,0.264,56,4.206,59,0.155,60,0.021,61,0.011,62,0.011,69,0.21,78,1.298,81,2.889,84,0.832,87,0.506,88,0.594,199,1.318,201,1.476,222,1.493,262,2.61,291,2.009,293,2.132,384,1.569,393,2.522,396,2.022,408,2.803,413,3.93,414,3.349,417,5.06,418,2.308,419,3.349,420,3.045,421,1.318,422,1.932,423,2.308,424,2.588,425,2.308,426,2.308,440,2.68,570,3.941,571,3.941,572,3.941,573,3.941,621,2.588,622,4.419,623,5.54,624,6.016,625,3.013,626,3.755,627,3.013,628,3.013,629,3.013,630,3.013,631,3.013,632,3.013,633,2.588,634,3.755,635,3.013,636,3.755,637,3.013,638,3.013,639,4.848,640,4.372]],["title/controllers/ProductsControllers.html",[63,2.054,641,2.576]],["body/controllers/ProductsControllers.html",[14,0.019,23,0.21,24,0.186,25,0.186,28,0.33,29,0.394,59,0.21,60,0.029,61,0.013,62,0.013,63,2.267,65,2.267,67,3.126,69,0.285,70,0.906,71,1.015,78,1.06,81,1.785,84,0.514,86,0.802,87,0.685,88,0.501,89,0.802,91,0.762,102,1.887,113,2.428,114,3.126,115,0.956,118,5.526,125,3.126,126,2.126,129,0.802,130,0.723,132,1.887,133,0.932,137,2.126,138,2,139,3.126,142,0.802,146,0.956,249,2.428,396,1.604,434,3.358,440,3.149,442,3.876,641,3.759,642,3.505,643,4.635,644,4.081,645,5.397,646,4.081,647,3.126,648,4.081,649,4.081,650,4.081,651,5.397,652,4.081]],["title/modules/ProductsModule.html",[0,1.453,16,2.371]],["body/modules/ProductsModule.html",[0,2.376,2,2,3,2.126,4,2.428,5,2.428,6,2.126,7,3.358,8,2.267,14,0.019,15,3.818,16,4.73,20,3.211,21,2.428,22,2.267,23,0.21,24,0.186,25,0.186,27,3.46,28,0.36,29,0.394,35,3.126,59,0.21,60,0.029,61,0.013,62,0.013,65,2.997,434,3.818,437,3.818,443,3.505,641,4.211,647,3.126,653,3.505,654,3.505,655,4.081,656,4.407,657,4.081,658,4.081,659,4.081,660,4.134,661,4.081]],["title/injectables/ProductsRepository.html",[177,0.212,437,2.054]],["body/injectables/ProductsRepository.html",[14,0.019,23,0.183,24,0.162,25,0.162,28,0.29,29,0.344,59,0.183,60,0.025,61,0.012,62,0.012,69,0.249,70,0.828,71,1.176,78,1.356,84,0.767,86,1.11,87,0.948,88,0.408,89,1.11,91,1.054,115,0.632,129,0.969,130,0.632,142,1.11,177,0.283,178,1.041,253,3.24,271,0.857,396,1.938,399,1.75,401,1.86,421,2.156,437,2.738,440,2.568,442,2.289,600,3.434,601,2.735,602,5.489,603,4.235,604,4.235,606,4.851,608,4.851,610,2.735,611,3.067,612,3.067,613,4.235,614,4.851,615,3.067,616,4.235,617,3.067,618,4.235,619,4.235,620,3.067,662,3.571,663,3.571,664,3.571,665,3.571,666,3.571]],["title/injectables/ProductsServices.html",[177,0.212,656,2.371]],["body/injectables/ProductsServices.html",[14,0.019,23,0.228,24,0.202,25,0.202,28,0.293,29,0.428,59,0.228,60,0.032,61,0.014,62,0.014,69,0.31,70,0.957,71,1.057,78,1.382,84,0.718,86,1.12,87,0.957,88,0.472,89,1.12,91,0.828,102,2.053,115,1.009,129,1.12,130,0.786,142,0.872,177,0.327,178,1.294,249,3.391,434,3.906,440,3.461,442,2.845,643,4.896,647,3.4,656,3.654,667,3.812,668,4.438,669,4.438,670,5.7,671,4.438,672,4.438]],["title/classes/RegisterBody.html",[60,0.026,104,1.926]],["body/classes/RegisterBody.html",[14,0.019,23,0.228,24,0.202,25,0.202,28,0.293,59,0.228,60,0.041,61,0.014,62,0.014,69,0.31,78,1.382,81,2.754,84,0.793,88,0.521,101,2.35,104,2.969,126,2.312,199,1.941,201,1.924,202,2.609,203,3.4,204,4.366,206,4.628,207,4.628,208,2.845,209,2.845,210,3.4,529,3.812,530,3.812,533,4.896,534,3.812,535,3.812,673,3.812,674,4.386,675,4.438,676,4.438,677,4.438,678,5.7,679,4.438,680,4.438]],["title/injectables/RegisterUseCase.html",[168,2.054,177,0.212]],["body/injectables/RegisterUseCase.html",[14,0.019,23,0.172,24,0.152,25,0.152,28,0.332,29,0.322,34,0.928,59,0.172,60,0.024,61,0.012,62,0.012,69,0.233,70,0.791,71,0.915,78,1.071,84,0.593,86,0.925,87,0.791,88,0.39,89,0.925,91,0.624,101,2.483,115,1.048,124,2.297,129,0.925,130,0.965,133,1.352,143,2.06,146,1.146,168,2.616,177,0.27,178,0.975,181,2.909,185,2.561,192,2.144,202,2.259,213,2.385,214,1.546,215,2.36,221,3.02,223,1.742,225,1.546,226,1.639,227,1.639,229,3.608,230,2.561,267,1.857,269,1.742,271,0.802,272,1.989,273,1.989,277,1.857,298,2.144,356,3.281,538,2.872,545,2.329,547,2.329,555,2.561,559,2.561,674,3.798,681,2.561,682,3.344,683,4.123,684,3.344,685,2.872,686,2.872,687,4.045,688,2.872,689,2.872,690,4.045,691,2.872,692,2.872,693,2.872]],["title/interfaces/RegisterUserCaseProps.html",[271,0.887,683,2.576]],["body/interfaces/RegisterUserCaseProps.html",[14,0.019,23,0.178,24,0.158,25,0.158,28,0.336,29,0.335,34,0.964,59,0.178,60,0.025,61,0.012,62,0.012,69,0.242,71,0.583,78,1.368,88,0.461,101,2.632,115,1.065,124,1.974,129,0.682,130,0.985,133,1.374,143,2.114,146,1.16,168,1.928,177,0.277,181,2.433,185,2.659,192,2.225,201,1.632,202,2.714,213,1.518,215,1.974,221,3.099,223,1.808,225,1.605,226,1.701,227,1.701,229,3.703,230,2.659,267,1.928,269,1.808,271,0.833,272,2.065,273,2.065,277,1.928,298,2.225,304,1.701,356,3.368,545,2.418,547,2.418,555,2.659,559,2.659,674,4.563,681,2.659,683,3.875,685,2.981,686,2.981,687,4.153,688,2.981,689,2.981,690,4.153,691,2.981,692,2.981,693,2.981]],["title/injectables/RmUnverifiedUsers.html",[19,2.371,177,0.212]],["body/injectables/RmUnverifiedUsers.html",[14,0.019,19,3.558,23,0.219,24,0.194,25,0.194,28,0.336,29,0.411,37,3.262,56,2.534,59,0.219,60,0.03,61,0.014,62,0.014,69,0.297,70,0.932,71,1.036,81,1.863,84,0.536,91,0.795,132,1.97,133,0.973,137,2.218,138,2.087,146,0.754,177,0.318,178,1.241,222,1.126,334,4.251,335,3.262,421,1.863,458,2.73,464,2.966,520,2.73,594,3.866,610,3.262,694,3.658,695,6.541,696,5.55,697,4.259,698,4.259,699,4.259,700,5.55,701,4.259,702,3.658,703,4.259,704,4.259,705,4.259]],["title/interfaces/SendEmailProps.html",[251,2.576,271,0.887]],["body/interfaces/SendEmailProps.html",[14,0.019,23,0.198,24,0.175,25,0.175,28,0.323,29,0.371,34,1.069,59,0.198,60,0.027,61,0.013,62,0.013,68,2.95,69,0.269,71,0.647,78,1.426,87,0.647,88,0.486,90,1.888,115,0.682,124,2.084,130,0.919,133,0.88,142,0.757,146,0.682,177,0.298,181,1.684,201,1.753,222,1.019,241,2.95,242,3.308,244,3.308,246,3.308,247,4.46,251,4.091,253,1.781,256,3.308,257,2.95,258,3.308,259,2.683,260,3.308,261,2.683,262,1.781,263,4.46,264,3.308,265,3.308,267,2.139,268,4.46,269,2.006,270,3.977,271,0.924,272,4.022,273,4.022,274,2.292,275,3.308,276,3.308,277,2.139,278,3.308,279,3.308,280,2.95,281,2.95,282,3.308,283,3.308,304,1.888]],["title/classes/ToggleFavoriteBody.html",[60,0.026,706,2.576]],["body/classes/ToggleFavoriteBody.html",[14,0.019,23,0.262,24,0.232,25,0.232,28,0.319,59,0.262,60,0.044,61,0.015,62,0.015,69,0.356,81,2.23,84,0.642,88,0.422,126,2.656,199,2.23,201,2.099,206,4.331,207,4.331,209,3.269,291,1.998,384,3.494,706,4.331,707,4.38,708,5.1,709,5.1]],["title/injectables/ToggleFavoriteUseCase.html",[177,0.212,710,2.2]],["body/injectables/ToggleFavoriteUseCase.html",[14,0.019,23,0.219,24,0.194,25,0.194,28,0.286,29,0.412,59,0.219,60,0.03,61,0.014,62,0.014,69,0.298,70,0.933,71,1.038,84,0.7,86,1.093,87,0.933,88,0.46,89,1.093,91,0.797,115,0.985,129,1.093,130,0.756,133,1.412,142,0.839,146,0.756,177,0.319,178,1.245,213,2.432,291,2.237,373,3.626,384,3.626,386,3.309,429,3.669,432,3.272,710,3.309,711,3.669,712,4.272,713,5.561,714,4.272,715,4.776,716,4.272,717,4.272,718,4.272]],["title/interfaces/UpdateField.html",[271,0.887,497,2.371]],["body/interfaces/UpdateField.html",[14,0.019,23,0.165,24,0.146,25,0.146,28,0.298,29,0.309,59,0.235,60,0.023,61,0.011,62,0.011,69,0.224,71,1.03,78,1.046,88,0.441,104,2.774,115,0.567,129,0.629,130,0.567,133,1.402,142,0.898,146,0.567,177,0.262,201,1.542,202,1.327,215,1.137,222,1.916,234,4.446,235,4.575,253,3.206,271,1.096,291,1.711,293,1.893,304,1.57,380,2.053,395,1.906,399,1.57,401,2.379,402,2.053,406,2.053,413,2.718,421,1.401,492,2.929,493,2.231,495,3.499,497,4.092,498,3.499,501,3.499,503,3.499,505,3.499,506,3.709,507,2.929,509,3.499,510,3.499,514,3.499,515,2.453,516,3.499,517,2.453,518,4.079,519,2.453,520,2.053,521,2.453,522,2.453,523,2.453,524,2.453,525,2.453,526,2.453,527,2.453]],["title/classes/User.html",[60,0.026,222,0.978]],["body/classes/User.html",[14,0.019,23,0.168,24,0.149,25,0.149,28,0.277,56,4.191,59,0.168,60,0.023,61,0.011,62,0.011,69,0.228,78,1.263,81,2.811,84,0.809,87,0.549,88,0.583,101,2.011,199,1.431,201,1.566,202,2.232,222,1.227,262,2.711,291,1.49,293,2.232,386,1.947,393,2.641,396,2.304,397,2.279,408,2.974,409,4.74,413,3.824,414,3.553,417,4.923,418,2.506,419,3.553,420,3.231,421,1.431,422,2.098,423,2.506,425,2.506,426,2.506,507,2.974,520,3.454,622,2.81,623,5.316,624,5.8,626,3.984,633,2.81,634,3.984,636,3.984,639,2.81,674,3.753,719,2.81,720,3.272,721,3.272,722,3.272,723,3.272,724,3.272,725,4.638,726,3.272,727,3.272,728,3.272,729,3.272,730,3.272,731,3.272]],["title/controllers/UserControllers.html",[63,2.054,732,2.576]],["body/controllers/UserControllers.html",[14,0.019,23,0.119,24,0.105,25,0.105,28,0.322,29,0.224,34,0.644,44,1.38,45,1.776,59,0.119,60,0.016,61,0.009,62,0.009,63,1.288,65,1.288,67,1.776,69,0.162,70,0.603,71,1.15,79,4.103,80,3.792,81,2.342,84,0.674,86,1.052,87,0.899,88,0.443,89,1.052,90,2.625,91,0.999,96,5.075,102,2.033,113,1.38,114,1.776,115,0.778,117,1.615,119,1.992,121,1.38,124,1.56,125,1.776,126,1.208,129,0.456,130,0.636,132,2.477,133,1.223,137,2.79,138,2.625,139,4.103,142,0.864,143,1.571,146,1.11,151,1.992,157,1.992,198,3.448,202,2.051,222,1.163,327,1.776,328,1.487,377,2.502,384,1.871,393,2.426,706,3.448,715,3.085,732,2.502,733,1.992,734,3.085,735,3.085,736,3.085,737,3.085,738,2.319,739,5.885,740,5.937,741,3.592,742,2.319,743,2.319,744,3.592,745,2.319,746,2.319,747,3.592,748,2.319,749,2.319,750,2.319,751,2.319,752,3.592,753,2.319,754,2.319,755,2.819,756,1.992,757,2.319,758,2.319,759,2.319,760,2.319,761,5.356,762,2.319,763,2.319,764,2.319,765,2.319,766,2.319,767,2.319,768,2.319,769,2.319,770,2.319,771,2.319,772,2.319,773,2.319]],["title/modules/UserModule.html",[0,1.453,17,2.2]],["body/modules/UserModule.html",[0,2.066,2,1.534,3,1.63,4,1.862,5,1.862,6,1.63,7,2.92,8,2.92,14,0.019,15,3.518,17,4.451,20,2.673,21,1.862,22,1.738,23,0.161,24,0.142,25,0.142,27,2.881,28,0.371,29,0.302,33,3.13,34,0.869,35,2.397,59,0.161,60,0.022,61,0.011,62,0.011,65,2.496,164,3.768,176,2.688,211,3.768,215,2.504,220,2.18,287,3.768,373,3.675,427,3.768,432,2.397,447,3.768,710,3.768,732,3.662,755,2.881,756,2.688,774,2.688,775,3.13,776,2.688,777,2.688,778,3.13,779,3.13,780,2.688,781,2.688,782,2.688,783,2.688,784,2.688,785,3.442,786,3.13,787,3.442,788,3.13]],["title/injectables/UserRepository.html",[177,0.212,215,1.312]],["body/injectables/UserRepository.html",[14,0.019,23,0.136,24,0.121,25,0.121,28,0.273,29,0.256,59,0.205,60,0.019,61,0.01,62,0.01,69,0.185,70,0.669,71,1.18,78,0.522,84,0.752,86,1.174,87,1.003,88,0.471,89,1.174,91,1.062,104,2.963,115,0.47,129,0.783,130,0.47,133,1.299,142,0.783,146,0.47,177,0.229,178,0.774,202,1.101,215,1.414,222,1.859,234,3.329,235,3.699,249,1.58,253,3.25,271,0.956,291,1.828,293,1.65,328,2.554,380,2.554,395,1.58,399,1.302,401,2.075,402,1.703,406,1.703,413,2.37,421,1.162,492,2.554,493,1.85,494,3.422,495,4.068,496,3.422,497,4.178,498,3.661,500,2.282,501,3.661,503,3.661,504,2.282,505,4.068,506,3.963,507,3.405,509,3.661,510,3.661,512,2.282,514,3.051,515,2.035,516,3.051,517,2.035,518,3.661,519,2.035,520,1.703,521,2.035,522,2.035,523,2.035,524,2.035,525,2.035,526,2.035,527,2.035,789,2.656,790,2.656,791,2.656,792,2.656,793,2.656,794,2.656,795,2.656]],["title/classes/UserServices.html",[60,0.026,755,2.371]],["body/classes/UserServices.html",[14,0.019,23,0.14,24,0.124,25,0.124,28,0.321,29,0.263,59,0.14,60,0.019,61,0.01,62,0.01,69,0.191,70,0.683,71,1.185,78,1.414,84,0.76,86,1.186,87,1.013,88,0.5,89,1.186,90,2.821,91,1.074,101,1.518,102,2.662,115,1.107,129,0.799,130,1.069,142,1.131,146,1.019,180,2.345,181,2.64,192,1.751,199,1.194,211,3.719,218,4.624,287,3.719,291,1.561,293,2.59,377,2.833,384,2.804,386,1.625,427,3.719,447,3.719,710,3.719,734,3.493,735,3.493,736,3.493,737,3.493,755,2.607,780,2.345,781,2.345,782,2.345,783,2.345,784,2.345,796,2.345,797,2.731,798,4.067,799,2.731,800,4.067,801,2.731,802,4.067,803,2.731,804,4.067,805,2.731,806,4.067,807,2.731,808,5.757,809,2.731,810,2.731,811,2.731,812,2.731,813,2.731]],["title/coverage.html",[814,3.869]],["body/coverage.html",[6,1.386,14,0.019,18,1.583,19,1.706,25,0.121,42,1.854,44,1.583,60,0.047,61,0.01,62,0.01,63,2.658,64,1.854,66,2.286,88,0.22,93,1.583,104,1.386,113,1.583,122,1.583,165,1.583,166,1.583,167,1.583,168,1.478,177,0.411,179,2.286,181,1.164,198,1.854,200,2.286,211,1.583,212,2.286,215,0.944,222,0.704,241,3.056,251,1.854,271,1.53,285,2.039,287,1.583,288,2.286,295,2.286,303,1.854,305,3.056,373,1.386,374,3.056,393,1.304,396,1.046,398,1.854,411,2.286,420,1.854,427,1.583,428,2.286,434,1.478,435,2.286,437,1.478,447,1.583,448,2.286,451,2.286,458,1.706,467,2.039,468,2.286,492,1.706,493,3.333,497,1.706,528,2.286,536,2.286,550,2.286,560,3.056,565,1.854,594,5.317,600,1.854,601,3.056,621,2.286,641,1.854,642,2.286,656,1.706,660,2.039,667,2.286,673,2.286,681,3.056,683,1.854,694,2.286,706,1.854,707,2.286,710,1.583,711,2.286,719,2.286,732,1.854,733,2.286,755,1.706,785,2.039,787,2.039,796,2.286,814,2.039,815,2.286,816,2.662,817,2.662,818,3.99,819,5.695,820,5.979,821,5.695,822,6.972,823,5.695,824,5.316,825,5.979,826,2.286,827,2.286,828,2.286,829,5.316,830,2.286,831,2.286,832,2.039,833,2.286,834,2.662,835,2.662]],["title/dependencies.html",[3,2.317,836,2.651]],["body/dependencies.html",[3,2.191,14,0.019,29,0.406,31,3.613,32,3.222,34,1.168,37,3.222,60,0.039,61,0.014,62,0.014,121,3.275,126,2.191,209,2.697,221,2.697,269,2.191,270,3.222,314,3.222,330,3.222,421,2.408,422,2.697,452,3.613,568,3.222,569,3.222,740,3.613,837,4.207,838,6.137,839,4.207,840,4.207,841,4.207,842,4.207,843,4.207,844,4.207,845,4.207,846,4.207,847,4.207,848,5.505,849,4.207,850,4.207,851,4.207,852,4.207,853,4.207,854,4.207,855,4.207,856,4.207,857,4.207,858,4.207,859,4.207,860,4.207,861,4.207,862,4.207,863,4.207,864,4.207,865,4.207,866,4.207,867,4.207,868,4.207,869,4.207,870,4.207,871,4.207,872,3.613,873,4.207,874,4.207,875,4.207,876,4.207,877,4.207]],["title/miscellaneous/functions.html",[878,2.15,879,3.821]],["body/miscellaneous/functions.html",[6,3.68,14,0.017,61,0.017,62,0.017,69,0.402,833,4.951,878,4.015,879,4.951,880,5.765]],["title/index.html",[69,0.215,881,2.651,882,2.651]],["body/index.html",[14,0.019,24,0.192,61,0.014,62,0.014,341,2.939,344,2.939,422,2.705,562,5.314,814,3.232,883,4.22,884,4.22,885,5.516,886,4.22,887,4.22,888,4.22,889,4.22,890,4.22,891,3.624,892,6.146,893,4.22,894,4.22,895,4.22,896,6.146,897,7.068,898,4.22,899,4.22,900,4.22,901,4.22,902,4.22,903,5.516,904,4.22,905,4.22,906,4.22,907,4.22,908,5.516,909,5.516,910,4.22,911,4.22,912,4.22,913,5.516,914,5.516,915,4.22,916,4.22,917,4.22,918,4.22,919,4.22,920,3.624,921,4.22,922,4.22,923,4.22,924,4.22,925,4.22,926,4.22,927,4.22,928,4.22,929,4.22,930,3.624,931,4.22,932,4.22,933,4.22,934,4.22,935,4.22,936,4.22,937,2.939]],["title/guards/isLoggedIn.html",[44,2.2,832,2.833]],["body/guards/isLoggedIn.html",[14,0.019,23,0.201,24,0.178,25,0.178,28,0.325,29,0.378,34,1.088,44,3.125,59,0.201,60,0.028,61,0.013,62,0.013,69,0.273,70,0.882,84,0.661,86,1.032,87,0.882,88,0.435,89,1.032,90,2.574,91,0.731,115,0.93,124,2.411,129,1.032,130,0.694,132,1.812,137,2.041,142,0.77,146,0.93,177,0.301,214,1.812,225,2.429,253,2.429,262,1.812,267,2.176,269,2.041,277,2.176,399,1.92,456,3.001,458,3.367,507,3.367,739,3.365,831,3.365,872,3.365,938,3.918,939,6.601,940,3.918,941,3.918,942,6.33,943,3.918,944,5.252,945,5.924,946,3.918,947,3.918,948,3.918,949,3.918,950,3.918,951,3.918,952,3.918,953,3.918]],["title/license.html",[881,2.651,882,2.651,937,2.15]],["body/license.html",[14,0.013,22,2.182,61,0.013,62,0.013,121,2.338,272,2.338,273,2.338,360,3.009,506,2.737,586,3.009,815,3.375,937,4.132,954,3.929,955,3.929,956,5.262,957,5.262,958,3.375,959,3.929,960,5.262,961,3.929,962,3.375,963,3.375,964,3.929,965,3.929,966,3.929,967,3.929,968,3.929,969,3.929,970,3.929,971,5.262,972,6.945,973,3.929,974,3.929,975,3.929,976,5.933,977,3.929,978,5.262,979,3.929,980,3.929,981,6.337,982,3.929,983,3.929,984,3.929,985,3.929,986,3.929,987,3.929,988,3.929,989,3.929,990,3.929,991,3.929,992,3.929,993,3.929,994,3.929,995,3.375,996,3.929,997,3.929,998,3.929,999,3.929,1000,3.929,1001,3.929,1002,3.929,1003,3.929,1004,3.929,1005,3.929,1006,3.929,1007,3.929,1008,3.929,1009,3.929,1010,3.929,1011,3.929,1012,3.929,1013,3.929,1014,3.929,1015,3.929,1016,3.929,1017,3.929,1018,3.929,1019,3.929,1020,3.929,1021,3.929,1022,3.929,1023,3.929,1024,3.929,1025,3.929,1026,3.929,1027,3.929,1028,3.929,1029,3.929,1030,3.929,1031,3.929,1032,3.929,1033,3.929,1034,3.929,1035,3.929,1036,3.929,1037,3.929,1038,3.929,1039,3.929,1040,3.929,1041,3.929,1042,3.929,1043,3.929,1044,3.929,1045,3.929]],["title/modules.html",[2,2.475]],["body/modules.html",[1,3.675,2,2.586,13,3.383,14,0.016,15,2.93,16,3.383,17,3.139,61,0.016,62,0.016,164,3.139,920,6.208,1046,7.228,1047,7.228,1048,7.341,1049,5.276,1050,5.276]],["title/overview.html",[1051,4.338]],["body/overview.html",[0,1.2,1,5.01,2,1.496,3,1.59,4,1.816,5,1.816,6,1.59,7,1.696,8,1.696,9,2.622,10,2.622,11,2.622,12,2.622,13,4.664,14,0.019,15,3.347,16,4.454,17,4.44,18,3.853,19,3.324,20,2.626,21,1.816,22,1.696,61,0.011,62,0.011,65,1.696,122,3.084,161,2.622,162,2.622,163,2.622,164,3.853,165,3.084,166,3.084,167,3.084,168,2.879,178,0.89,181,2.832,199,1.335,211,3.084,215,2.298,236,2.622,237,2.622,238,2.622,287,3.084,304,1.496,373,3.373,427,3.084,434,2.879,437,2.879,447,3.084,653,2.622,654,2.622,656,3.324,702,2.622,710,3.084,774,2.622,776,2.622,777,2.622,832,2.339,1051,2.622,1052,3.053,1053,3.053,1054,3.053,1055,3.053,1056,3.053]],["title/properties.html",[201,1.502,836,2.651]],["body/properties.html",[14,0.018,61,0.016,62,0.016,201,1.868,280,4.237,281,4.237,891,4.751,930,4.751,937,3.853,958,4.751,962,4.751,963,4.751,1057,5.532,1058,5.532,1059,5.532,1060,5.532,1061,5.532]],["title/miscellaneous/variables.html",[878,2.15,1062,3.821]],["body/miscellaneous/variables.html",[14,0.019,42,2.969,53,2.229,56,1.732,61,0.011,62,0.011,69,0.203,70,0.489,71,0.489,88,0.46,90,2.089,101,2.073,117,2.027,132,1.346,133,0.665,138,1.426,142,1.254,146,0.515,222,1.633,254,5.077,255,5.077,259,2.027,261,2.027,262,2.333,285,3.265,303,2.969,305,2.229,306,2.5,307,2.5,308,2.5,309,2.5,310,2.5,311,2.5,312,2.5,313,2.5,314,2.229,315,2.5,316,2.5,317,2.5,318,2.5,319,2.5,320,2.5,321,2.5,322,2.5,323,2.5,324,2.5,325,2.5,326,2.5,327,2.229,328,1.866,329,2.5,330,2.229,331,2.5,332,2.5,333,2.5,334,3.265,335,2.229,336,2.5,337,2.5,338,2.5,339,2.5,340,2.5,341,2.027,342,2.229,343,2.229,344,2.027,345,2.229,346,3.661,347,2.5,348,2.5,349,2.5,350,2.5,351,2.5,352,2.5,353,2.5,354,3.661,355,2.229,356,2.027,357,2.5,358,2.5,359,2.5,360,2.229,361,2.5,362,2.5,363,2.5,364,2.229,365,4.77,366,2.5,367,2.5,368,2.5,369,2.5,370,3.661,371,3.661,372,3.661,393,2.472,396,1.983,421,2.429,458,1.866,660,3.265,785,3.265,787,3.265,826,2.5,827,2.5,828,2.5,830,2.5,878,2.027,995,4.77,1062,2.5,1063,2.91,1064,2.91,1065,2.91,1066,2.91,1067,2.91,1068,2.91,1069,2.91,1070,2.91,1071,2.91,1072,2.91,1073,2.91,1074,2.91,1075,2.91,1076,5.044]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"guards/isLoggedIn.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":594,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RmUnverifiedUsers.html":{},"coverage.html":{}}}],["0.14.1",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":825,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":824,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":818,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":702,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{},"overview.html":{}}}],["1.0.0",{"_index":1058,"title":{},"body":{"properties.html":{}}}],["1.4.6",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["1.99",{"_index":588,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["10",{"_index":1055,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":838,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":535,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["100)@isemail",{"_index":530,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["1000",{"_index":335,"title":{},"body":{"interfaces/Env.html":{},"injectables/RmUnverifiedUsers.html":{},"miscellaneous/variables.html":{}}}],["12.0.1",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["14.99",{"_index":591,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["16",{"_index":204,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["16.4.5",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":1054,"title":{},"body":{"overview.html":{}}}],["1d",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["1h",{"_index":555,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["2.1.6",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["2.99",{"_index":584,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["20",{"_index":580,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["2024",{"_index":586,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"license.html":{}}}],["24",{"_index":333,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["24.99",{"_index":590,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["24}h",{"_index":549,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["3",{"_index":1053,"title":{},"body":{"overview.html":{}}}],["3.2.3",{"_index":839,"title":{},"body":{"dependencies.html":{}}}],["3.25",{"_index":587,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["4.0",{"_index":958,"title":{},"body":{"license.html":{},"properties.html":{}}}],["4.0.2",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":844,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":300,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"injectables/LoginUseCase.html":{}}}],["401",{"_index":953,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["403",{"_index":950,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["404",{"_index":228,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{}}}],["409",{"_index":686,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["422",{"_index":460,"title":{},"body":{"classes/HandleError.html":{},"injectables/LoginUseCase.html":{}}}],["465",{"_index":260,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["5.1.1",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["5.99",{"_index":583,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["50",{"_index":678,"title":{},"body":{"classes/RegisterBody.html":{}}}],["500",{"_index":466,"title":{},"body":{"classes/HandleError.html":{}}}],["6",{"_index":1052,"title":{},"body":{"overview.html":{}}}],["6.37.3",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["6.9.14",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":334,"title":{},"body":{"interfaces/Env.html":{},"injectables/RmUnverifiedUsers.html":{},"miscellaneous/variables.html":{}}}],["7",{"_index":577,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["7.4.0",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":1056,"title":{},"body":{"overview.html":{}}}],["8.4.1",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":347,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":1039,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1008,"title":{},"body":{"license.html":{}}}],["address",{"_index":282,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["allownull",{"_index":624,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["already",{"_index":357,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":921,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":987,"title":{},"body":{"license.html":{}}}],["anything",{"_index":1018,"title":{},"body":{"license.html":{}}}],["api",{"_index":1059,"title":{},"body":{"properties.html":{}}}],["api_addr",{"_index":306,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":206,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{}}}],["apiproperty()@isnotempty",{"_index":708,"title":{},"body":{"classes/ToggleFavoriteBody.html":{}}}],["apiproperty()@isnotempty()@length(0",{"_index":529,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["apiproperty()@isnotempty()@length(3",{"_index":677,"title":{},"body":{"classes/RegisterBody.html":{}}}],["apiproperty()@isnotempty()@length(6",{"_index":203,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["apitags",{"_index":125,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["apitags('auth",{"_index":127,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["apitags('products",{"_index":648,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["apitags('user",{"_index":758,"title":{},"body":{"controllers/UserControllers.html":{}}}],["app",{"_index":899,"title":{},"body":{"index.html":{}}}],["applications",{"_index":890,"title":{},"body":{"index.html":{}}}],["apply",{"_index":1010,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":993,"title":{},"body":{"license.html":{}}}],["argumentshost",{"_index":471,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":1043,"title":{},"body":{"license.html":{}}}],["array.from",{"_index":576,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["array.isarray(msg",{"_index":486,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["associated",{"_index":973,"title":{},"body":{"license.html":{}}}],["async",{"_index":71,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"miscellaneous/variables.html":{}}}],["attributes",{"_index":518,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["attribution",{"_index":956,"title":{},"body":{"license.html":{}}}],["auth",{"_index":68,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["auth.controller.js",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service.js",{"_index":123,"title":{},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{}}}],["auth/dto/registerbody.dto.js",{"_index":515,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["auth_duration_days",{"_index":307,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["authcontrollers",{"_index":64,"title":{"controllers/AuthControllers.html":{}},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":352,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["authmodule",{"_index":13,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmsg",{"_index":350,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":930,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":1032,"title":{},"body":{"license.html":{}}}],["authservices",{"_index":122,"title":{"injectables/AuthServices.html":{}},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":147,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["autoincrement",{"_index":626,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["available",{"_index":1050,"title":{},"body":{"modules.html":{}}}],["await",{"_index":133,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":922,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":221,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"dependencies.html":{}}}],["bcrypt.compare(passwd",{"_index":542,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["bcrypt.gensalt(10",{"_index":230,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["bcrypt.hash(newpasswd",{"_index":232,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["bcrypt.hash(passwd",{"_index":688,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["belongstomany",{"_index":636,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["belongstomany(undefined",{"_index":633,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["best",{"_index":589,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["body",{"_index":96,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["boolean",{"_index":507,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"guards/isLoggedIn.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1048,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1046,"title":{},"body":{"modules.html":{}}}],["building",{"_index":886,"title":{},"body":{"index.html":{}}}],["c",{"_index":961,"title":{},"body":{"license.html":{}}}],["cache",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["cacheable",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["canactivate",{"_index":939,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["canactivate(context",{"_index":941,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["catch",{"_index":137,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RmUnverifiedUsers.html":{},"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{}}}],["catch(exception",{"_index":470,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":474,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["category",{"_index":440,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{}}}],["cc",{"_index":1060,"title":{},"body":{"properties.html":{}}}],["change/${recoverytoken",{"_index":558,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["changepasswd",{"_index":734,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["changepasswd(@body",{"_index":763,"title":{},"body":{"controllers/UserControllers.html":{}}}],["changepasswd(body",{"_index":738,"title":{},"body":{"controllers/UserControllers.html":{}}}],["changepasswd(token",{"_index":798,"title":{},"body":{"classes/UserServices.html":{}}}],["changepasswdbody",{"_index":198,"title":{"classes/ChangePasswdBody.html":{}},"body":{"classes/ChangePasswdBody.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["changepasswdusecase",{"_index":211,"title":{"injectables/ChangePasswdUseCase.html":{}},"body":{"injectables/ChangePasswdUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["changes",{"_index":997,"title":{},"body":{"license.html":{}}}],["charge",{"_index":968,"title":{},"body":{"license.html":{}}}],["checkpasswd",{"_index":541,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["claim",{"_index":1035,"title":{},"body":{"license.html":{}}}],["class",{"_index":60,"title":{"classes/ChangePasswdBody.html":{},"classes/Favorites.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginBody.html":{},"classes/Products.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"classes/User.html":{},"classes/UserServices.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["classes",{"_index":199,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/Favorites.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginBody.html":{},"classes/Products.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"classes/User.html":{},"classes/UserServices.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":236,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":238,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_providers",{"_index":237,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":653,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":655,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":654,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":774,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":776,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":775,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":777,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":417,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["column({type",{"_index":623,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["commercial",{"_index":1006,"title":{},"body":{"license.html":{}}}],["common.service.js",{"_index":240,"title":{},"body":{"modules/CommonModule.html":{}}}],["common/common.module.js",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["common/common.service.js",{"_index":192,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"classes/UserServices.html":{}}}],["commonmodule",{"_index":164,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["commons",{"_index":955,"title":{},"body":{"license.html":{}}}],["commonservices",{"_index":181,"title":{"injectables/CommonServices.html":{}},"body":{"injectables/AuthServices.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["compression",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":991,"title":{},"body":{"license.html":{}}}],["config/configuration.js",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":124,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{}}}],["configuration",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Env.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":1044,"title":{},"body":{"license.html":{}}}],["console.error(err",{"_index":464,"title":{},"body":{"classes/HandleError.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RmUnverifiedUsers.html":{}}}],["console.log('\\n",{"_index":597,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["const",{"_index":146,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["constructor(@inject",{"_index":274,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/SendEmailProps.html":{}}}],["constructor(commonservices",{"_index":180,"title":{},"body":{"injectables/AuthServices.html":{},"classes/UserServices.html":{}}}],["constructor(configservice",{"_index":214,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"injectables/RegisterUseCase.html":{},"guards/isLoggedIn.html":{}}}],["constructor(favoritemodel",{"_index":379,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["constructor(favoriterepository",{"_index":429,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{},"injectables/ToggleFavoriteUseCase.html":{}}}],["constructor(getproductsusecase",{"_index":668,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["constructor(productmodel",{"_index":662,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["constructor(productsrepository",{"_index":436,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["constructor(usermodel",{"_index":789,"title":{},"body":{"injectables/UserRepository.html":{}}}],["context",{"_index":944,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["context.switchtohttp().getrequest",{"_index":946,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["contract",{"_index":1040,"title":{},"body":{"license.html":{}}}],["controller",{"_index":63,"title":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["controller('/auth",{"_index":128,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["controller('/products",{"_index":649,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["controller('/user",{"_index":759,"title":{},"body":{"controllers/UserControllers.html":{}}}],["controllers",{"_index":65,"title":{},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":330,"title":{},"body":{"interfaces/Env.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cookieoptions",{"_index":315,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":989,"title":{},"body":{"license.html":{}}}],["copy",{"_index":971,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":960,"title":{},"body":{"license.html":{}}}],["core/auth/auth.module.js",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["core/products/products.entity.js",{"_index":567,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["core/products/products.module.js",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["core/user/user.entity.js",{"_index":698,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["core/user/user.module.js",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["cors",{"_index":314,"title":{},"body":{"interfaces/Env.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":313,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":814,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":494,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["create(userattributes",{"_index":498,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["created",{"_index":370,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":704,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["createfavorite",{"_index":375,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["createfavorite(userid",{"_index":383,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["creative",{"_index":954,"title":{},"body":{"license.html":{}}}],["credentials",{"_index":329,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["credit",{"_index":994,"title":{},"body":{"license.html":{}}}],["cron",{"_index":699,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["cron('0",{"_index":696,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["ctx",{"_index":475,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":477,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["custom",{"_index":226,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["custom.status",{"_index":463,"title":{},"body":{"classes/HandleError.html":{}}}],["damages",{"_index":1036,"title":{},"body":{"license.html":{}}}],["data",{"_index":188,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["data/database.db",{"_index":1072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data?.favoriteproducts",{"_index":410,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["database.providers.js",{"_index":286,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module.js",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{}}}],["database/seed/populateproducts.service.js",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":15,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":285,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datatype",{"_index":418,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["datatype.bigint",{"_index":426,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["datatype.boolean",{"_index":731,"title":{},"body":{"classes/User.html":{}}}],["datatype.decimal",{"_index":640,"title":{},"body":{"classes/Products.html":{}}}],["datatype.string",{"_index":639,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["datatype.string(100",{"_index":730,"title":{},"body":{"classes/User.html":{}}}],["datatype.string(50",{"_index":729,"title":{},"body":{"classes/User.html":{}}}],["date(date.now",{"_index":701,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["db\\n",{"_index":599,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["deal",{"_index":975,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1045,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":81,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/ChangePasswdBody.html":{},"classes/Favorites.html":{},"classes/LoginBody.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"classes/RegisterBody.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/ToggleFavoriteBody.html":{},"classes/User.html":{},"controllers/UserControllers.html":{}}}],["default",{"_index":254,"title":{},"body":{"injectables/CommonServices.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":725,"title":{},"body":{"classes/User.html":{}}}],["defined",{"_index":84,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["delete",{"_index":328,"title":{},"body":{"interfaces/Env.html":{},"interfaces/IUserRepository.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["delete('/delete",{"_index":744,"title":{},"body":{"controllers/UserControllers.html":{}}}],["delete(target",{"_index":501,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["deleted",{"_index":371,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["deletefavorite",{"_index":376,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["deletefavorite(userid",{"_index":387,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["deleteuser",{"_index":735,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["deleteuser(@req",{"_index":766,"title":{},"body":{"controllers/UserControllers.html":{}}}],["deleteuser(req",{"_index":743,"title":{},"body":{"controllers/UserControllers.html":{}}}],["deleteuser(token",{"_index":800,"title":{},"body":{"classes/UserServices.html":{}}}],["deleteuserusecase",{"_index":287,"title":{"injectables/DeleteUserUseCase.html":{}},"body":{"injectables/DeleteUserUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["denied",{"_index":346,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":891,"title":{},"body":{"index.html":{},"properties.html":{}}}],["develop",{"_index":280,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"properties.html":{}}}],["development",{"_index":900,"title":{},"body":{"index.html":{}}}],["dialect",{"_index":1069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":985,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":815,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doing",{"_index":1017,"title":{},"body":{"license.html":{}}}],["dotenv",{"_index":860,"title":{},"body":{"dependencies.html":{}}}],["dto/changepasswdbody.dto.js",{"_index":754,"title":{},"body":{"controllers/UserControllers.html":{}}}],["dto/loginbody.dto.js",{"_index":120,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/LoginUseCase.html":{}}}],["dto/registerbody.dto.js",{"_index":112,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["dto/togglefavoritebody.dto.js",{"_index":757,"title":{},"body":{"controllers/UserControllers.html":{}}}],["e2e",{"_index":910,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":887,"title":{},"body":{"index.html":{}}}],["email",{"_index":101,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"classes/User.html":{},"classes/UserServices.html":{},"miscellaneous/variables.html":{}}}],["emailexists",{"_index":356,"title":{},"body":{"interfaces/Env.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"miscellaneous/variables.html":{}}}],["emailtoken",{"_index":185,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["emailverify",{"_index":72,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["emailverify(@param('token",{"_index":131,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["emailverify(emailtoken",{"_index":183,"title":{},"body":{"injectables/AuthServices.html":{}}}],["emailverify(token",{"_index":77,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["emailverifyusecase",{"_index":165,"title":{"injectables/EmailVerifyUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/EmailVerifyUseCase.html":{},"coverage.html":{},"overview.html":{}}}],["endorses",{"_index":1004,"title":{},"body":{"license.html":{}}}],["env",{"_index":303,"title":{"interfaces/Env.html":{}},"body":{"interfaces/Env.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":138,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"classes/HandleError.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RmUnverifiedUsers.html":{},"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["err.custom",{"_index":461,"title":{},"body":{"classes/HandleError.html":{}}}],["err.message",{"_index":457,"title":{},"body":{"classes/HandleError.html":{}}}],["error",{"_index":343,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"miscellaneous/variables.html":{}}}],["etag",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["event",{"_index":1030,"title":{},"body":{"license.html":{}}}],["example",{"_index":896,"title":{},"body":{"index.html":{}}}],["exception",{"_index":473,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":480,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":478,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":469,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":519,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["execute",{"_index":213,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/ToggleFavoriteUseCase.html":{}}}],["execute(email",{"_index":217,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{}}}],["execute(id",{"_index":290,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetUserUseCase.html":{}}}],["execute(search",{"_index":439,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["execute(undefined",{"_index":538,"title":{},"body":{"injectables/LoginUseCase.html":{},"injectables/RegisterUseCase.html":{}}}],["execute(userid",{"_index":713,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["executioncontext",{"_index":942,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["exists",{"_index":358,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":547,"title":{},"body":{"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["export",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":121,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserControllers.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":425,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["extractjwtpayload",{"_index":243,"title":{},"body":{"injectables/CommonServices.html":{}}}],["extractjwtpayload(token",{"_index":246,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["faker",{"_index":568,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"dependencies.html":{}}}],["faker.commerce.productdescription().slice(0",{"_index":581,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["faker.commerce.productname().slice(0",{"_index":579,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["false",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/Favorites.html":{},"classes/Products.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["favorite",{"_index":715,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{}}}],["favorite.entity.js",{"_index":394,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["favoritemodel",{"_index":382,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["favoriteproducts",{"_index":409,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"classes/User.html":{}}}],["favoriteproviders",{"_index":787,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["favoriterepository",{"_index":373,"title":{"injectables/FavoriteRepository.html":{}},"body":{"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["favorites",{"_index":393,"title":{"classes/Favorites.html":{}},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"classes/Products.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["favorites/favorite.entity.js",{"_index":727,"title":{},"body":{"classes/User.html":{}}}],["favorites/favorite.repository.js",{"_index":432,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{},"injectables/ToggleFavoriteUseCase.html":{},"modules/UserModule.html":{}}}],["field",{"_index":509,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["field[fieldkey",{"_index":521,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["fieldkey",{"_index":516,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["fieldname",{"_index":234,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["fieldvalue",{"_index":235,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["file",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"guards/isLoggedIn.html":{}}}],["files",{"_index":974,"title":{},"body":{"license.html":{}}}],["filteredproducts",{"_index":651,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["findattributeoptions",{"_index":514,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["findbyfield",{"_index":495,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["findbyfield(field",{"_index":504,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["fitness",{"_index":1026,"title":{},"body":{"license.html":{}}}],["following",{"_index":990,"title":{},"body":{"license.html":{}}}],["foreignkey",{"_index":419,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["foreignkey(undefined)@column({type",{"_index":412,"title":{},"body":{"classes/Favorites.html":{}}}],["found",{"_index":369,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":885,"title":{},"body":{"index.html":{}}}],["free",{"_index":967,"title":{},"body":{"license.html":{}}}],["function",{"_index":834,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":879,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateproducts",{"_index":561,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["get('/email",{"_index":82,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["get('/get",{"_index":747,"title":{},"body":{"controllers/UserControllers.html":{}}}],["get('/passwd",{"_index":98,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["get('/token",{"_index":109,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["getallproducts",{"_index":602,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbycategory",{"_index":603,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbycategory(category",{"_index":606,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbygenericsearch",{"_index":604,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbygenericsearch(search",{"_index":608,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getfavorites",{"_index":377,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["getfavorites(@req",{"_index":772,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getfavorites(id",{"_index":389,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["getfavorites(req",{"_index":746,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getfavorites(token",{"_index":802,"title":{},"body":{"classes/UserServices.html":{}}}],["getfavoritesusecase",{"_index":427,"title":{"injectables/GetFavoritesUseCase.html":{}},"body":{"injectables/GetFavoritesUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["getonefavorite",{"_index":378,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["getonefavorite(userid",{"_index":391,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["getproducts",{"_index":643,"title":{},"body":{"controllers/ProductsControllers.html":{},"injectables/ProductsServices.html":{}}}],["getproducts(@query",{"_index":650,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["getproducts(query",{"_index":644,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["getproducts(search",{"_index":670,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["getproductsusecase",{"_index":434,"title":{"injectables/GetProductsUseCase.html":{}},"body":{"injectables/GetProductsUseCase.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsServices.html":{},"coverage.html":{},"overview.html":{}}}],["getting",{"_index":881,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuser",{"_index":736,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["getuser(@req",{"_index":760,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getuser(req",{"_index":749,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getuser(token",{"_index":804,"title":{},"body":{"classes/UserServices.html":{}}}],["getuserusecase",{"_index":447,"title":{"injectables/GetUserUseCase.html":{}},"body":{"injectables/GetUserUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["give",{"_index":992,"title":{},"body":{"license.html":{}}}],["granted",{"_index":966,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1049,"title":{},"body":{"modules.html":{}}}],["great",{"_index":339,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":917,"title":{},"body":{"index.html":{}}}],["guard",{"_index":832,"title":{"guards/isLoggedIn.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/isloggedin.guard.js",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["guards",{"_index":938,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["handlecron",{"_index":695,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["handleerror",{"_index":113,"title":{"classes/HandleError.html":{}},"body":{"controllers/AuthControllers.html":{},"classes/HandleError.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["handleerror.http(err",{"_index":139,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["hashednewpasswd",{"_index":231,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["hashedpasswd",{"_index":687,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["here",{"_index":927,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":965,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1033,"title":{},"body":{"license.html":{}}}],["host",{"_index":257,"title":{},"body":{"injectables/CommonServices.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/SendEmailProps.html":{}}}],["host.switchtohttp",{"_index":476,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":283,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["http",{"_index":452,"title":{},"body":{"classes/HandleError.html":{},"dependencies.html":{}}}],["http(err",{"_index":453,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexception",{"_index":456,"title":{},"body":{"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"guards/isLoggedIn.html":{}}}],["httpexception('a",{"_index":465,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexception('forbidden",{"_index":949,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["httpexception('unauthorized",{"_index":952,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["httpexception(custom.msg",{"_index":462,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexception(err.message",{"_index":459,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexceptionfilter",{"_index":467,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":331,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":934,"title":{},"body":{"index.html":{}}}],["id",{"_index":293,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"classes/Products.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{}}}],["identifier",{"_index":816,"title":{},"body":{"coverage.html":{}}}],["ifavoritesrepository",{"_index":398,"title":{"interfaces/IFavoritesRepository.html":{}},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"coverage.html":{}}}],["img",{"_index":571,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["implements",{"_index":399,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"guards/isLoggedIn.html":{}}}],["implied",{"_index":1022,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":407,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["including",{"_index":978,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":354,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":69,"title":{"index.html":{}},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"miscellaneous/functions.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":996,"title":{},"body":{"license.html":{}}}],["info",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["inject",{"_index":115,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["inject('favorites",{"_index":400,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["inject('products",{"_index":612,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["inject('user",{"_index":402,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["injectable",{"_index":177,"title":{"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/UserRepository.html":{}},"body":{"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"guards/isLoggedIn.html":{}}}],["injectables",{"_index":178,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/UserRepository.html":{},"overview.html":{}}}],["installation",{"_index":895,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":898,"title":{},"body":{"index.html":{}}}],["interface",{"_index":271,"title":{"interfaces/Env.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{}},"body":{"injectables/CommonServices.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["interfaces",{"_index":304,"title":{},"body":{"interfaces/Env.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"overview.html":{}}}],["international",{"_index":959,"title":{},"body":{"license.html":{}}}],["invalid",{"_index":349,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["invalidtoken",{"_index":348,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":533,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["isloggedin",{"_index":44,"title":{"guards/isLoggedIn.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{},"coverage.html":{},"guards/isLoggedIn.html":{}}}],["isnotempty",{"_index":207,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{}}}],["ispopulated",{"_index":592,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["iuserrepository",{"_index":492,"title":{"interfaces/IUserRepository.html":{}},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["jobs/rmunverifiedusers.service.js",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":924,"title":{},"body":{"index.html":{}}}],["js/faker",{"_index":569,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"dependencies.html":{}}}],["json.parse(raw)['message",{"_index":484,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jsonwebtoken",{"_index":269,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["jwt",{"_index":267,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"guards/isLoggedIn.html":{}}}],["jwt.sign",{"_index":545,"title":{},"body":{"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["jwt.verify",{"_index":276,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["jwt.verify(token",{"_index":951,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["jwtpayload",{"_index":268,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["kamil",{"_index":931,"title":{},"body":{"index.html":{}}}],["kind",{"_index":1021,"title":{},"body":{"license.html":{}}}],["later",{"_index":345,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"miscellaneous/variables.html":{}}}],["legal",{"_index":1011,"title":{},"body":{"license.html":{}}}],["legally",{"_index":1015,"title":{},"body":{"license.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":208,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/RegisterBody.html":{}}}],["length(0",{"_index":534,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["length(3",{"_index":680,"title":{},"body":{"classes/RegisterBody.html":{}}}],["length(6",{"_index":210,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["liability",{"_index":1037,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1034,"title":{},"body":{"license.html":{}}}],["license",{"_index":937,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":914,"title":{},"body":{"index.html":{}}}],["licensor",{"_index":1003,"title":{},"body":{"license.html":{}}}],["limit",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":979,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1023,"title":{},"body":{"license.html":{}}}],["link",{"_index":273,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"license.html":{}}}],["literal",{"_index":645,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["load",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":1073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":73,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["login(@body",{"_index":145,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["login(body",{"_index":92,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["login(data",{"_index":186,"title":{},"body":{"injectables/AuthServices.html":{}}}],["loginbody",{"_index":93,"title":{"classes/LoginBody.html":{}},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"coverage.html":{}}}],["loginusecase",{"_index":166,"title":{"injectables/LoginUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/LoginUseCase.html":{},"coverage.html":{},"overview.html":{}}}],["made",{"_index":998,"title":{},"body":{"license.html":{}}}],["manner",{"_index":1000,"title":{},"body":{"license.html":{}}}],["matching",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"guards/isLoggedIn.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1005,"title":{},"body":{"license.html":{}}}],["maxage",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["measures",{"_index":1014,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1025,"title":{},"body":{"license.html":{}}}],["merge",{"_index":983,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":70,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["miguel",{"_index":962,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":878,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":913,"title":{},"body":{"index.html":{}}}],["mode",{"_index":903,"title":{},"body":{"index.html":{}}}],["model",{"_index":408,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["modify",{"_index":982,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":926,"title":{},"body":{"index.html":{}}}],["msg",{"_index":143,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"controllers/UserControllers.html":{}}}],["msg[0",{"_index":487,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["myśliwiec",{"_index":932,"title":{},"body":{"index.html":{}}}],["name",{"_index":87,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["nc",{"_index":1061,"title":{},"body":{"properties.html":{}}}],["nest",{"_index":892,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":936,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["nestjs/config",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["nestjs/core",{"_index":840,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":841,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":843,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/RmUnverifiedUsers.html":{},"dependencies.html":{}}}],["nestjs/sequelize",{"_index":845,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":126,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"controllers/ProductsControllers.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"controllers/UserControllers.html":{},"dependencies.html":{}}}],["new",{"_index":458,"title":{},"body":{"classes/HandleError.html":{},"injectables/RmUnverifiedUsers.html":{},"coverage.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["newpasswd",{"_index":218,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"classes/UserServices.html":{}}}],["node.js",{"_index":884,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":308,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["nodemailer",{"_index":270,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":256,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["noemailtoken",{"_index":359,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["noncommercial",{"_index":957,"title":{},"body":{"license.html":{}}}],["none",{"_index":337,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":1029,"title":{},"body":{"license.html":{}}}],["notfound",{"_index":368,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["noverifiedemail",{"_index":361,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":897,"title":{},"body":{"index.html":{}}}],["number",{"_index":291,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{}}}],["number(process.env.auth_duration_days",{"_index":322,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.port",{"_index":317,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["object.keys(field)[0",{"_index":517,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["observable",{"_index":945,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["obtaining",{"_index":970,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":342,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"miscellaneous/variables.html":{}}}],["ok",{"_index":351,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["oldprice",{"_index":572,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["op",{"_index":610,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/RmUnverifiedUsers.html":{}}}],["op.like",{"_index":618,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["op.lt",{"_index":705,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["op.or",{"_index":615,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["open",{"_index":915,"title":{},"body":{"index.html":{}}}],["optional",{"_index":89,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["origin",{"_index":324,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["origin_addr",{"_index":309,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["others",{"_index":1016,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1042,"title":{},"body":{"license.html":{}}}],["out",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1051,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":836,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":116,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["param('token",{"_index":158,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["paramdate",{"_index":700,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["parameters",{"_index":86,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["parser",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":1027,"title":{},"body":{"license.html":{}}}],["pass",{"_index":264,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["passwd",{"_index":202,"title":{},"body":{"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{}}}],["passwdrecovery",{"_index":74,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["passwdrecovery(@param('email",{"_index":153,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["passwdrecovery(email",{"_index":97,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["passwdrecoveryusecase",{"_index":167,"title":{"injectables/PasswdRecoveryUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"coverage.html":{},"overview.html":{}}}],["password",{"_index":355,"title":{},"body":{"interfaces/Env.html":{},"injectables/PasswdRecoveryUseCase.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":327,"title":{},"body":{"interfaces/Env.html":{},"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["patch('/change",{"_index":741,"title":{},"body":{"controllers/UserControllers.html":{}}}],["payload",{"_index":275,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["payload[payloadname",{"_index":278,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["payloadname",{"_index":247,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["permission",{"_index":964,"title":{},"body":{"license.html":{}}}],["permits",{"_index":1019,"title":{},"body":{"license.html":{}}}],["person",{"_index":969,"title":{},"body":{"license.html":{}}}],["please",{"_index":344,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["popular",{"_index":585,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["populate",{"_index":598,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["populateproductsservice",{"_index":18,"title":{"injectables/PopulateProductsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"coverage.html":{},"overview.html":{}}}],["port",{"_index":259,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/Env.html":{},"interfaces/SendEmailProps.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":117,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["post('/login",{"_index":94,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["post('/register",{"_index":105,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["post('/toggle",{"_index":752,"title":{},"body":{"controllers/UserControllers.html":{}}}],["prefix",{"_index":67,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["price",{"_index":573,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["primarykey",{"_index":414,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["private",{"_index":130,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["process.env.api_addr",{"_index":319,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":316,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.origin_addr",{"_index":318,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":323,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.smtp_pass",{"_index":321,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.smtp_user",{"_index":320,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["product",{"_index":595,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["productel",{"_index":565,"title":{"interfaces/ProductEl.html":{}},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"coverage.html":{}}}],["productid",{"_index":384,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"classes/Products.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["production",{"_index":905,"title":{},"body":{"index.html":{}}}],["productmodel",{"_index":613,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["productname",{"_index":570,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["productrepositoryinterface",{"_index":600,"title":{"interfaces/ProductRepositoryInterface.html":{}},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"coverage.html":{}}}],["products",{"_index":396,"title":{"classes/Products.html":{}},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["products.controller.js",{"_index":659,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.create",{"_index":596,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["products.entity.js",{"_index":611,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["products.findall()).length",{"_index":593,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["products.providers.js",{"_index":661,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.repository.js",{"_index":443,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"modules/ProductsModule.html":{}}}],["products.service.js",{"_index":658,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products/products.entity.js",{"_index":397,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"classes/User.html":{}}}],["productscontrollers",{"_index":641,"title":{"controllers/ProductsControllers.html":{}},"body":{"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":16,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsproviders",{"_index":660,"title":{},"body":{"modules/ProductsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productsrepository",{"_index":437,"title":{"injectables/ProductsRepository.html":{}},"body":{"injectables/GetProductsUseCase.html":{},"interfaces/ProductRepositoryInterface.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"coverage.html":{},"overview.html":{}}}],["productsservices",{"_index":656,"title":{"injectables/ProductsServices.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsServices.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":883,"title":{},"body":{"index.html":{}}}],["project",{"_index":916,"title":{},"body":{"index.html":{}}}],["promise",{"_index":253,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"guards/isLoggedIn.html":{}}}],["properties",{"_index":201,"title":{"properties.html":{}},"body":{"classes/ChangePasswdBody.html":{},"injectables/CommonServices.html":{},"interfaces/Env.html":{},"classes/Favorites.html":{},"classes/LoginBody.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{},"classes/RegisterBody.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":995,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":360,"title":{},"body":{"interfaces/Env.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/favorite.providers.js",{"_index":788,"title":{},"body":{"modules/UserModule.html":{}}}],["providers/user.providers.js",{"_index":786,"title":{},"body":{"modules/UserModule.html":{}}}],["public",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["publish",{"_index":984,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1028,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1007,"title":{},"body":{"license.html":{}}}],["query",{"_index":118,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{}}}],["query('setcookie",{"_index":159,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["rate",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":479,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["raw.includes",{"_index":482,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["raw['message",{"_index":485,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["rawisstring",{"_index":481,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["read",{"_index":925,"title":{},"body":{"index.html":{}}}],["reasonable",{"_index":999,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":578,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["record",{"_index":505,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["recovery",{"_index":364,"title":{},"body":{"interfaces/Env.html":{},"injectables/PasswdRecoveryUseCase.html":{},"miscellaneous/variables.html":{}}}],["recovery/:email",{"_index":99,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["recoveryemail",{"_index":363,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["recoverylink",{"_index":556,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["recoverytoken",{"_index":554,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["redirect(`${this.configservice.get('env.origin_addr')}/login",{"_index":136,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["reflect",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":75,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["register(@body",{"_index":140,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["register(body",{"_index":103,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["register(data",{"_index":190,"title":{},"body":{"injectables/AuthServices.html":{}}}],["registerbody",{"_index":104,"title":{"classes/RegisterBody.html":{}},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"interfaces/IUserRepository.html":{},"classes/RegisterBody.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["registerusecase",{"_index":168,"title":{"injectables/RegisterUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"coverage.html":{},"overview.html":{}}}],["registerusercaseprops",{"_index":683,"title":{"interfaces/RegisterUserCaseProps.html":{}},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"coverage.html":{}}}],["repository",{"_index":894,"title":{},"body":{"index.html":{}}}],["req",{"_index":739,"title":{},"body":{"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{}}}],["req.cookies",{"_index":761,"title":{},"body":{"controllers/UserControllers.html":{}}}],["req.cookies?.token",{"_index":948,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["req.params?.token",{"_index":947,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["request",{"_index":740,"title":{},"body":{"controllers/UserControllers.html":{},"dependencies.html":{}}}],["res",{"_index":79,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserControllers.html":{}}}],["res.clearcookie('token",{"_index":768,"title":{},"body":{"controllers/UserControllers.html":{}}}],["res.cookie('token",{"_index":149,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["res.sendstatus(200",{"_index":160,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["res.status(200).json",{"_index":151,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["res.status(status).json",{"_index":483,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["reset",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":80,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserControllers.html":{}}}],["restrict",{"_index":506,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"license.html":{}}}],["restriction",{"_index":977,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":1009,"title":{},"body":{"license.html":{}}}],["results",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"guards/isLoggedIn.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":142,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/CommonServices.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"interfaces/SendEmailProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":91,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["rights",{"_index":980,"title":{},"body":{"license.html":{}}}],["rmunverifiedusers",{"_index":19,"title":{"injectables/RmUnverifiedUsers.html":{}},"body":{"modules/AppModule.html":{},"injectables/RmUnverifiedUsers.html":{},"coverage.html":{},"overview.html":{}}}],["rootpath",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":562,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"index.html":{}}}],["rxjs",{"_index":872,"title":{},"body":{"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["salt",{"_index":229,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["samesite",{"_index":336,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["save",{"_index":496,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["save(user",{"_index":510,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["scalable",{"_index":888,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["search",{"_index":442,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{}}}],["search.tolowercase",{"_index":619,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["secret",{"_index":310,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":261,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/Env.html":{},"interfaces/SendEmailProps.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":988,"title":{},"body":{"license.html":{}}}],["semantics",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["send",{"_index":366,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["sendemailprops",{"_index":251,"title":{"interfaces/SendEmailProps.html":{}},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"coverage.html":{}}}],["sendlink",{"_index":244,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["sendlink(undefined",{"_index":250,"title":{},"body":{"injectables/CommonServices.html":{}}}],["sequelize",{"_index":421,"title":{},"body":{"classes/Favorites.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"injectables/ProductsRepository.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sequelize.addmodels([user",{"_index":1074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize.col('info",{"_index":620,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["sequelize.col('productname",{"_index":617,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["sequelize.sync",{"_index":1075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize.where(sequelize.fn('lower",{"_index":616,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["server",{"_index":341,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servermsg",{"_index":338,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["serveroot",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticoptions",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["setcookie",{"_index":108,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["shall",{"_index":1031,"title":{},"body":{"license.html":{}}}],["side",{"_index":889,"title":{},"body":{"index.html":{}}}],["smtp.gmail.com",{"_index":258,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["smtp_pass",{"_index":311,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["smtp_user",{"_index":312,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":972,"title":{},"body":{"license.html":{}}}],["source",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"index.html":{},"guards/isLoggedIn.html":{}}}],["sponsors",{"_index":919,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["src/.../configuration.ts",{"_index":1063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":1064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../favorite.providers.ts",{"_index":1065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":880,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../products.providers.ts",{"_index":1066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.providers.ts",{"_index":1067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/configuration.ts",{"_index":305,"title":{},"body":{"interfaces/Env.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/auth/auth.controller.ts",{"_index":66,"title":{},"body":{"controllers/AuthControllers.html":{},"coverage.html":{}}}],["src/core/auth/auth.controller.ts:32",{"_index":85,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:44",{"_index":106,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:54",{"_index":95,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:65",{"_index":100,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:76",{"_index":111,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/core/auth/auth.service.ts",{"_index":179,"title":{},"body":{"injectables/AuthServices.html":{},"coverage.html":{}}}],["src/core/auth/auth.service.ts:11",{"_index":182,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:25",{"_index":184,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:30",{"_index":191,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:34",{"_index":187,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:38",{"_index":189,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/dto/loginbody.dto.ts",{"_index":528,"title":{},"body":{"classes/LoginBody.html":{},"coverage.html":{}}}],["src/core/auth/dto/loginbody.dto.ts:14",{"_index":532,"title":{},"body":{"classes/LoginBody.html":{}}}],["src/core/auth/dto/loginbody.dto.ts:9",{"_index":531,"title":{},"body":{"classes/LoginBody.html":{}}}],["src/core/auth/dto/registerbody.dto.ts",{"_index":673,"title":{},"body":{"classes/RegisterBody.html":{},"coverage.html":{}}}],["src/core/auth/dto/registerbody.dto.ts:14",{"_index":675,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/core/auth/dto/registerbody.dto.ts:19",{"_index":676,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/core/auth/dto/registerbody.dto.ts:8",{"_index":679,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/core/auth/usecases/emailverify.usecase.ts",{"_index":295,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"coverage.html":{}}}],["src/core/auth/usecases/emailverify.usecase.ts:14",{"_index":297,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["src/core/auth/usecases/emailverify.usecase.ts:6",{"_index":296,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["src/core/auth/usecases/login.usecase.ts",{"_index":536,"title":{},"body":{"injectables/LoginUseCase.html":{},"coverage.html":{}}}],["src/core/auth/usecases/login.usecase.ts:17",{"_index":539,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["src/core/auth/usecases/login.usecase.ts:9",{"_index":537,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["src/core/auth/usecases/passwdrecovery.usecase.ts",{"_index":550,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{},"coverage.html":{}}}],["src/core/auth/usecases/passwdrecovery.usecase.ts:18",{"_index":552,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["src/core/auth/usecases/passwdrecovery.usecase.ts:8",{"_index":551,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["src/core/auth/usecases/register.usecase.ts",{"_index":681,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"coverage.html":{}}}],["src/core/auth/usecases/register.usecase.ts:15",{"_index":682,"title":{},"body":{"injectables/RegisterUseCase.html":{}}}],["src/core/auth/usecases/register.usecase.ts:25",{"_index":684,"title":{},"body":{"injectables/RegisterUseCase.html":{}}}],["src/core/common/common.module.ts",{"_index":239,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/core/common/common.service.ts",{"_index":241,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"coverage.html":{}}}],["src/core/common/common.service.ts:13",{"_index":245,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/common/common.service.ts:16",{"_index":248,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/common/common.service.ts:24",{"_index":266,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/common/common.service.ts:34",{"_index":252,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/products/products.controller.ts",{"_index":642,"title":{},"body":{"controllers/ProductsControllers.html":{},"coverage.html":{}}}],["src/core/products/products.controller.ts:15",{"_index":646,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["src/core/products/products.entity.ts",{"_index":621,"title":{},"body":{"classes/Products.html":{},"coverage.html":{}}}],["src/core/products/products.entity.ts:18",{"_index":627,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:24",{"_index":625,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:30",{"_index":632,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:36",{"_index":629,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:42",{"_index":628,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:48",{"_index":630,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:54",{"_index":631,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:62",{"_index":635,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.module.ts",{"_index":657,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/core/products/products.providers.ts",{"_index":826,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/products/products.repository.ts",{"_index":601,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"coverage.html":{}}}],["src/core/products/products.repository.ts:12",{"_index":663,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:18",{"_index":664,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:22",{"_index":665,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:26",{"_index":666,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:6",{"_index":605,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{}}}],["src/core/products/products.repository.ts:7",{"_index":607,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{}}}],["src/core/products/products.repository.ts:8",{"_index":609,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{}}}],["src/core/products/products.service.ts",{"_index":667,"title":{},"body":{"injectables/ProductsServices.html":{},"coverage.html":{}}}],["src/core/products/products.service.ts:11",{"_index":671,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["src/core/products/products.service.ts:5",{"_index":669,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["src/core/products/usecases/getproducts.usecase.ts",{"_index":435,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"coverage.html":{}}}],["src/core/products/usecases/getproducts.usecase.ts:5",{"_index":438,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["src/core/products/usecases/getproducts.usecase.ts:8",{"_index":441,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["src/core/user/dto/changepasswdbody.dto.ts",{"_index":200,"title":{},"body":{"classes/ChangePasswdBody.html":{},"coverage.html":{}}}],["src/core/user/dto/changepasswdbody.dto.ts:8",{"_index":205,"title":{},"body":{"classes/ChangePasswdBody.html":{}}}],["src/core/user/dto/togglefavoritebody.dto.ts",{"_index":707,"title":{},"body":{"classes/ToggleFavoriteBody.html":{},"coverage.html":{}}}],["src/core/user/dto/togglefavoritebody.dto.ts:7",{"_index":709,"title":{},"body":{"classes/ToggleFavoriteBody.html":{}}}],["src/core/user/favorites/favorite.entity.ts",{"_index":411,"title":{},"body":{"classes/Favorites.html":{},"coverage.html":{}}}],["src/core/user/favorites/favorite.entity.ts:15",{"_index":416,"title":{},"body":{"classes/Favorites.html":{}}}],["src/core/user/favorites/favorite.entity.ts:19",{"_index":415,"title":{},"body":{"classes/Favorites.html":{}}}],["src/core/user/favorites/favorite.repository.ts",{"_index":374,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"coverage.html":{}}}],["src/core/user/favorites/favorite.repository.ts:10",{"_index":490,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:14",{"_index":381,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:22",{"_index":392,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:28",{"_index":388,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:32",{"_index":385,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:36",{"_index":390,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:7",{"_index":491,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:8",{"_index":489,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:9",{"_index":488,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/providers/favorite.providers.ts",{"_index":827,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/user/providers/user.providers.ts",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/user/usecases/changepasswd.usecase.ts",{"_index":212,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/changepasswd.usecase.ts:15",{"_index":219,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["src/core/user/usecases/changepasswd.usecase.ts:7",{"_index":216,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["src/core/user/usecases/deleteuser.usecase.ts",{"_index":288,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/deleteuser.usecase.ts:14",{"_index":292,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["src/core/user/usecases/deleteuser.usecase.ts:6",{"_index":289,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["src/core/user/usecases/getfavorites.usecase.ts",{"_index":428,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/getfavorites.usecase.ts:5",{"_index":430,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{}}}],["src/core/user/usecases/getfavorites.usecase.ts:8",{"_index":431,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{}}}],["src/core/user/usecases/getuser.usecase.ts",{"_index":448,"title":{},"body":{"injectables/GetUserUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/getuser.usecase.ts:14",{"_index":450,"title":{},"body":{"injectables/GetUserUseCase.html":{}}}],["src/core/user/usecases/getuser.usecase.ts:6",{"_index":449,"title":{},"body":{"injectables/GetUserUseCase.html":{}}}],["src/core/user/usecases/togglefavorite.usecase.ts",{"_index":711,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/togglefavorite.usecase.ts:11",{"_index":714,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["src/core/user/usecases/togglefavorite.usecase.ts:5",{"_index":712,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["src/core/user/user.controller.ts",{"_index":733,"title":{},"body":{"controllers/UserControllers.html":{},"coverage.html":{}}}],["src/core/user/user.controller.ts:34",{"_index":750,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:45",{"_index":742,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:59",{"_index":745,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:73",{"_index":753,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:84",{"_index":748,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.entity.ts",{"_index":719,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/core/user/user.entity.ts:18",{"_index":722,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:24",{"_index":724,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:30",{"_index":720,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:37",{"_index":726,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:43",{"_index":723,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:52",{"_index":721,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.module.ts",{"_index":778,"title":{},"body":{"modules/UserModule.html":{}}}],["src/core/user/user.repository.ts",{"_index":493,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/core/user/user.repository.ts:13",{"_index":508,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:17",{"_index":502,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:18",{"_index":513,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:19",{"_index":511,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:20",{"_index":499,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:24",{"_index":790,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:30",{"_index":793,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:47",{"_index":792,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:55",{"_index":795,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:64",{"_index":794,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:68",{"_index":791,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.service.ts",{"_index":796,"title":{},"body":{"classes/UserServices.html":{},"coverage.html":{}}}],["src/core/user/user.service.ts:25",{"_index":805,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:30",{"_index":799,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:35",{"_index":801,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:40",{"_index":807,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:45",{"_index":803,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:9",{"_index":797,"title":{},"body":{"classes/UserServices.html":{}}}],["src/database/database.module.ts",{"_index":284,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":830,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/seed/populateproducts.service.ts",{"_index":560,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"coverage.html":{}}}],["src/database/seed/populateproducts.service.ts:17",{"_index":563,"title":{},"body":{"injectables/PopulateProductsService.html":{}}}],["src/database/seed/populateproducts.service.ts:23",{"_index":564,"title":{},"body":{"injectables/PopulateProductsService.html":{}}}],["src/database/seed/populateproducts.service.ts:52",{"_index":566,"title":{},"body":{"injectables/PopulateProductsService.html":{}}}],["src/filters/httpexception.filter.ts",{"_index":468,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/filters/httpexception.filter.ts:11",{"_index":472,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/guard/isloggedin.guard.ts",{"_index":831,"title":{},"body":{"coverage.html":{},"guards/isLoggedIn.html":{}}}],["src/guard/isloggedin.guard.ts:13",{"_index":940,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["src/guard/isloggedin.guard.ts:19",{"_index":943,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["src/jobs/rmunverifiedusers.service.ts",{"_index":694,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{},"coverage.html":{}}}],["src/jobs/rmunverifiedusers.service.ts:9",{"_index":697,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["src/main.ts",{"_index":833,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/handleerror.ts",{"_index":451,"title":{},"body":{"classes/HandleError.html":{},"coverage.html":{}}}],["src/utils/handleerror.ts:4",{"_index":454,"title":{},"body":{"classes/HandleError.html":{}}}],["start",{"_index":901,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":904,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":906,"title":{},"body":{"index.html":{}}}],["started",{"_index":882,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":893,"title":{},"body":{"index.html":{}}}],["statements",{"_index":817,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/HandleError.html":{},"dependencies.html":{}}}],["status",{"_index":227,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["status(200",{"_index":135,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["stay",{"_index":928,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":281,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"properties.html":{}}}],["string",{"_index":78,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/GetProductsUseCase.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{}}}],["subject",{"_index":272,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"license.html":{}}}],["sublicense",{"_index":986,"title":{},"body":{"license.html":{}}}],["successful",{"_index":353,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":365,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["suggests",{"_index":1002,"title":{},"body":{"license.html":{}}}],["support",{"_index":920,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1047,"title":{},"body":{"modules.html":{}}}],["table",{"_index":420,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{},"coverage.html":{}}}],["tablename",{"_index":423,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":835,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":503,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["target.destroy",{"_index":523,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["technological",{"_index":1013,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1012,"title":{},"body":{"license.html":{}}}],["test",{"_index":909,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":912,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":911,"title":{},"body":{"index.html":{}}}],["tests",{"_index":908,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":918,"title":{},"body":{"index.html":{}}}],["this.authservices.emailverify(token",{"_index":134,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.authservices.login(body",{"_index":148,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.authservices.passwdrecovery(email",{"_index":154,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.authservices.register(body",{"_index":141,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.changepasswdusecase.execute(email",{"_index":810,"title":{},"body":{"classes/UserServices.html":{}}}],["this.commonservices.extractjwtpayload(emailtoken",{"_index":193,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.commonservices.extractjwtpayload(token",{"_index":808,"title":{},"body":{"classes/UserServices.html":{}}}],["this.commonservices.sendlink",{"_index":559,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.configservice.get('authmsg.emailexists",{"_index":685,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.configservice.get('authmsg.incorrect",{"_index":544,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["this.configservice.get('authmsg.noverifiedemail",{"_index":540,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["this.configservice.get('authmsg.ok",{"_index":152,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('authmsg.recoveryemail",{"_index":155,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('cookie",{"_index":150,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('env.api_addr')}/auth/email",{"_index":691,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.configservice.get('env.api_addr')}/public/product.webp",{"_index":582,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["this.configservice.get('env.auth_duration_days",{"_index":548,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["this.configservice.get('env.origin_addr')}/passwd",{"_index":557,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["this.configservice.get('env.secret",{"_index":277,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"guards/isLoggedIn.html":{}}}],["this.configservice.get('env.smtp_pass",{"_index":265,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["this.configservice.get('env.smtp_user",{"_index":263,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["this.configservice.get('servermsg.invalidtoken",{"_index":299,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["this.configservice.get('usermsg.created",{"_index":144,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('usermsg.deleted",{"_index":769,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.configservice.get('usermsg.notfound",{"_index":224,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{}}}],["this.configservice.get('usermsg.updated",{"_index":765,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.deleteuserusecase.execute(id",{"_index":811,"title":{},"body":{"classes/UserServices.html":{}}}],["this.emailverifyusecase.execute(email",{"_index":194,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.env.api_addr",{"_index":326,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["this.env.auth_duration_days",{"_index":332,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["this.env.origin_addr",{"_index":325,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["this.favoritemodel.create",{"_index":405,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["this.favoritemodel.destroy",{"_index":404,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["this.favoritemodel.findone",{"_index":403,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["this.favoriterepository.createfavorite(userid",{"_index":718,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["this.favoriterepository.deletefavorite(userid",{"_index":717,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["this.favoriterepository.getfavorites(id",{"_index":433,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{}}}],["this.favoriterepository.getonefavorite",{"_index":716,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["this.generateproducts",{"_index":575,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["this.getfavoritesusecase.execute(id",{"_index":813,"title":{},"body":{"classes/UserServices.html":{}}}],["this.getproductsusecase.execute",{"_index":652,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["this.getproductsusecase.execute(search",{"_index":672,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["this.getuserusecase.execute(id",{"_index":809,"title":{},"body":{"classes/UserServices.html":{}}}],["this.loginusecase.execute(data",{"_index":196,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.passwdrecoveryusecase.execute(email",{"_index":197,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.productmodel.findall",{"_index":614,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["this.products",{"_index":574,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["this.productsrepository.getallproducts",{"_index":446,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["this.productsrepository.getbycategory(category",{"_index":444,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["this.productsrepository.getbygenericsearch(search",{"_index":445,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["this.registerusecase.execute(data",{"_index":195,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.save(user",{"_index":525,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.togglefavoriteusecase.execute(userid",{"_index":812,"title":{},"body":{"classes/UserServices.html":{}}}],["this.transporter.sendmail",{"_index":279,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["this.usermodel.create(userattributes",{"_index":527,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.usermodel.destroy",{"_index":522,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.usermodel.findone",{"_index":406,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.userrepository.create",{"_index":689,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.userrepository.delete(user",{"_index":294,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["this.userrepository.findbyfield",{"_index":223,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.userrepository.save(user",{"_index":302,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["this.userrepository.updatefield",{"_index":233,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["this.userservices.changepasswd(token",{"_index":764,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.deleteuser(token",{"_index":767,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.getfavorites(token",{"_index":773,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.getuser(token",{"_index":762,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.togglefavorite(token",{"_index":771,"title":{},"body":{"controllers/UserControllers.html":{}}}],["through",{"_index":634,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["throw",{"_index":225,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"guards/isLoggedIn.html":{}}}],["timestamps",{"_index":424,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{}}}],["togglefavorite",{"_index":737,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["togglefavorite(@body",{"_index":770,"title":{},"body":{"controllers/UserControllers.html":{}}}],["togglefavorite(body",{"_index":751,"title":{},"body":{"controllers/UserControllers.html":{}}}],["togglefavorite(token",{"_index":806,"title":{},"body":{"classes/UserServices.html":{}}}],["togglefavoritebody",{"_index":706,"title":{"classes/ToggleFavoriteBody.html":{}},"body":{"classes/ToggleFavoriteBody.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["togglefavoriteusecase",{"_index":710,"title":{"injectables/ToggleFavoriteUseCase.html":{}},"body":{"injectables/ToggleFavoriteUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["token",{"_index":90,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/CommonServices.html":{},"interfaces/Env.html":{},"injectables/LoginUseCase.html":{},"interfaces/SendEmailProps.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["tokenvalidator",{"_index":76,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["tokenvalidator(token",{"_index":107,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["tort",{"_index":1041,"title":{},"body":{"license.html":{}}}],["touch",{"_index":929,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["transporter",{"_index":242,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["true",{"_index":262,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"classes/Favorites.html":{},"injectables/GetUserUseCase.html":{},"classes/Products.html":{},"interfaces/SendEmailProps.html":{},"classes/User.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":132,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"classes/HandleError.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RmUnverifiedUsers.html":{},"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":935,"title":{},"body":{"index.html":{}}}],["type",{"_index":88,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":401,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["types",{"_index":842,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":422,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/User.html":{},"dependencies.html":{},"index.html":{}}}],["uname",{"_index":674,"title":{},"body":{"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"classes/User.html":{}}}],["undefined",{"_index":413,"title":{},"body":{"classes/Favorites.html":{},"interfaces/IUserRepository.html":{},"classes/Products.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["unit",{"_index":907,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":102,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsServices.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["updated",{"_index":372,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["updatedat",{"_index":728,"title":{},"body":{"classes/User.html":{}}}],["updatefield",{"_index":497,"title":{"interfaces/UpdateField.html":{}},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["updatefield(undefined",{"_index":512,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["use",{"_index":981,"title":{},"body":{"license.html":{}}}],["usecases/changepasswd.usecase.js",{"_index":784,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/deleteuser.usecase.js",{"_index":781,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/emailverify.usecase.js",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/getfavorites.usecase.js",{"_index":783,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/getproducts.usecase.js",{"_index":647,"title":{},"body":{"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsServices.html":{}}}],["usecases/getuser.usecase.js",{"_index":780,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/login.usecase.js",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/passwdrecovery.usecase.js",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/register.usecase.js",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/togglefavorite.usecase.js",{"_index":782,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usefactory",{"_index":1068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":119,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["useguards(isloggedin",{"_index":157,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["user",{"_index":222,"title":{"classes/User.html":{}},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"classes/Products.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.controller.js",{"_index":779,"title":{},"body":{"modules/UserModule.html":{}}}],["user.destroy",{"_index":703,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["user.entity.js",{"_index":395,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["user.id",{"_index":546,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["user.passwd",{"_index":543,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["user.repository.js",{"_index":220,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/GetUserUseCase.html":{},"modules/UserModule.html":{}}}],["user.save",{"_index":526,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["user.service.js",{"_index":756,"title":{},"body":{"controllers/UserControllers.html":{},"modules/UserModule.html":{}}}],["user.verified_email",{"_index":301,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"injectables/LoginUseCase.html":{}}}],["user/favorites/favorite.entity.js",{"_index":638,"title":{},"body":{"classes/Products.html":{}}}],["user/user.entity.js",{"_index":637,"title":{},"body":{"classes/Products.html":{}}}],["user/user.module.js",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.repository.js",{"_index":298,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["user[fieldname",{"_index":524,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["userattributes",{"_index":500,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["usercontrollers",{"_index":732,"title":{"controllers/UserControllers.html":{}},"body":{"controllers/UserControllers.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userexists",{"_index":553,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["userid",{"_index":386,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/User.html":{},"classes/UserServices.html":{}}}],["usermodel",{"_index":380,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["usermodule",{"_index":17,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usermsg",{"_index":367,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["userproviders",{"_index":785,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":215,"title":{"injectables/UserRepository.html":{}},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/UpdateField.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"overview.html":{}}}],["users",{"_index":622,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["userservices",{"_index":755,"title":{"classes/UserServices.html":{}},"body":{"controllers/UserControllers.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{}}}],["usevalue",{"_index":1076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/handleerror.js",{"_index":114,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["validator",{"_index":209,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"dependencies.html":{}}}],["validator/:token",{"_index":156,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["validator/:token')@useguards(isloggedin",{"_index":110,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["value",{"_index":255,"title":{},"body":{"injectables/CommonServices.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1062,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":693,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["verified",{"_index":362,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["verified_email",{"_index":520,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["verify/${emailtoken",{"_index":692,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["verify/:token",{"_index":83,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["verifylink",{"_index":690,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["version",{"_index":1057,"title":{},"body":{"properties.html":{}}}],["void",{"_index":455,"title":{},"body":{"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{}}}],["warranties",{"_index":1024,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1020,"title":{},"body":{"license.html":{}}}],["watch",{"_index":902,"title":{},"body":{"index.html":{}}}],["way",{"_index":1001,"title":{},"body":{"license.html":{}}}],["website",{"_index":933,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":340,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["whether",{"_index":1038,"title":{},"body":{"license.html":{}}}],["without",{"_index":976,"title":{},"body":{"license.html":{}}}],["yes",{"_index":249,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/GetProductsUseCase.html":{},"interfaces/IUserRepository.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsServices.html":{},"injectables/UserRepository.html":{}}}],["you'd",{"_index":923,"title":{},"body":{"index.html":{}}}],["zacca",{"_index":963,"title":{},"body":{"license.html":{},"properties.html":{}}}],["zoom",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPopulateProductsService \n\nPopulateProductsService \n\nPopulateProductsService  -->\n\nAppModule->PopulateProductsService \n\n\n\n\n\nPopulateProductsService\n\nPopulateProductsService\n\nAppModule -->\n\nPopulateProductsService->AppModule\n\n\n\n\n\nRmUnverifiedUsers\n\nRmUnverifiedUsers\n\nAppModule -->\n\nRmUnverifiedUsers->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PopulateProductsService\n                        \n                        \n                            RmUnverifiedUsers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PopulateProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ServeStaticModule } from '@nestjs/serve-static'\nimport { ConfigModule } from '@nestjs/config'\nimport { DatabaseModule } from './database/database.module.js'\nimport { ScheduleModule } from '@nestjs/schedule'\nimport { RmUnverifiedUsers } from './jobs/rmUnverifiedUsers.service.js'\nimport { UserModule } from './core/user/user.module.js'\nimport { AuthModule } from './core/auth/auth.module.js'\nimport { ProductsModule } from './core/products/products.module.js'\nimport { configuration } from './config/configuration.js'\nimport { isLoggedIn } from './guard/isLoggedIn.guard.js'\nimport { PopulateProductsService } from './database/seed/populateProducts.service.js'\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    ProductsModule,\n    DatabaseModule,\n    ScheduleModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: 'public',\n      serveRoot: '/public',\n      serveStaticOptions: {\n        maxAge: '1d',\n        etag: false,\n      },\n    }),\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n  providers: [RmUnverifiedUsers, isLoggedIn, PopulateProductsService],\n  exports: [PopulateProductsService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthControllers.html":{"url":"controllers/AuthControllers.html","title":"controller - AuthControllers","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthControllers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                emailVerify\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                passwdRecovery\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                tokenValidator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        emailVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailVerify(token: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/email-verify/:token')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: LoginBody, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        passwdRecovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwdRecovery(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/passwd-recovery/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(body: RegisterBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        tokenValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    tokenValidator(token: string, setCookie: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/token-validator/:token')@UseGuards(isLoggedIn)\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                setCookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { RegisterBody } from './dto/registerBody.dto.js'\nimport { HandleError } from '../../utils/handleError.js'\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Param,\n  Post,\n  Query,\n  Res,\n  UseGuards,\n} from '@nestjs/common'\nimport { LoginBody } from './dto/loginBody.dto.js'\nimport { Response } from 'express'\nimport { isLoggedIn } from '../../guard/isLoggedIn.guard.js'\nimport { AuthServices } from './auth.service.js'\nimport { ConfigService } from '@nestjs/config'\nimport { ApiTags } from '@nestjs/swagger'\n\n@ApiTags('auth')\n@Controller('/auth')\nexport class AuthControllers {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private authServices: AuthServices,\n  ) {}\n\n  @Get('/email-verify/:token')\n  async emailVerify(@Param('token') token: string, @Res() res: Response) {\n    try {\n      await this.authServices.emailVerify(token)\n      res\n        .status(200)\n        .redirect(`${this.configService.get('env.ORIGIN_ADDR')}/login`)\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/register')\n  async register(@Body() body: RegisterBody) {\n    try {\n      await this.authServices.register(body)\n      return { msg: this.configService.get('userMsg.created') }\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/login')\n  async login(@Body() body: LoginBody, @Res() res: Response) {\n    try {\n      const authToken = await this.authServices.login(body)\n      res.cookie('token', authToken, this.configService.get('cookie'))\n      res.status(200).json({ msg: this.configService.get('authMsg.ok') })\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/passwd-recovery/:email')\n  async passwdRecovery(@Param('email') email: string) {\n    try {\n      await this.authServices.passwdRecovery(email)\n      return { msg: this.configService.get('authMsg.recoveryEmail') }\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/token-validator/:token')\n  @UseGuards(isLoggedIn)\n  async tokenValidator(\n    @Param('token') token: string,\n    @Query('setCookie') setCookie: string,\n    @Res() res: Response,\n  ) {\n    if (setCookie) {\n      res.cookie('token', token, this.configService.get('cookie'))\n    }\n    res.sendStatus(200)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthServices\n\nAuthServices\n\nAuthModule -->\n\nAuthServices->AuthModule\n\n\n\n\n\nEmailVerifyUseCase\n\nEmailVerifyUseCase\n\nAuthModule -->\n\nEmailVerifyUseCase->AuthModule\n\n\n\n\n\nLoginUseCase\n\nLoginUseCase\n\nAuthModule -->\n\nLoginUseCase->AuthModule\n\n\n\n\n\nPasswdRecoveryUseCase\n\nPasswdRecoveryUseCase\n\nAuthModule -->\n\nPasswdRecoveryUseCase->AuthModule\n\n\n\n\n\nRegisterUseCase\n\nRegisterUseCase\n\nAuthModule -->\n\nRegisterUseCase->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthServices\n                        \n                        \n                            EmailVerifyUseCase\n                        \n                        \n                            LoginUseCase\n                        \n                        \n                            PasswdRecoveryUseCase\n                        \n                        \n                            RegisterUseCase\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthControllers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { AuthControllers } from './auth.controller.js'\nimport { AuthServices } from './auth.service.js'\nimport { EmailVerifyUseCase } from './usecases/emailVerify.usecase.js'\nimport { LoginUseCase } from './usecases/login.usecase.js'\nimport { PasswdRecoveryUseCase } from './usecases/passwdRecovery.usecase.js'\nimport { RegisterUseCase } from './usecases/register.usecase.js'\nimport { UserModule } from '../user/user.module.js'\nimport { CommonModule } from '../common/common.module.js'\nimport { ConfigModule } from '@nestjs/config'\n\n@Module({\n  imports: [UserModule, CommonModule, ConfigModule],\n  controllers: [AuthControllers],\n  providers: [\n    AuthServices,\n    EmailVerifyUseCase,\n    LoginUseCase,\n    PasswdRecoveryUseCase,\n    RegisterUseCase,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthServices.html":{"url":"injectables/AuthServices.html","title":"injectable - AuthServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                emailVerify\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                passwdRecovery\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonServices: CommonServices, emailVerifyUseCase: EmailVerifyUseCase, registerUseCase: RegisterUseCase, loginUseCase: LoginUseCase, passwdRecoveryUseCase: PasswdRecoveryUseCase)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailVerifyUseCase\n                                                  \n                                                        \n                                                                        EmailVerifyUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registerUseCase\n                                                  \n                                                        \n                                                                        RegisterUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginUseCase\n                                                  \n                                                        \n                                                                        LoginUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwdRecoveryUseCase\n                                                  \n                                                        \n                                                                        PasswdRecoveryUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emailVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailVerify(emailToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emailToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: LoginBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        passwdRecovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwdRecovery(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(data: RegisterBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CommonServices } from '../common/common.service.js'\nimport { LoginBody } from './dto/loginBody.dto.js'\nimport { RegisterBody } from './dto/registerBody.dto.js'\nimport { EmailVerifyUseCase } from './usecases/emailVerify.usecase.js'\nimport { LoginUseCase } from './usecases/login.usecase.js'\nimport { PasswdRecoveryUseCase } from './usecases/passwdRecovery.usecase.js'\nimport { RegisterUseCase } from './usecases/register.usecase.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class AuthServices {\n  constructor(\n    @Inject()\n    private commonServices: CommonServices,\n    @Inject()\n    private emailVerifyUseCase: EmailVerifyUseCase,\n    @Inject()\n    private registerUseCase: RegisterUseCase,\n    @Inject()\n    private loginUseCase: LoginUseCase,\n    @Inject()\n    private passwdRecoveryUseCase: PasswdRecoveryUseCase,\n  ) {}\n\n  async emailVerify(emailToken: string) {\n    const email = this.commonServices.extractJwtPayload(emailToken, 'email')\n    return this.emailVerifyUseCase.execute(email)\n  }\n\n  async register(data: RegisterBody) {\n    return this.registerUseCase.execute(data)\n  }\n\n  async login(data: LoginBody) {\n    return this.loginUseCase.execute(data)\n  }\n\n  async passwdRecovery(email: string) {\n    return this.passwdRecoveryUseCase.execute(email)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswdBody.html":{"url":"classes/ChangePasswdBody.html","title":"class - ChangePasswdBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswdBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/dto/changePasswdBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                passwd\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(6, 16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/dto/changePasswdBody.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty, Length } from 'class-validator'\n\nexport class ChangePasswdBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(6, 16)\n  passwd: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChangePasswdUseCase.html":{"url":"injectables/ChangePasswdUseCase.html","title":"injectable - ChangePasswdUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChangePasswdUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/changePasswd.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/changePasswd.usecase.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string, newPasswd: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/changePasswd.usecase.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPasswd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\n\n@Injectable()\nexport class ChangePasswdUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(email: string, newPasswd: string) {\n    const user = await this.userRepository.findByField({ email })\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    const salt = await bcrypt.genSalt(10)\n    const hashedNewPasswd = await bcrypt.hash(newPasswd, salt)\n\n    await this.userRepository.updateField({\n      user,\n      fieldName: 'passwd',\n      fieldValue: hashedNewPasswd,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nCommonServices \n\nCommonServices \n\n\n\nCommonModule\n\nCommonModule\n\nCommonServices  -->\n\nCommonModule->CommonServices \n\n\n\n\n\nCommonServices\n\nCommonServices\n\nCommonModule -->\n\nCommonServices->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommonServices\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommonServices\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { CommonServices } from './common.service.js'\nimport { ConfigModule } from '@nestjs/config'\n\n@Module({\n  imports: [ConfigModule],\n  providers: [CommonServices],\n  exports: [CommonServices],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommonServices.html":{"url":"injectables/CommonServices.html","title":"injectable - CommonServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommonServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/common.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                extractJwtPayload\n                            \n                            \n                                    Async\n                                sendLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/common.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        extractJwtPayload\n                        \n                    \n                \n            \n            \n                \nextractJwtPayload(token: string, payloadName?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/common.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payloadName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendLink(undefined: SendEmailProps)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/common.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            SendEmailProps\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 465,\n    secure: true,\n    auth: {\n      user: this.configService.get('env.SMTP_USER'),\n      pass: this.configService.get('env.SMTP_PASS'),\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/core/common/common.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport jwt, { JwtPayload } from 'jsonwebtoken'\nimport * as nodemailer from 'nodemailer'\n\ninterface SendEmailProps {\n  to: string\n  subject: string\n  link: string\n}\n\n@Injectable()\nexport class CommonServices {\n  constructor(@Inject() private configService: ConfigService) {}\n\n  extractJwtPayload(token: string, payloadName?: string) {\n    const payload = jwt.verify(\n      token,\n      this.configService.get('env.SECRET'),\n    ) as JwtPayload\n    return payloadName && payload[payloadName]\n  }\n\n  private transporter = nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 465,\n    secure: true,\n    auth: {\n      user: this.configService.get('env.SMTP_USER'),\n      pass: this.configService.get('env.SMTP_PASS'),\n    },\n  })\n\n  async sendLink({ to, subject, link }: SendEmailProps): Promise {\n    await this.transporter.sendMail({\n      from: {\n        name: 'Develop Store',\n        address: this.configService.get('env.SMTP_USER'),\n      },\n      to,\n      subject,\n      html: `${link}`,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { databaseProviders } from './database.providers.js'\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteUserUseCase.html":{"url":"injectables/DeleteUserUseCase.html","title":"injectable - DeleteUserUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteUserUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/deleteUser.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/deleteUser.usecase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/deleteUser.usecase.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class DeleteUserUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(id: number) {\n    const user = await this.userRepository.findByField({ id })\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    await this.userRepository.delete(user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailVerifyUseCase.html":{"url":"injectables/EmailVerifyUseCase.html","title":"injectable - EmailVerifyUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailVerifyUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/emailVerify.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/emailVerify.usecase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/emailVerify.usecase.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class EmailVerifyUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(email: string) {\n    const user = await this.userRepository.findByField({ email })\n\n    if (!user) {\n      const msg = this.configService.get('serverMsg.invalidToken')\n      throw { custom: { status: 400, msg } }\n    }\n\n    if (user.verified_email) {\n      return\n    }\n\n    user.verified_email = true\n    await this.userRepository.save(user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Env.html":{"url":"interfaces/Env.html","title":"interface - Env","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Env\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_ADDR\n                                        \n                                \n                                \n                                        \n                                            AUTH_DURATION_DAYS\n                                        \n                                \n                                \n                                        \n                                            NODE_ENV\n                                        \n                                \n                                \n                                        \n                                            ORIGIN_ADDR\n                                        \n                                \n                                \n                                        \n                                            PORT\n                                        \n                                \n                                \n                                        \n                                            SECRET\n                                        \n                                \n                                \n                                        \n                                            SMTP_PASS\n                                        \n                                \n                                \n                                        \n                                            SMTP_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_ADDR\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_ADDR:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AUTH_DURATION_DAYS\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AUTH_DURATION_DAYS:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_ENV\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_ENV:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ORIGIN_ADDR\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ORIGIN_ADDR:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMTP_PASS\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMTP_PASS:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMTP_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMTP_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CorsOptions } from 'cors'\nimport { CookieOptions } from 'express'\n\ninterface Env {\n  NODE_ENV: string\n  PORT: number\n  ORIGIN_ADDR: string\n  API_ADDR: string\n  SMTP_USER: string\n  SMTP_PASS: string\n  AUTH_DURATION_DAYS: number\n  SECRET: string\n}\n\nexport const configuration = () => ({\n  get env() {\n    return {\n      NODE_ENV: process.env.NODE_ENV,\n      PORT: Number(process.env.PORT),\n      ORIGIN_ADDR: process.env.ORIGIN_ADDR,\n      API_ADDR: process.env.API_ADDR,\n      SMTP_USER: process.env.SMTP_USER,\n      SMTP_PASS: process.env.SMTP_PASS,\n      AUTH_DURATION_DAYS: Number(process.env.AUTH_DURATION_DAYS),\n      SECRET: process.env.SECRET,\n    } as Env\n  },\n\n  get cors() {\n    return {\n      origin: [this.env.ORIGIN_ADDR, this.env.API_ADDR],\n      methods: ['GET', 'POST', 'PATCH', 'DELETE'],\n      credentials: true,\n    } as CorsOptions\n  },\n\n  get cookie() {\n    return {\n      httpOnly: true,\n      secure: true,\n      maxAge: this.env.AUTH_DURATION_DAYS * 24 * 60 * 60 * 1000,\n      sameSite: 'none',\n    } as CookieOptions\n  },\n\n  get serverMsg() {\n    return {\n      great: 'Welcome!',\n      err: 'A server occurred error. Please try later.',\n      denied: 'Access denied.',\n      invalidToken: 'Invalid token.',\n    }\n  },\n\n  get authMsg() {\n    return {\n      ok: 'Authentication successful.',\n      incorrect: 'Incorrect password.',\n      emailExists: 'This email already exists.',\n      noEmailToken: 'No email token provided.',\n      noVerifiedEmail: 'No email verified.',\n      recoveryEmail: 'Recovery email successfully send.',\n    }\n  },\n\n  get userMsg() {\n    return {\n      notFound: 'User not found.',\n      created: 'User created successfully.',\n      deleted: 'User deleted successfully.',\n      updated: 'User updated successfully.',\n    }\n  },\n})\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FavoriteRepository.html":{"url":"injectables/FavoriteRepository.html","title":"injectable - FavoriteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FavoriteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/favorites/favorite.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFavorite\n                            \n                            \n                                    Async\n                                deleteFavorite\n                            \n                            \n                                    Async\n                                getFavorites\n                            \n                            \n                                    Async\n                                getOneFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(favoriteModel, userModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/favorites/favorite.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        favoriteModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFavorites\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFavorites(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Favorites } from './favorite.entity.js'\nimport { User } from '../user.entity.js'\nimport { Products } from '../../products/products.entity.js'\n\ninterface IFavoritesRepository {\n  getOneFavorite(userId: number, productId: number): Promise\n  deleteFavorite(userId: number, productId: number): Promise\n  createFavorite(userId: number, productId: number): Promise\n  getFavorites(id: number): Promise\n}\n\n@Injectable()\nexport class FavoriteRepository implements IFavoritesRepository {\n  constructor(\n    @Inject('FAVORITES')\n    private favoriteModel: typeof Favorites,\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async getOneFavorite(userId: number, productId: number): Promise {\n    return this.favoriteModel.findOne({\n      where: { userId, productId },\n    })\n  }\n\n  async deleteFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.destroy({ where: { userId, productId } })\n  }\n\n  async createFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.create({ userId, productId })\n  }\n\n  async getFavorites(id: number): Promise {\n    const data = await this.userModel.findOne({\n      where: { id },\n      include: [\n        {\n          model: Products,\n          as: 'favoriteProducts',\n        },\n      ],\n    })\n\n    return data?.favoriteProducts || []\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Favorites.html":{"url":"classes/Favorites.html","title":"class - Favorites","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Favorites\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/favorites/favorite.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column({type: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/favorites/favorite.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column({type: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/favorites/favorite.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript'\nimport { Products } from '../../products/products.entity.js'\nimport { User } from '../user.entity.js'\n\n@Table({ tableName: 'favorites', timestamps: false })\nexport class Favorites extends Model {\n  @ForeignKey(() => User)\n  @Column({ type: DataType.BIGINT, primaryKey: true })\n  userId: number\n\n  @ForeignKey(() => Products)\n  @Column({ type: DataType.BIGINT, primaryKey: true })\n  productId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetFavoritesUseCase.html":{"url":"injectables/GetFavoritesUseCase.html","title":"injectable - GetFavoritesUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetFavoritesUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/getFavorites.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(favoriteRepository: FavoriteRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/getFavorites.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        favoriteRepository\n                                                  \n                                                        \n                                                                        FavoriteRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/getFavorites.usecase.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FavoriteRepository } from '../favorites/favorite.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetFavoritesUseCase {\n  constructor(@Inject() private favoriteRepository: FavoriteRepository) {}\n\n  async execute(id: number) {\n    return await this.favoriteRepository.getFavorites(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetProductsUseCase.html":{"url":"injectables/GetProductsUseCase.html","title":"injectable - GetProductsUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetProductsUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/usecases/getProducts.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: ProductsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/products/usecases/getProducts.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        ProductsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(search?: string, category?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/usecases/getProducts.usecase.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ProductsRepository } from '../products.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetProductsUseCase {\n  constructor(@Inject() private productsRepository: ProductsRepository) {}\n\n  async execute(search?: string, category?: string) {\n    if (category) {\n      return this.productsRepository.getByCategory(category)\n    }\n\n    if (search) {\n      return this.productsRepository.getByGenericSearch(search)\n    }\n\n    return this.productsRepository.getAllProducts()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetUserUseCase.html":{"url":"injectables/GetUserUseCase.html","title":"injectable - GetUserUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetUserUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/getUser.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/getUser.usecase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/getUser.usecase.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetUserUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(id: number) {\n    const user = await this.userRepository.findByField({ id }, true)\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleError.html":{"url":"classes/HandleError.html","title":"class - HandleError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/handleError.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                http\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        http\n                        \n                    \n                \n            \n            \n                \n                        \n                    http(err: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/handleError.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException } from '@nestjs/common'\n\nexport class HandleError {\n  static http(err: any) {\n    if (err.message) {\n      throw new HttpException(err.message, 422)\n    }\n\n    if (err.custom) {\n      const { custom } = err\n      throw new HttpException(custom.msg, custom.status)\n    }\n\n    console.error(err)\n    throw new HttpException('A server occurred error. Please, try later.', 500)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/httpException.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/httpException.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common'\nimport { Response } from 'express'\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const res = ctx.getResponse()\n    const status = exception.getStatus()\n\n    const raw = exception.getResponse() as string\n    const rawIsString = typeof raw === 'string'\n\n    if (rawIsString && !raw.includes('{')) {\n      res.status(status).json({ msg: raw })\n      return\n    }\n\n    const msg = rawIsString ? JSON.parse(raw)['message'] : raw['message']\n\n    res.status(status).json({ msg: Array.isArray(msg) ? msg[0] : msg })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFavoritesRepository.html":{"url":"interfaces/IFavoritesRepository.html","title":"interface - IFavoritesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFavoritesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/favorites/favorite.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createFavorite\n                                    \n                                \n                                \n                                    \n                                        deleteFavorite\n                                    \n                                \n                                \n                                    \n                                        getFavorites\n                                    \n                                \n                                \n                                    \n                                        getOneFavorite\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createFavorite\n                        \n                    \n                \n            \n            \n                \ncreateFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteFavorite\n                        \n                    \n                \n            \n            \n                \ndeleteFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFavorites\n                        \n                    \n                \n            \n            \n                \ngetFavorites(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOneFavorite\n                        \n                    \n                \n            \n            \n                \ngetOneFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Favorites } from './favorite.entity.js'\nimport { User } from '../user.entity.js'\nimport { Products } from '../../products/products.entity.js'\n\ninterface IFavoritesRepository {\n  getOneFavorite(userId: number, productId: number): Promise\n  deleteFavorite(userId: number, productId: number): Promise\n  createFavorite(userId: number, productId: number): Promise\n  getFavorites(id: number): Promise\n}\n\n@Injectable()\nexport class FavoriteRepository implements IFavoritesRepository {\n  constructor(\n    @Inject('FAVORITES')\n    private favoriteModel: typeof Favorites,\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async getOneFavorite(userId: number, productId: number): Promise {\n    return this.favoriteModel.findOne({\n      where: { userId, productId },\n    })\n  }\n\n  async deleteFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.destroy({ where: { userId, productId } })\n  }\n\n  async createFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.create({ userId, productId })\n  }\n\n  async getFavorites(id: number): Promise {\n    const data = await this.userModel.findOne({\n      where: { id },\n      include: [\n        {\n          model: Products,\n          as: 'favoriteProducts',\n        },\n      ],\n    })\n\n    return data?.favoriteProducts || []\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserRepository.html":{"url":"interfaces/IUserRepository.html","title":"interface - IUserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findByField\n                                    \n                                \n                                \n                                    \n                                        save\n                                    \n                                \n                                \n                                    \n                                        updateField\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userAttributes: RegisterBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userAttributes\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(target: number | User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            number | User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByField\n                        \n                    \n                \n            \n            \n                \nfindByField(field: Record, restrict?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                restrict\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateField\n                        \n                    \n                \n            \n            \n                \nupdateField(undefined: UpdateField)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            UpdateField\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindAttributeOptions } from 'sequelize'\nimport { RegisterBody } from '../auth/dto/registerBody.dto.js'\nimport { User } from './user.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface UpdateField {\n  user: User\n  fieldName: string\n  fieldValue: any\n}\n\nexport interface IUserRepository {\n  findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise\n  delete(target: number | User): Promise\n  updateField({ user, fieldName, fieldValue }: UpdateField): Promise\n  save(user: User): Promise\n  create(userAttributes: RegisterBody): Promise\n}\n\n@Injectable()\nexport class UserRepository implements IUserRepository {\n  constructor(\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise {\n    const fieldKey = Object.keys(field)[0]\n\n    let attributes: FindAttributeOptions | undefined = undefined\n    if (restrict) {\n      attributes = { exclude: ['id', 'passwd', 'verified_email'] }\n    }\n\n    return this.userModel.findOne({\n      where: { [fieldKey]: field[fieldKey] },\n      attributes,\n    })\n  }\n\n  async delete(target: number | User): Promise {\n    if (typeof target === 'number') {\n      await this.userModel.destroy({ where: { id: target } })\n      return\n    }\n    await target.destroy()\n  }\n\n  async updateField({\n    user,\n    fieldName,\n    fieldValue,\n  }: UpdateField): Promise {\n    user[fieldName] = fieldValue\n    await this.save(user)\n  }\n\n  async save(user: User): Promise {\n    await user.save()\n  }\n\n  async create(userAttributes: RegisterBody): Promise {\n    await this.userModel.create(userAttributes)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginBody.html":{"url":"classes/LoginBody.html","title":"class - LoginBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/dto/loginBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                passwd\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(0, 100)@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/loginBody.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(6, 16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/loginBody.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsEmail, IsNotEmpty, Length } from 'class-validator'\n\nexport class LoginBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(6, 16)\n  passwd: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginUseCase.html":{"url":"injectables/LoginUseCase.html","title":"injectable - LoginUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/login.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/login.usecase.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(undefined: LoginBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/login.usecase.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { LoginBody } from '../dto/loginBody.dto.js'\nimport { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class LoginUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute({ email, passwd }: LoginBody) {\n    const user = await this.userRepository.findByField({ email })\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    if (!user.verified_email) {\n      const msg = this.configService.get('authMsg.noVerifiedEmail')\n      throw { custom: { status: 400, msg } }\n    }\n\n    const checkPasswd = await bcrypt.compare(passwd, user.passwd)\n\n    if (!checkPasswd) {\n      const msg = this.configService.get('authMsg.incorrect')\n      throw { custom: { status: 422, msg } }\n    }\n\n    const token = jwt.sign(\n      { id: user.id },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: `${this.configService.get('env.AUTH_DURATION_DAYS') * 24}h`,\n      },\n    )\n\n    return token\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswdRecoveryUseCase.html":{"url":"injectables/PasswdRecoveryUseCase.html","title":"injectable - PasswdRecoveryUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswdRecoveryUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/passwdRecovery.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository, commonServices: CommonServices)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/passwdRecovery.usecase.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/passwdRecovery.usecase.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport jwt from 'jsonwebtoken'\nimport { CommonServices } from '../../common/common.service.js'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class PasswdRecoveryUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n    @Inject()\n    private commonServices: CommonServices,\n  ) {}\n\n  async execute(email: string) {\n    const userExists = await this.userRepository.findByField({ email })\n\n    if (!userExists) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    const recoveryToken = jwt.sign(\n      { email },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: '1h',\n      },\n    )\n\n    const recoveryLink = `${this.configService.get('env.ORIGIN_ADDR')}/passwd-change/${recoveryToken}`\n\n    this.commonServices.sendLink({\n      to: email,\n      subject: 'Password Recovery',\n      link: recoveryLink,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PopulateProductsService.html":{"url":"injectables/PopulateProductsService.html","title":"injectable - PopulateProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PopulateProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seed/populateProducts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                products\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateProducts\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/database/seed/populateProducts.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/seed/populateProducts.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ProductEl[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/seed/populateProducts.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductEl[]\n\n                    \n                \n                    \n                        \n                                Defined in src/database/seed/populateProducts.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Products } from '../../core/products/products.entity.js'\nimport { faker } from '@faker-js/faker'\nimport { ConfigService } from '@nestjs/config'\n\ninterface ProductEl {\n  category: string\n  productName: string\n  info: string\n  img: string\n  oldPrice: number\n  price: number\n}\n\n@Injectable()\nexport class PopulateProductsService {\n  private products: ProductEl[]\n\n  constructor(@Inject() private configService: ConfigService) {\n    this.products = this.generateProducts()\n  }\n\n  private generateProducts(): ProductEl[] {\n    return [\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Recommended',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 5.99,\n        price: 2.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Popular 2024',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 3.25,\n        price: 1.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'The best',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 24.99,\n        price: 14.99,\n      })),\n    ]\n  }\n\n  async run() {\n    try {\n      const isPopulated = (await Products.findAll()).length > 0\n      if (isPopulated) {\n        return\n      }\n\n      for (const product of this.products) {\n        const { productName, img, category, price, oldPrice, info } = product\n\n        await Products.create({\n          productName,\n          img,\n          category,\n          price,\n          oldPrice,\n          info,\n        })\n      }\n      console.log('\\n> Populate DB\\n')\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductEl.html":{"url":"interfaces/ProductEl.html","title":"interface - ProductEl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductEl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seed/populateProducts.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            img\n                                        \n                                \n                                \n                                        \n                                            info\n                                        \n                                \n                                \n                                        \n                                            oldPrice\n                                        \n                                \n                                \n                                        \n                                            price\n                                        \n                                \n                                \n                                        \n                                            productName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        img\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        img:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        info:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Products } from '../../core/products/products.entity.js'\nimport { faker } from '@faker-js/faker'\nimport { ConfigService } from '@nestjs/config'\n\ninterface ProductEl {\n  category: string\n  productName: string\n  info: string\n  img: string\n  oldPrice: number\n  price: number\n}\n\n@Injectable()\nexport class PopulateProductsService {\n  private products: ProductEl[]\n\n  constructor(@Inject() private configService: ConfigService) {\n    this.products = this.generateProducts()\n  }\n\n  private generateProducts(): ProductEl[] {\n    return [\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Recommended',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 5.99,\n        price: 2.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Popular 2024',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 3.25,\n        price: 1.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'The best',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 24.99,\n        price: 14.99,\n      })),\n    ]\n  }\n\n  async run() {\n    try {\n      const isPopulated = (await Products.findAll()).length > 0\n      if (isPopulated) {\n        return\n      }\n\n      for (const product of this.products) {\n        const { productName, img, category, price, oldPrice, info } = product\n\n        await Products.create({\n          productName,\n          img,\n          category,\n          price,\n          oldPrice,\n          info,\n        })\n      }\n      console.log('\\n> Populate DB\\n')\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductRepositoryInterface.html":{"url":"interfaces/ProductRepositoryInterface.html","title":"interface - ProductRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAllProducts\n                                    \n                                \n                                \n                                    \n                                        getByCategory\n                                    \n                                \n                                \n                                    \n                                        getByGenericSearch\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByCategory\n                        \n                    \n                \n            \n            \n                \ngetByCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByGenericSearch\n                        \n                    \n                \n            \n            \n                \ngetByGenericSearch(search: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Sequelize, Op } from 'sequelize'\nimport { Products } from './products.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface ProductRepositoryInterface {\n  getAllProducts(): Promise\n  getByCategory(category: string): Promise\n  getByGenericSearch(search: string): Promise\n}\n\n@Injectable()\nexport class ProductsRepository implements ProductRepositoryInterface {\n  constructor(\n    @Inject('PRODUCTS')\n    private productModel: typeof Products,\n  ) {}\n\n  async getAllProducts(): Promise {\n    return this.productModel.findAll()\n  }\n\n  async getByCategory(category: string): Promise {\n    return this.productModel.findAll({ where: { category } })\n  }\n\n  async getByGenericSearch(search: string): Promise {\n    return this.productModel.findAll({\n      where: {\n        [Op.or]: [\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('productName')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('info')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n        ],\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Products.html":{"url":"classes/Products.html","title":"class - Products","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Products\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                img\n                            \n                            \n                                    \n                                info\n                            \n                            \n                                    \n                                oldPrice\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                productName\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, autoIncrement: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsToMany(undefined, {through: () => Favorites, foreignKey: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsToMany,\n  Column,\n  DataType,\n  Model,\n  Table,\n} from 'sequelize-typescript'\nimport { User } from '../user/user.entity.js'\nimport { Favorites } from '../user/favorites/favorite.entity.js'\n\n@Table({ tableName: 'products', timestamps: false })\nexport class Products extends Model {\n  @Column({\n    type: DataType.BIGINT,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  category: string\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  productName: string\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  info: string\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  img: string\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  oldPrice: number\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  price: number\n\n  @BelongsToMany(() => User, {\n    through: () => Favorites,\n    foreignKey: {\n      name: 'productId',\n    },\n  })\n  users: User[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsControllers.html":{"url":"controllers/ProductsControllers.html","title":"controller - ProductsControllers","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsControllers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProducts(query?: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/core/products/products.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { GetProductsUseCase } from './usecases/getProducts.usecase.js'\nimport { HandleError } from '../../utils/handleError.js'\nimport { Controller, Get, Inject, Query } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\n@ApiTags('products')\n@Controller('/products')\nexport class ProductsControllers {\n  constructor(\n    @Inject()\n    private getProductsUseCase: GetProductsUseCase,\n  ) {}\n\n  @Get('/')\n  async getProducts(@Query() query?: { search?: string; category?: string }) {\n    try {\n      const { search, category } = query\n\n      const filteredProducts = await this.getProductsUseCase.execute(\n        search,\n        category,\n      )\n\n      return filteredProducts\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nDatabaseModule->ProductsModule\n\n\n\n\n\nGetProductsUseCase\n\nGetProductsUseCase\n\nProductsModule -->\n\nGetProductsUseCase->ProductsModule\n\n\n\n\n\nProductsRepository\n\nProductsRepository\n\nProductsModule -->\n\nProductsRepository->ProductsModule\n\n\n\n\n\nProductsServices\n\nProductsServices\n\nProductsModule -->\n\nProductsServices->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GetProductsUseCase\n                        \n                        \n                            ProductsRepository\n                        \n                        \n                            ProductsServices\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsControllers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ProductsServices } from './products.service.js'\nimport { GetProductsUseCase } from './usecases/getProducts.usecase.js'\nimport { ProductsRepository } from './products.repository.js'\nimport { ProductsControllers } from './products.controller.js'\nimport { DatabaseModule } from '../../database/database.module.js'\nimport { productsProviders } from './products.providers.js'\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [ProductsControllers],\n  providers: [\n    ProductsServices,\n    GetProductsUseCase,\n    ProductsRepository,\n    ...productsProviders,\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsRepository.html":{"url":"injectables/ProductsRepository.html","title":"injectable - ProductsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    Async\n                                getByCategory\n                            \n                            \n                                    Async\n                                getByGenericSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/products/products.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGenericSearch\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGenericSearch(search: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Sequelize, Op } from 'sequelize'\nimport { Products } from './products.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface ProductRepositoryInterface {\n  getAllProducts(): Promise\n  getByCategory(category: string): Promise\n  getByGenericSearch(search: string): Promise\n}\n\n@Injectable()\nexport class ProductsRepository implements ProductRepositoryInterface {\n  constructor(\n    @Inject('PRODUCTS')\n    private productModel: typeof Products,\n  ) {}\n\n  async getAllProducts(): Promise {\n    return this.productModel.findAll()\n  }\n\n  async getByCategory(category: string): Promise {\n    return this.productModel.findAll({ where: { category } })\n  }\n\n  async getByGenericSearch(search: string): Promise {\n    return this.productModel.findAll({\n      where: {\n        [Op.or]: [\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('productName')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('info')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n        ],\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsServices.html":{"url":"injectables/ProductsServices.html","title":"injectable - ProductsServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getProductsUseCase: GetProductsUseCase)\n                    \n                \n                        \n                            \n                                Defined in src/core/products/products.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getProductsUseCase\n                                                  \n                                                        \n                                                                        GetProductsUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProducts(search?: string, category?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { GetProductsUseCase } from './usecases/getProducts.usecase.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class ProductsServices {\n  constructor(\n    @Inject()\n    private getProductsUseCase: GetProductsUseCase,\n  ) {}\n\n  async getProducts(search?: string, category?: string) {\n    return this.getProductsUseCase.execute(search, category)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterBody.html":{"url":"classes/RegisterBody.html","title":"class - RegisterBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/dto/registerBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                passwd\n                            \n                            \n                                    \n                                    \n                                    \n                                uname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(0, 100)@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/registerBody.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(6, 16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/registerBody.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(3, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/registerBody.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsEmail, IsNotEmpty, Length } from 'class-validator'\n\nexport class RegisterBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(3, 50)\n  uname: string\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(6, 16)\n  passwd: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegisterUseCase.html":{"url":"injectables/RegisterUseCase.html","title":"injectable - RegisterUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegisterUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/register.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository, commonServices: CommonServices)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/register.usecase.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(undefined: RegisterUserCaseProps)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/register.usecase.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            RegisterUserCaseProps\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { CommonServices } from '../../common/common.service.js'\nimport { ConfigService } from '@nestjs/config'\n\ninterface RegisterUserCaseProps {\n  uname: string\n  passwd: string\n  email: string\n}\n\n@Injectable()\nexport class RegisterUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n    @Inject()\n    private commonServices: CommonServices,\n  ) {}\n\n  async execute({ uname, passwd, email }: RegisterUserCaseProps) {\n    const emailExists = await this.userRepository.findByField({ email })\n\n    if (emailExists) {\n      const msg = this.configService.get('authMsg.emailExists')\n      throw { custom: { status: 409, msg } }\n    }\n\n    const salt = await bcrypt.genSalt(10)\n    const hashedPasswd = await bcrypt.hash(passwd, salt)\n\n    await this.userRepository.create({\n      uname,\n      email,\n      passwd: hashedPasswd,\n    })\n\n    const emailToken = jwt.sign(\n      { email },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: '1h',\n      },\n    )\n\n    const verifyLink = `${this.configService.get('env.API_ADDR')}/auth/email-verify/${emailToken}`\n\n    this.commonServices.sendLink({\n      to: email,\n      subject: 'Email Verification',\n      link: verifyLink,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterUserCaseProps.html":{"url":"interfaces/RegisterUserCaseProps.html","title":"interface - RegisterUserCaseProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterUserCaseProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/register.usecase.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            passwd\n                                        \n                                \n                                \n                                        \n                                            uname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        passwd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        passwd:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { CommonServices } from '../../common/common.service.js'\nimport { ConfigService } from '@nestjs/config'\n\ninterface RegisterUserCaseProps {\n  uname: string\n  passwd: string\n  email: string\n}\n\n@Injectable()\nexport class RegisterUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n    @Inject()\n    private commonServices: CommonServices,\n  ) {}\n\n  async execute({ uname, passwd, email }: RegisterUserCaseProps) {\n    const emailExists = await this.userRepository.findByField({ email })\n\n    if (emailExists) {\n      const msg = this.configService.get('authMsg.emailExists')\n      throw { custom: { status: 409, msg } }\n    }\n\n    const salt = await bcrypt.genSalt(10)\n    const hashedPasswd = await bcrypt.hash(passwd, salt)\n\n    await this.userRepository.create({\n      uname,\n      email,\n      passwd: hashedPasswd,\n    })\n\n    const emailToken = jwt.sign(\n      { email },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: '1h',\n      },\n    )\n\n    const verifyLink = `${this.configService.get('env.API_ADDR')}/auth/email-verify/${emailToken}`\n\n    this.commonServices.sendLink({\n      to: email,\n      subject: 'Email Verification',\n      link: verifyLink,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RmUnverifiedUsers.html":{"url":"injectables/RmUnverifiedUsers.html","title":"injectable - RmUnverifiedUsers","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RmUnverifiedUsers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/rmUnverifiedUsers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleCron\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *')\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/rmUnverifiedUsers.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Op } from 'sequelize'\nimport { User } from '../core/user/user.entity.js'\nimport { Injectable } from '@nestjs/common'\nimport { Cron } from '@nestjs/schedule'\n\n@Injectable()\nexport class RmUnverifiedUsers {\n  @Cron('0 0 * * *')\n  async handleCron() {\n    try {\n      const paramDate = new Date(Date.now() - 1 * 60 * 60 * 1000)\n\n      await User.destroy({\n        where: {\n          verified_email: false,\n          createdAt: {\n            [Op.lt]: paramDate,\n          },\n        },\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendEmailProps.html":{"url":"interfaces/SendEmailProps.html","title":"interface - SendEmailProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendEmailProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/common.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport jwt, { JwtPayload } from 'jsonwebtoken'\nimport * as nodemailer from 'nodemailer'\n\ninterface SendEmailProps {\n  to: string\n  subject: string\n  link: string\n}\n\n@Injectable()\nexport class CommonServices {\n  constructor(@Inject() private configService: ConfigService) {}\n\n  extractJwtPayload(token: string, payloadName?: string) {\n    const payload = jwt.verify(\n      token,\n      this.configService.get('env.SECRET'),\n    ) as JwtPayload\n    return payloadName && payload[payloadName]\n  }\n\n  private transporter = nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 465,\n    secure: true,\n    auth: {\n      user: this.configService.get('env.SMTP_USER'),\n      pass: this.configService.get('env.SMTP_PASS'),\n    },\n  })\n\n  async sendLink({ to, subject, link }: SendEmailProps): Promise {\n    await this.transporter.sendMail({\n      from: {\n        name: 'Develop Store',\n        address: this.configService.get('env.SMTP_USER'),\n      },\n      to,\n      subject,\n      html: `${link}`,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToggleFavoriteBody.html":{"url":"classes/ToggleFavoriteBody.html","title":"class - ToggleFavoriteBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToggleFavoriteBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/dto/toggleFavoriteBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/dto/toggleFavoriteBody.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty } from 'class-validator'\n\nexport class ToggleFavoriteBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  productId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ToggleFavoriteUseCase.html":{"url":"injectables/ToggleFavoriteUseCase.html","title":"injectable - ToggleFavoriteUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ToggleFavoriteUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/toggleFavorite.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(favoriteRepository: FavoriteRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/toggleFavorite.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        favoriteRepository\n                                                  \n                                                        \n                                                                        FavoriteRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/toggleFavorite.usecase.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FavoriteRepository } from '../favorites/favorite.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class ToggleFavoriteUseCase {\n  constructor(\n    @Inject()\n    private favoriteRepository: FavoriteRepository,\n  ) {}\n\n  async execute(userId: number, productId: number) {\n    const favorite = await this.favoriteRepository.getOneFavorite(\n      userId,\n      productId,\n    )\n\n    if (favorite) {\n      await this.favoriteRepository.deleteFavorite(userId, productId)\n      return\n    }\n\n    await this.favoriteRepository.createFavorite(userId, productId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateField.html":{"url":"interfaces/UpdateField.html","title":"interface - UpdateField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdateField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FindAttributeOptions } from 'sequelize'\nimport { RegisterBody } from '../auth/dto/registerBody.dto.js'\nimport { User } from './user.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface UpdateField {\n  user: User\n  fieldName: string\n  fieldValue: any\n}\n\nexport interface IUserRepository {\n  findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise\n  delete(target: number | User): Promise\n  updateField({ user, fieldName, fieldValue }: UpdateField): Promise\n  save(user: User): Promise\n  create(userAttributes: RegisterBody): Promise\n}\n\n@Injectable()\nexport class UserRepository implements IUserRepository {\n  constructor(\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise {\n    const fieldKey = Object.keys(field)[0]\n\n    let attributes: FindAttributeOptions | undefined = undefined\n    if (restrict) {\n      attributes = { exclude: ['id', 'passwd', 'verified_email'] }\n    }\n\n    return this.userModel.findOne({\n      where: { [fieldKey]: field[fieldKey] },\n      attributes,\n    })\n  }\n\n  async delete(target: number | User): Promise {\n    if (typeof target === 'number') {\n      await this.userModel.destroy({ where: { id: target } })\n      return\n    }\n    await target.destroy()\n  }\n\n  async updateField({\n    user,\n    fieldName,\n    fieldValue,\n  }: UpdateField): Promise {\n    user[fieldName] = fieldValue\n    await this.save(user)\n  }\n\n  async save(user: User): Promise {\n    await user.save()\n  }\n\n  async create(userAttributes: RegisterBody): Promise {\n    await this.userModel.create(userAttributes)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                favoriteProducts\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                passwd\n                            \n                            \n                                    \n                                uname\n                            \n                            \n                                    \n                                verified_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        favoriteProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Products[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsToMany(undefined, {through: () => Favorites, foreignKey: undefined, as: 'favoriteProducts'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false, defaultValue: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Table,\n  Model,\n  Column,\n  DataType,\n  BelongsToMany,\n} from 'sequelize-typescript'\nimport { Products } from '../products/products.entity.js'\nimport { Favorites } from './favorites/favorite.entity.js'\n\n@Table({ tableName: 'users', updatedAt: false })\nexport class User extends Model {\n  @Column({\n    type: DataType.BIGINT,\n    primaryKey: true,\n    autoIncrement: true,\n  })\n  id: number\n\n  @Column({\n    type: DataType.STRING(50),\n    allowNull: false,\n  })\n  uname: string\n\n  @Column({\n    type: DataType.STRING(100),\n    allowNull: false,\n  })\n  email: string\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  verified_email: boolean\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  passwd: string\n\n  @BelongsToMany(() => Products, {\n    through: () => Favorites,\n    foreignKey: {\n      name: 'userId',\n    },\n    as: 'favoriteProducts',\n  })\n  favoriteProducts: Products[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserControllers.html":{"url":"controllers/UserControllers.html","title":"controller - UserControllers","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserControllers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                changePasswd\n                            \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                getFavorites\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    Async\n                                toggleFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        changePasswd\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswd(body: ChangePasswdBody, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/change-passwd')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ChangePasswdBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFavorites\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFavorites(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/get-favorites')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:84\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        toggleFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFavorite(body: ToggleFavoriteBody, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/toggle-favorite')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ToggleFavoriteBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { HandleError } from '../../utils/handleError.js'\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Patch,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common'\nimport { Request, Response } from 'express'\nimport { ChangePasswdBody } from './dto/changePasswdBody.dto.js'\nimport { isLoggedIn } from '../../guard/isLoggedIn.guard.js'\nimport { UserServices } from './user.service.js'\nimport { ConfigService } from '@nestjs/config'\nimport { ToggleFavoriteBody } from './dto/toggleFavoriteBody.dto.js'\nimport { ApiTags } from '@nestjs/swagger'\n\n@ApiTags('user')\n@Controller('/user')\n@UseGuards(isLoggedIn)\nexport class UserControllers {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userServices: UserServices,\n  ) {}\n\n  @Get('/')\n  async getUser(@Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const user = await this.userServices.getUser(token)\n      return user\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Patch('/change-passwd')\n  async changePasswd(@Body() body: ChangePasswdBody, @Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const { passwd } = body\n\n      await this.userServices.changePasswd(token, passwd)\n\n      return { msg: this.configService.get('userMsg.updated') }\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Delete('/delete')\n  async deleteUser(@Req() req: Request, @Res() res: Response) {\n    try {\n      const { token } = req.cookies\n\n      await this.userServices.deleteUser(token)\n\n      res.clearCookie('token')\n      res.status(200).json({ msg: this.configService.get('userMsg.deleted') })\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/toggle-favorite')\n  async toggleFavorite(@Body() body: ToggleFavoriteBody, @Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const { productId } = body\n      await this.userServices.toggleFavorite(token, productId)\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/get-favorites')\n  async getFavorites(@Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const favorites = await this.userServices.getFavorites(token)\n      return favorites\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nCommonModule->UserModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nFavoriteRepository \n\nFavoriteRepository \n\nFavoriteRepository  -->\n\nUserModule->FavoriteRepository \n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\n\n\nChangePasswdUseCase\n\nChangePasswdUseCase\n\nUserModule -->\n\nChangePasswdUseCase->UserModule\n\n\n\n\n\nDeleteUserUseCase\n\nDeleteUserUseCase\n\nUserModule -->\n\nDeleteUserUseCase->UserModule\n\n\n\n\n\nFavoriteRepository\n\nFavoriteRepository\n\nUserModule -->\n\nFavoriteRepository->UserModule\n\n\n\n\n\nGetFavoritesUseCase\n\nGetFavoritesUseCase\n\nUserModule -->\n\nGetFavoritesUseCase->UserModule\n\n\n\n\n\nGetUserUseCase\n\nGetUserUseCase\n\nUserModule -->\n\nGetUserUseCase->UserModule\n\n\n\n\n\nToggleFavoriteUseCase\n\nToggleFavoriteUseCase\n\nUserModule -->\n\nToggleFavoriteUseCase->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChangePasswdUseCase\n                        \n                        \n                            DeleteUserUseCase\n                        \n                        \n                            FavoriteRepository\n                        \n                        \n                            GetFavoritesUseCase\n                        \n                        \n                            GetUserUseCase\n                        \n                        \n                            ToggleFavoriteUseCase\n                        \n                        \n                            UserRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserControllers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FavoriteRepository\n                        \n                        \n                            UserRepository\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { UserControllers } from './user.controller.js'\nimport { UserServices } from './user.service.js'\nimport { GetUserUseCase } from './usecases/getUser.usecase.js'\nimport { DeleteUserUseCase } from './usecases/deleteUser.usecase.js'\nimport { ToggleFavoriteUseCase } from './usecases/toggleFavorite.usecase.js'\nimport { GetFavoritesUseCase } from './usecases/getFavorites.usecase.js'\nimport { ChangePasswdUseCase } from './usecases/changePasswd.usecase.js'\nimport { UserRepository } from './user.repository.js'\nimport { CommonModule } from '../common/common.module.js'\nimport { DatabaseModule } from '../../database/database.module.js'\nimport { userProviders } from './providers/user.providers.js'\nimport { favoriteProviders } from './providers/favorite.providers.js'\nimport { ConfigModule } from '@nestjs/config'\nimport { FavoriteRepository } from './favorites/favorite.repository.js'\n\n@Module({\n  imports: [CommonModule, DatabaseModule, ConfigModule],\n  controllers: [UserControllers],\n  providers: [\n    UserServices,\n    GetUserUseCase,\n    DeleteUserUseCase,\n    ToggleFavoriteUseCase,\n    GetFavoritesUseCase,\n    ChangePasswdUseCase,\n    FavoriteRepository,\n    UserRepository,\n    ...userProviders,\n    ...favoriteProviders,\n  ],\n  exports: [UserRepository, FavoriteRepository],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findByField\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                updateField\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/user.repository.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userAttributes: RegisterBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userAttributes\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(target: number | User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            number | User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByField\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByField(field: Record, restrict?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                restrict\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateField\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateField(undefined: UpdateField)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            UpdateField\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindAttributeOptions } from 'sequelize'\nimport { RegisterBody } from '../auth/dto/registerBody.dto.js'\nimport { User } from './user.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface UpdateField {\n  user: User\n  fieldName: string\n  fieldValue: any\n}\n\nexport interface IUserRepository {\n  findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise\n  delete(target: number | User): Promise\n  updateField({ user, fieldName, fieldValue }: UpdateField): Promise\n  save(user: User): Promise\n  create(userAttributes: RegisterBody): Promise\n}\n\n@Injectable()\nexport class UserRepository implements IUserRepository {\n  constructor(\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise {\n    const fieldKey = Object.keys(field)[0]\n\n    let attributes: FindAttributeOptions | undefined = undefined\n    if (restrict) {\n      attributes = { exclude: ['id', 'passwd', 'verified_email'] }\n    }\n\n    return this.userModel.findOne({\n      where: { [fieldKey]: field[fieldKey] },\n      attributes,\n    })\n  }\n\n  async delete(target: number | User): Promise {\n    if (typeof target === 'number') {\n      await this.userModel.destroy({ where: { id: target } })\n      return\n    }\n    await target.destroy()\n  }\n\n  async updateField({\n    user,\n    fieldName,\n    fieldValue,\n  }: UpdateField): Promise {\n    user[fieldName] = fieldValue\n    await this.save(user)\n  }\n\n  async save(user: User): Promise {\n    await user.save()\n  }\n\n  async create(userAttributes: RegisterBody): Promise {\n    await this.userModel.create(userAttributes)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServices.html":{"url":"classes/UserServices.html","title":"class - UserServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePasswd\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getFavorites\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                toggleFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonServices: CommonServices, getUserUseCase: GetUserUseCase, changePasswdUseCase: ChangePasswdUseCase, deleteUserUseCase: DeleteUserUseCase, toggleFavoriteUseCase: ToggleFavoriteUseCase, getFavoritesUseCase: GetFavoritesUseCase)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getUserUseCase\n                                                  \n                                                        \n                                                                        GetUserUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changePasswdUseCase\n                                                  \n                                                        \n                                                                        ChangePasswdUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteUserUseCase\n                                                  \n                                                        \n                                                                        DeleteUserUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        toggleFavoriteUseCase\n                                                  \n                                                        \n                                                                        ToggleFavoriteUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getFavoritesUseCase\n                                                  \n                                                        \n                                                                        GetFavoritesUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswd\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswd(token: string, newPasswd: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPasswd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFavorites\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFavorites(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        toggleFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFavorite(token: string, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChangePasswdUseCase } from './usecases/changePasswd.usecase.js'\nimport { DeleteUserUseCase } from './usecases/deleteUser.usecase.js'\nimport { GetFavoritesUseCase } from './usecases/getFavorites.usecase.js'\nimport { GetUserUseCase } from './usecases/getUser.usecase.js'\nimport { ToggleFavoriteUseCase } from './usecases/toggleFavorite.usecase.js'\nimport { Inject } from '@nestjs/common'\nimport { CommonServices } from '../common/common.service.js'\n\nexport class UserServices {\n  constructor(\n    @Inject()\n    private commonServices: CommonServices,\n    @Inject()\n    private getUserUseCase: GetUserUseCase,\n    @Inject()\n    private changePasswdUseCase: ChangePasswdUseCase,\n    @Inject()\n    private deleteUserUseCase: DeleteUserUseCase,\n    @Inject()\n    private toggleFavoriteUseCase: ToggleFavoriteUseCase,\n    @Inject()\n    private getFavoritesUseCase: GetFavoritesUseCase,\n  ) {}\n\n  async getUser(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.getUserUseCase.execute(id)\n  }\n\n  async changePasswd(token: string, newPasswd: string) {\n    const email = this.commonServices.extractJwtPayload(token, 'email')\n    return this.changePasswdUseCase.execute(email, newPasswd)\n  }\n\n  async deleteUser(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.deleteUserUseCase.execute(id)\n  }\n\n  async toggleFavorite(token: string, productId: number) {\n    const userId = this.commonServices.extractJwtPayload(token, 'id')\n    return this.toggleFavoriteUseCase.execute(userId, productId)\n  }\n\n  async getFavorites(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.getFavoritesUseCase.execute(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/configuration.ts\n            \n            interface\n            Env\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/config/configuration.ts\n            \n            variable\n            configuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/auth.controller.ts\n            \n            controller\n            AuthControllers\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/auth/auth.service.ts\n            \n            injectable\n            AuthServices\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/auth/dto/loginBody.dto.ts\n            \n            class\n            LoginBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/dto/registerBody.dto.ts\n            \n            class\n            RegisterBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/emailVerify.usecase.ts\n            \n            injectable\n            EmailVerifyUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/login.usecase.ts\n            \n            injectable\n            LoginUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/passwdRecovery.usecase.ts\n            \n            injectable\n            PasswdRecoveryUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/register.usecase.ts\n            \n            injectable\n            RegisterUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/register.usecase.ts\n            \n            interface\n            RegisterUserCaseProps\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/common/common.service.ts\n            \n            injectable\n            CommonServices\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/common/common.service.ts\n            \n            interface\n            SendEmailProps\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/products/products.controller.ts\n            \n            controller\n            ProductsControllers\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/products/products.entity.ts\n            \n            class\n            Products\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/products/products.providers.ts\n            \n            variable\n            productsProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/products/products.repository.ts\n            \n            injectable\n            ProductsRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/products/products.repository.ts\n            \n            interface\n            ProductRepositoryInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/products/products.service.ts\n            \n            injectable\n            ProductsServices\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/products/usecases/getProducts.usecase.ts\n            \n            injectable\n            GetProductsUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/dto/changePasswdBody.dto.ts\n            \n            class\n            ChangePasswdBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/user/dto/toggleFavoriteBody.dto.ts\n            \n            class\n            ToggleFavoriteBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/user/favorites/favorite.entity.ts\n            \n            class\n            Favorites\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/favorites/favorite.repository.ts\n            \n            injectable\n            FavoriteRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/favorites/favorite.repository.ts\n            \n            interface\n            IFavoritesRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/user/providers/favorite.providers.ts\n            \n            variable\n            favoriteProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/user/providers/user.providers.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/user/usecases/changePasswd.usecase.ts\n            \n            injectable\n            ChangePasswdUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/deleteUser.usecase.ts\n            \n            injectable\n            DeleteUserUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/getFavorites.usecase.ts\n            \n            injectable\n            GetFavoritesUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/getUser.usecase.ts\n            \n            injectable\n            GetUserUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/toggleFavorite.usecase.ts\n            \n            injectable\n            ToggleFavoriteUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/user.controller.ts\n            \n            controller\n            UserControllers\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/user/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/user/user.repository.ts\n            \n            interface\n            IUserRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/user.repository.ts\n            \n            interface\n            UpdateField\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/user/user.service.ts\n            \n            class\n            UserServices\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seed/populateProducts.service.ts\n            \n            injectable\n            PopulateProductsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/seed/populateProducts.service.ts\n            \n            interface\n            ProductEl\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/filters/httpException.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guard/isLoggedIn.guard.ts\n            \n            guard\n            isLoggedIn\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/jobs/rmUnverifiedUsers.service.ts\n            \n            injectable\n            RmUnverifiedUsers\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/handleError.ts\n            \n            class\n            HandleError\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @faker-js/faker : ^8.4.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^4.1.0\n        \n            @nestjs/sequelize : ^10.0.1\n        \n            @nestjs/serve-static : ^4.0.2\n        \n            @nestjs/swagger : ^7.4.0\n        \n            bcrypt : ^5.1.1\n        \n            cacheable-request : ^12.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            dotenv : ^16.4.5\n        \n            express-rate-limit : ^7.4.0\n        \n            http-cache-semantics : ^4.1.1\n        \n            jsonwebtoken : ^9.0.2\n        \n            nodemailer : ^6.9.14\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            sequelize : ^6.37.3\n        \n            sequelize-typescript : ^2.1.6\n        \n            sqlite3 : ^5.1.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/isLoggedIn.html":{"url":"guards/isLoggedIn.html","title":"guard - isLoggedIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    isLoggedIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/isLoggedIn.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/isLoggedIn.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/isLoggedIn.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  Inject,\n  Injectable,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport jwt from 'jsonwebtoken'\nimport { Observable } from 'rxjs'\n\n@Injectable()\nexport class isLoggedIn implements CanActivate {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const req = context.switchToHttp().getRequest()\n    const token = req.params?.token || req.cookies?.token\n\n    if (!token) {\n      throw new HttpException('Forbidden', 403)\n    }\n\n    try {\n      jwt.verify(token, this.configService.get('env.SECRET'))\n      return true\n    } catch {\n      throw new HttpException('Unauthorized', 401)\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCreative Commons Attribution-NonCommercial 4.0 International License\nCopyright (c) 2024 Miguel Zacca\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in the \nSoftware without restriction, including without limitation the rights to use, copy, \nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \nsubject to the following conditions:\n\nAttribution: You must give appropriate credit, provide a link to the license, \nand indicate if changes were made. You may do so in any reasonable manner, but \nnot in any way that suggests the licensor endorses you or your use.\n\nNonCommercial: You may not use the material for commercial purposes.\n\nNo additional restrictions: You may not apply legal terms or technological \nmeasures that legally restrict others from doing anything the license permits.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION \nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE \nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nDatabaseModule->ProductsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nFavoriteRepository \n\nFavoriteRepository \n\nFavoriteRepository  -->\n\nUserModule->FavoriteRepository \n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\n\n\nPopulateProductsService \n\nPopulateProductsService \n\nPopulateProductsService  -->\n\nAppModule->PopulateProductsService \n\n\n\n\n\nPopulateProductsService\n\nPopulateProductsService\n\nAppModule -->\n\nPopulateProductsService->AppModule\n\n\n\n\n\nRmUnverifiedUsers\n\nRmUnverifiedUsers\n\nAppModule -->\n\nRmUnverifiedUsers->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\nUserModule -->\n\nCommonModule->UserModule\n\n\n\n\n\nCommonServices \n\nCommonServices \n\nCommonServices  -->\n\nCommonModule->CommonServices \n\n\n\n\n\nAuthServices\n\nAuthServices\n\nAuthModule -->\n\nAuthServices->AuthModule\n\n\n\n\n\nEmailVerifyUseCase\n\nEmailVerifyUseCase\n\nAuthModule -->\n\nEmailVerifyUseCase->AuthModule\n\n\n\n\n\nLoginUseCase\n\nLoginUseCase\n\nAuthModule -->\n\nLoginUseCase->AuthModule\n\n\n\n\n\nPasswdRecoveryUseCase\n\nPasswdRecoveryUseCase\n\nAuthModule -->\n\nPasswdRecoveryUseCase->AuthModule\n\n\n\n\n\nRegisterUseCase\n\nRegisterUseCase\n\nAuthModule -->\n\nRegisterUseCase->AuthModule\n\n\n\n\n\nCommonServices\n\nCommonServices\n\nCommonModule -->\n\nCommonServices->CommonModule\n\n\n\n\n\nGetProductsUseCase\n\nGetProductsUseCase\n\nProductsModule -->\n\nGetProductsUseCase->ProductsModule\n\n\n\n\n\nProductsRepository\n\nProductsRepository\n\nProductsModule -->\n\nProductsRepository->ProductsModule\n\n\n\n\n\nProductsServices\n\nProductsServices\n\nProductsModule -->\n\nProductsServices->ProductsModule\n\n\n\n\n\nChangePasswdUseCase\n\nChangePasswdUseCase\n\nUserModule -->\n\nChangePasswdUseCase->UserModule\n\n\n\n\n\nDeleteUserUseCase\n\nDeleteUserUseCase\n\nUserModule -->\n\nDeleteUserUseCase->UserModule\n\n\n\n\n\nFavoriteRepository\n\nFavoriteRepository\n\nUserModule -->\n\nFavoriteRepository->UserModule\n\n\n\n\n\nGetFavoritesUseCase\n\nGetFavoritesUseCase\n\nUserModule -->\n\nGetFavoritesUseCase->UserModule\n\n\n\n\n\nGetUserUseCase\n\nGetUserUseCase\n\nUserModule -->\n\nGetUserUseCase->UserModule\n\n\n\n\n\nToggleFavoriteUseCase\n\nToggleFavoriteUseCase\n\nUserModule -->\n\nToggleFavoriteUseCase->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    18 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    8 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : The Develop Store API.\n        \n            License : CC-BY-NC-4.0\n        \n            Author : Miguel Zacca\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configuration   (src/.../configuration.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            favoriteProviders   (src/.../favorite.providers.ts)\n                        \n                        \n                            productsProviders   (src/.../products.providers.ts)\n                        \n                        \n                            userProviders   (src/.../user.providers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => ({\n  get env() {\n    return {\n      NODE_ENV: process.env.NODE_ENV,\n      PORT: Number(process.env.PORT),\n      ORIGIN_ADDR: process.env.ORIGIN_ADDR,\n      API_ADDR: process.env.API_ADDR,\n      SMTP_USER: process.env.SMTP_USER,\n      SMTP_PASS: process.env.SMTP_PASS,\n      AUTH_DURATION_DAYS: Number(process.env.AUTH_DURATION_DAYS),\n      SECRET: process.env.SECRET,\n    } as Env\n  },\n\n  get cors() {\n    return {\n      origin: [this.env.ORIGIN_ADDR, this.env.API_ADDR],\n      methods: ['GET', 'POST', 'PATCH', 'DELETE'],\n      credentials: true,\n    } as CorsOptions\n  },\n\n  get cookie() {\n    return {\n      httpOnly: true,\n      secure: true,\n      maxAge: this.env.AUTH_DURATION_DAYS * 24 * 60 * 60 * 1000,\n      sameSite: 'none',\n    } as CookieOptions\n  },\n\n  get serverMsg() {\n    return {\n      great: 'Welcome!',\n      err: 'A server occurred error. Please try later.',\n      denied: 'Access denied.',\n      invalidToken: 'Invalid token.',\n    }\n  },\n\n  get authMsg() {\n    return {\n      ok: 'Authentication successful.',\n      incorrect: 'Incorrect password.',\n      emailExists: 'This email already exists.',\n      noEmailToken: 'No email token provided.',\n      noVerifiedEmail: 'No email verified.',\n      recoveryEmail: 'Recovery email successfully send.',\n    }\n  },\n\n  get userMsg() {\n    return {\n      notFound: 'User not found.',\n      created: 'User created successfully.',\n      deleted: 'User deleted successfully.',\n      updated: 'User updated successfully.',\n    }\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'SEQUELIZE',\n    useFactory: async () => {\n      const sequelize = new Sequelize({\n        dialect: 'sqlite',\n        storage: './.data/database.db',\n        logging: false,\n      })\n      sequelize.addModels([User, Products, Favorites])\n      await sequelize.sync()\n      return sequelize\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/user/providers/favorite.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        favoriteProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'FAVORITES',\n    useValue: Favorites,\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/products/products.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        productsProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'PRODUCTS',\n    useValue: Products,\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/user/providers/user.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'USER',\n    useValue: User,\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}

var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.554,1,2.674]],["body/modules/AppModule.html",[0,2.332,1,5.357,2,1.783,3,1.889,4,2.144,5,2.144,6,1.889,7,3.231,8,3.231,9,3.052,10,3.052,11,3.052,12,3.052,13,4.372,14,0.017,15,3.812,16,4.372,17,4.07,18,4.472,19,4.372,20,2.994,21,2.144,22,2.008,23,0.158,24,0.14,25,0.14,26,3.538,27,3.216,28,0.33,29,0.337,30,3.538,31,3.052,32,2.732,33,2.493,34,1.052,35,2.732,36,3.538,37,2.732,38,3.538,39,3.538,40,3.538,41,3.538,42,3.482,43,3.538,44,2.994,45,2.732,46,3.538,47,3.538,48,3.538,49,3.538,50,4.941,51,3.538,52,3.538,53,2.732,54,3.538,55,3.538,56,2.008,57,3.538,58,3.538,59,0.158,60,0.049,61,0.011,62,0.011]],["title/controllers/AuthControllers.html",[63,2.154,64,2.674]],["body/controllers/AuthControllers.html",[14,0.017,23,0.115,24,0.102,25,0.102,28,0.295,29,0.245,34,0.767,44,1.562,45,1.991,59,0.115,60,0.036,61,0.009,62,0.009,63,1.463,64,2.764,65,1.463,66,2.224,67,1.991,68,1.991,69,0.156,70,0.618,71,1.126,72,3.383,73,3.383,74,3.383,75,3.383,76,4.746,77,2.578,78,1.514,79,5.473,80,5.194,81,2.337,82,3.922,83,3.922,84,0.615,85,2.578,86,1.038,87,0.899,88,0.408,89,1.038,90,2.876,91,0.99,92,2.578,93,3.214,94,3.922,95,2.578,96,4.922,97,2.224,98,3.922,99,3.922,100,2.578,101,1.531,102,1.775,103,2.578,104,2.831,105,3.922,106,2.578,107,2.578,108,5.303,109,3.922,110,2.578,111,2.578,112,2.224,113,1.562,114,1.991,115,0.785,116,2.578,117,1.817,118,2.224,119,2.224,120,1.991,121,1.562,122,2.876,123,2.224,124,1.768,125,1.991,126,1.3,127,2.578,128,2.578,129,0.469,130,0.649,131,2.578,132,2.53,133,1.108,134,2.578,135,2.578,136,2.578,137,2.831,138,2.673,139,4.096,140,2.578,141,2.578,142,0.714,143,2.148,144,2.578,145,2.578,146,0.447,147,3.922,148,2.578,149,3.922,150,3.922,151,2.224,152,2.578,153,2.578,154,2.578,155,2.578,156,2.578,157,2.224,158,2.578,159,2.578,160,2.578]],["title/modules/AuthModule.html",[0,1.554,13,2.47]],["body/modules/AuthModule.html",[0,2.421,2,1.914,3,2.028,4,2.302,5,2.302,6,2.028,7,3.355,8,2.156,13,5.008,14,0.017,17,4.16,20,3.145,21,2.302,22,2.156,23,0.17,24,0.15,25,0.15,27,3.378,28,0.328,29,0.362,33,3.657,34,1.129,59,0.17,60,0.053,61,0.011,62,0.011,64,4.166,65,2.945,122,4.16,123,3.277,161,3.277,162,3.277,163,3.277,164,4.16,165,4.16,166,4.16,167,4.16,168,3.896,169,3.798,170,3.798,171,3.277,172,3.277,173,3.277,174,3.277,175,3.798,176,3.277]],["title/injectables/AuthServices.html",[122,2.299,177,0.17]],["body/injectables/AuthServices.html",[14,0.017,23,0.144,24,0.128,25,0.128,28,0.307,29,0.307,59,0.144,60,0.045,61,0.01,62,0.01,69,0.195,70,0.73,71,1.143,72,3.996,73,3.996,74,3.996,75,3.996,78,1.424,84,0.676,86,1.14,87,0.987,88,0.448,89,1.14,91,1.027,93,3.585,97,3.996,101,2.114,102,2.678,104,3.159,112,2.786,115,1.078,120,2.494,122,2.807,129,0.843,130,1.036,142,1.077,146,0.56,165,4.069,166,4.069,167,4.069,168,3.811,171,2.786,172,2.786,173,2.786,174,2.786,177,0.207,178,0.88,179,2.786,180,2.786,181,2.951,182,3.229,183,4.632,184,3.229,185,2.494,186,4.632,187,3.229,188,3.015,189,3.229,190,4.632,191,3.229,192,2.102,193,3.229,194,3.229,195,3.229,196,3.229,197,3.229]],["title/classes/ChangePasswdBody.html",[60,0.053,198,2.674]],["body/classes/ChangePasswdBody.html",[14,0.017,23,0.232,24,0.206,25,0.206,28,0.284,59,0.232,60,0.089,61,0.014,62,0.014,69,0.314,78,1.388,81,2.126,84,0.56,88,0.371,126,2.616,198,4.477,199,2.126,200,4.477,201,2.064,202,2.954,203,4.008,204,4.906,205,5.19,206,4.135,207,4.135,208,3.378,209,3.145,210,4.008]],["title/injectables/ChangePasswdUseCase.html",[177,0.17,211,2.299]],["body/injectables/ChangePasswdUseCase.html",[14,0.017,23,0.176,24,0.156,25,0.156,28,0.288,29,0.374,34,1.169,59,0.176,60,0.055,61,0.012,62,0.012,69,0.238,70,0.837,71,0.948,78,1.515,84,0.573,86,0.967,87,0.837,88,0.38,89,0.967,91,0.682,101,2.074,115,0.995,124,2.584,129,0.967,130,0.879,133,1.346,143,2.405,146,1.118,177,0.237,178,1.071,202,1.692,211,3.22,212,3.393,213,2.176,214,1.876,215,2.642,216,3.933,217,4.104,218,5.191,219,3.933,220,2.772,221,3.458,222,1.501,223,2.1,224,2.56,225,1.876,226,1.982,227,1.982,228,2.56,229,4.104,230,3.037,231,5.313,232,3.933,233,3.933,234,2.772,235,2.772]],["title/modules/CommonModule.html",[0,1.554,164,2.299]],["body/modules/CommonModule.html",[0,2.718,2,2.424,3,2.568,4,2.915,5,2.915,6,2.568,7,3.765,8,3.765,14,0.017,20,3.672,21,2.915,22,2.73,23,0.215,24,0.191,25,0.191,27,3.131,28,0.296,29,0.458,33,4.271,34,1.43,59,0.215,60,0.067,61,0.013,62,0.013,164,4.509,181,3.502,236,4.149,237,4.149,238,4.149,239,4.81,240,4.81]],["title/injectables/CommonServices.html",[177,0.17,181,1.718]],["body/injectables/CommonServices.html",[14,0.017,23,0.154,24,0.137,25,0.137,28,0.273,29,0.329,34,1.027,59,0.154,60,0.048,61,0.011,62,0.011,68,3.752,69,0.209,70,0.765,71,0.885,78,1.552,84,0.658,86,1.022,87,0.96,88,0.402,89,1.022,90,2.448,91,0.843,115,0.571,124,2.483,129,0.628,130,1.009,133,0.721,142,0.628,146,0.599,177,0.217,178,0.941,181,2.199,201,1.579,214,1.648,222,1.212,241,2.667,242,4.848,243,4.858,244,4.848,245,3.453,246,4.191,247,5.261,248,3.453,249,2.093,250,3.453,251,4.298,252,3.453,253,2.09,254,2.979,255,2.979,256,4.191,257,3.752,258,4.191,259,3.424,260,4.191,261,3.424,262,2.199,263,4.848,264,4.191,265,4.191,266,3.453,267,1.96,268,4.191,269,1.844,270,3.752,271,0.789,272,3.405,273,3.405,274,2.093,275,2.979,276,2.979,277,1.96,278,2.979,279,2.979,280,2.667,281,2.667,282,2.979,283,2.979]],["title/modules/DatabaseModule.html",[0,1.554,15,2.154]],["body/modules/DatabaseModule.html",[0,2.703,2,2.786,7,3.137,8,3.137,14,0.017,15,3.745,23,0.247,24,0.219,25,0.219,28,0.295,29,0.526,59,0.247,60,0.077,61,0.014,62,0.014,284,5.527,285,5.449,286,5.527]],["title/injectables/DeleteUserUseCase.html",[177,0.17,287,2.299]],["body/injectables/DeleteUserUseCase.html",[14,0.017,23,0.19,24,0.168,25,0.168,28,0.279,29,0.404,34,1.262,59,0.19,60,0.059,61,0.012,62,0.012,69,0.257,70,0.881,71,0.985,84,0.603,86,1.017,87,0.881,88,0.4,89,1.017,91,0.737,115,1.034,124,2.641,129,1.017,130,0.925,133,1.168,143,2.531,146,0.97,177,0.25,178,1.156,213,2.29,214,2.025,215,2.693,220,2.992,222,1.395,223,2.266,224,2.763,225,2.025,226,2.139,227,2.139,228,2.763,287,3.388,288,3.662,289,4.244,290,3.94,291,1.63,292,4.244,293,2.083,294,4.244]],["title/injectables/EmailVerifyUseCase.html",[165,2.299,177,0.17]],["body/injectables/EmailVerifyUseCase.html",[14,0.017,23,0.186,24,0.165,25,0.165,28,0.277,29,0.396,34,1.237,59,0.186,60,0.058,61,0.012,62,0.012,69,0.252,70,0.869,71,0.975,78,1.352,84,0.595,86,1.004,87,0.869,88,0.395,89,1.004,91,0.722,101,2.154,115,1.024,124,2.626,129,1.004,130,0.912,133,1.152,142,0.757,143,2.497,146,0.957,165,3.343,177,0.247,178,1.133,213,2.259,214,1.984,215,2.679,217,4.26,222,1.376,223,2.221,225,1.984,226,2.096,227,2.096,262,1.883,295,3.588,296,4.159,297,4.159,298,2.707,299,4.159,300,3.588,301,4.759,302,4.159]],["title/interfaces/Env.html",[271,0.867,303,2.674]],["body/interfaces/Env.html",[14,0.017,23,0.137,24,0.122,25,0.122,28,0.2,42,2.165,53,2.372,59,0.137,61,0.01,62,0.01,69,0.186,70,0.484,78,1.637,88,0.485,90,2.252,101,2.257,117,2.165,121,1.861,132,1.466,138,1.548,142,1.166,146,0.533,201,1.452,222,1.442,259,4.329,261,2.165,262,2.383,271,0.701,291,1.671,303,4.074,304,1.466,305,2.372,306,5.299,307,5.299,308,5.299,309,5.299,310,5.299,311,5.299,312,5.299,313,3.854,314,3.45,315,3.854,316,2.65,317,2.65,318,2.65,319,2.65,320,2.65,321,2.65,322,2.65,323,2.65,324,2.65,325,2.65,326,2.65,327,2.372,328,1.999,329,2.65,330,2.372,331,2.65,332,2.65,333,2.65,334,3.45,335,2.372,336,2.65,337,2.65,338,2.65,339,2.65,340,2.65,341,2.165,342,2.372,343,2.372,344,2.165,345,2.372,346,3.854,347,2.65,348,2.65,349,2.65,350,2.65,351,2.65,352,2.65,353,2.65,354,3.854,355,2.372,356,2.165,357,2.65,358,2.65,359,2.65,360,2.372,361,2.65,362,2.65,363,2.65,364,2.372,365,4.987,366,2.65,367,2.65,368,2.65,369,2.65,370,3.854,371,3.854,372,3.854]],["title/injectables/FavoriteRepository.html",[177,0.17,373,2.026]],["body/injectables/FavoriteRepository.html",[14,0.017,23,0.136,24,0.121,25,0.121,28,0.258,29,0.291,59,0.136,60,0.043,61,0.01,62,0.01,69,0.185,70,0.7,71,1.131,84,0.661,86,1.115,87,0.965,88,0.413,89,1.115,91,1,115,0.505,129,0.809,130,0.735,133,1.095,142,0.809,146,0.53,177,0.199,178,0.831,188,1.987,222,1.109,253,3.09,271,0.697,291,2.013,293,1.656,373,2.374,374,2.357,375,3.836,376,3.836,377,3.134,378,3.836,379,3.052,380,2.977,381,3.052,382,3.836,383,4.526,384,3.015,385,3.052,386,3.051,387,4.526,388,3.052,389,4.526,390,3.052,391,4.526,392,3.052,393,2.241,394,2.633,395,1.538,396,1.582,397,1.732,398,3.134,399,1.382,400,2.633,401,2.122,402,1.732,403,2.633,404,2.633,405,2.633,406,1.732,407,2.151,408,1.63,409,2.357,410,2.633]],["title/classes/Favorites.html",[60,0.053,393,1.913]],["body/classes/Favorites.html",[14,0.017,23,0.198,24,0.176,25,0.176,28,0.286,56,2.52,59,0.198,60,0.062,61,0.013,62,0.013,69,0.269,81,2.358,84,0.621,88,0.484,199,1.819,201,1.871,222,1.436,262,3.061,291,1.762,384,2.617,386,3.049,393,3.221,395,2.238,396,2.048,397,2.52,408,3.074,411,3.831,412,4.968,413,3.268,414,4.765,415,4.44,416,4.44,417,4.504,418,3.129,419,4.504,420,3.748,421,1.911,422,2.691,423,3.129,424,3.429,425,3.129,426,4.058]],["title/injectables/GetFavoritesUseCase.html",[177,0.17,427,2.299]],["body/injectables/GetFavoritesUseCase.html",[14,0.017,23,0.212,24,0.188,25,0.188,28,0.269,29,0.452,59,0.212,60,0.066,61,0.013,62,0.013,69,0.287,70,0.946,71,1.039,84,0.648,86,1.093,87,0.946,88,0.43,89,1.093,91,0.824,102,2.149,115,0.785,129,0.864,130,0.785,133,0.991,142,0.864,177,0.269,178,1.293,213,2.461,274,2.876,290,4.235,291,1.719,293,1.768,373,3.9,427,3.642,428,4.095,429,4.095,430,4.746,431,4.746,432,3.666,433,4.746]],["title/injectables/GetProductsUseCase.html",[177,0.17,434,2.154]],["body/injectables/GetProductsUseCase.html",[14,0.017,23,0.201,24,0.178,25,0.178,28,0.259,29,0.428,59,0.201,60,0.063,61,0.013,62,0.013,69,0.272,70,0.914,71,1.012,78,1.573,84,0.626,86,1.056,87,0.914,88,0.415,89,1.056,91,0.78,102,2.035,115,0.744,129,0.818,130,0.744,142,1.17,177,0.259,178,1.224,213,2.377,249,3.517,274,2.724,434,3.294,435,3.878,436,4.495,437,4.087,438,4.495,439,5.804,440,3.627,441,4.495,442,3.778,443,3.878,444,4.495,445,4.495,446,4.495]],["title/injectables/GetShoppingCartUseCase.html",[177,0.17,447,2.299]],["body/injectables/GetShoppingCartUseCase.html",[14,0.017,23,0.211,24,0.187,25,0.187,28,0.267,29,0.449,59,0.211,60,0.066,61,0.013,62,0.013,69,0.285,70,0.943,71,1.035,84,0.646,86,1.089,87,0.943,88,0.428,89,1.089,91,0.818,102,2.135,115,0.99,129,1.089,130,0.78,133,0.985,142,0.858,177,0.267,178,1.284,213,2.451,290,4.218,291,1.714,293,1.756,447,3.627,448,4.068,449,4.068,450,3.894,451,4.715,452,4.715,453,3.642,454,4.715]],["title/injectables/GetUserUseCase.html",[177,0.17,455,2.299]],["body/injectables/GetUserUseCase.html",[14,0.017,23,0.189,24,0.167,25,0.167,28,0.279,29,0.402,34,1.255,59,0.189,60,0.059,61,0.012,62,0.012,69,0.255,70,0.877,71,0.982,84,0.601,86,1.013,87,0.877,88,0.399,89,1.013,91,0.732,102,1.91,115,1.031,124,2.637,129,1.013,130,0.921,133,0.881,142,0.768,143,2.521,146,0.967,177,0.249,178,1.149,213,2.281,214,2.013,215,2.689,220,2.974,222,1.555,223,2.253,224,2.747,225,2.013,226,2.127,227,2.127,228,2.747,262,1.91,290,3.925,291,1.625,293,2.074,455,3.375,456,3.641,457,4.22,458,4.22]],["title/classes/HandleError.html",[60,0.053,113,2.299]],["body/classes/HandleError.html",[14,0.017,23,0.211,24,0.187,25,0.187,28,0.211,29,0.45,32,5.085,59,0.211,60,0.066,61,0.013,62,0.013,69,0.286,70,0.945,84,0.51,86,0.861,87,0.745,88,0.339,89,0.861,91,0.821,113,3.634,132,2.257,138,3.023,146,0.821,199,1.938,225,3.142,226,2.385,341,3.334,342,3.654,343,3.654,344,3.334,345,3.654,459,4.082,460,5.174,461,5.997,462,4.731,463,4.082,464,3.654,465,4.731,466,4.285,467,4.731,468,4.082,469,4.731,470,4.731,471,4.731,472,3.334,473,4.731,474,4.731]],["title/classes/HttpExceptionFilter.html",[60,0.053,475,2.931]],["body/classes/HttpExceptionFilter.html",[14,0.017,23,0.188,24,0.167,25,0.167,28,0.248,29,0.401,59,0.188,60,0.059,61,0.012,62,0.012,69,0.255,70,0.875,78,1.214,79,3.25,80,3.25,84,0.454,86,0.766,87,0.663,88,0.301,89,0.766,91,0.73,121,2.55,137,3.324,142,0.766,143,2.998,146,1.227,199,1.723,227,2.121,257,4.808,399,2.516,401,2.008,463,3.63,464,5.114,475,4.293,476,3.63,477,6.225,478,5.558,479,6.622,480,4.207,481,4.207,482,4.207,483,4.207,484,4.207,485,4.207,486,4.207,487,6.225,488,4.207,489,6.225,490,4.207,491,5.558,492,4.207,493,4.207,494,4.207,495,4.207]],["title/interfaces/IFavoritesRepository.html",[271,0.867,398,2.674]],["body/interfaces/IFavoritesRepository.html",[14,0.017,23,0.142,24,0.126,25,0.126,28,0.263,29,0.303,59,0.142,60,0.044,61,0.01,62,0.01,69,0.192,70,0.721,71,0.925,84,0.634,86,1.069,87,0.925,88,0.421,89,1.069,91,1.02,115,0.526,129,0.579,130,0.758,133,1.121,142,0.833,146,0.552,177,0.205,188,2.07,222,1.143,253,3.114,271,0.726,291,2.021,293,1.706,304,1.517,373,1.698,374,2.456,375,3.952,376,3.952,377,3.228,378,3.952,380,1.805,382,2.743,383,4.632,384,3.035,386,3.094,387,4.632,389,4.632,391,4.632,393,2.309,394,2.743,395,1.603,396,1.629,397,1.805,398,3.784,399,1.439,400,2.743,401,2.186,402,1.805,403,2.743,404,2.743,405,2.743,406,1.805,407,2.241,408,1.698,409,2.456,410,2.743,496,3.18,497,3.18,498,3.18,499,3.18]],["title/interfaces/IShoppingCartRepository.html",[271,0.867,500,2.674]],["body/interfaces/IShoppingCartRepository.html",[14,0.017,23,0.141,24,0.125,25,0.125,28,0.262,29,0.301,59,0.141,60,0.044,61,0.01,62,0.01,69,0.192,70,0.719,71,0.923,84,0.632,86,1.067,87,0.923,88,0.42,89,1.067,91,1.017,115,0.524,129,0.576,130,0.755,133,1.118,142,0.831,146,0.549,177,0.204,188,2.061,222,1.139,253,3.112,271,0.723,291,2.02,293,1.701,304,1.51,380,1.797,384,3.033,386,3.185,395,1.596,396,1.624,397,1.797,399,1.433,401,2.179,402,1.797,406,1.797,407,2.231,408,1.69,450,1.69,500,3.775,501,2.445,502,3.939,503,3.939,504,4.621,505,3.218,506,4.621,507,3.166,508,4.621,509,3.166,510,3.939,511,3.166,512,4.621,513,3.166,514,2.438,515,2.731,516,2.731,517,2.731,518,2.731,519,2.731,520,2.731,521,2.445,522,2.731]],["title/interfaces/IUserRepository.html",[271,0.867,523,2.47]],["body/interfaces/IUserRepository.html",[14,0.017,23,0.129,24,0.114,25,0.114,28,0.25,29,0.274,59,0.19,60,0.04,61,0.009,62,0.009,69,0.174,70,0.67,71,0.942,78,0.628,84,0.645,86,1.088,87,0.942,88,0.428,89,1.088,91,1.038,104,3.192,115,0.476,129,0.523,130,0.476,133,1.249,142,0.774,146,0.499,177,0.19,202,1.237,215,1.071,222,1.819,234,3.572,235,3.948,249,1.743,253,3.137,271,0.972,291,1.559,293,1.586,304,1.372,328,2.771,380,1.632,395,1.45,399,1.302,401,2.031,402,1.632,406,1.632,413,2.416,421,1.237,523,3.298,524,2.027,525,3.672,526,4.326,527,3.672,528,4.422,529,3.914,530,2.876,531,2.481,532,3.914,533,2.876,534,3.914,535,2.481,536,4.326,537,4.214,538,3.646,539,2.876,540,3.914,541,3.914,542,2.876,543,2.481,544,2.876,545,3.288,546,2.221,547,3.288,548,2.221,549,3.914,550,2.221,551,1.872,552,2.221,553,2.221,554,2.221,555,2.221,556,2.221,557,2.221,558,2.221]],["title/classes/LoginBody.html",[60,0.053,93,2.299]],["body/classes/LoginBody.html",[14,0.017,23,0.217,24,0.192,25,0.192,28,0.273,59,0.217,60,0.085,61,0.013,62,0.013,69,0.294,78,1.527,81,2.498,84,0.658,88,0.437,93,3.695,101,2.602,126,2.449,199,1.99,201,1.982,202,2.868,203,3.752,204,4.71,206,4.338,207,4.338,208,3.162,209,2.944,210,3.752,559,4.191,560,4.191,561,4.191,562,4.858,563,4.858,564,5.261,565,4.191,566,4.191]],["title/injectables/LoginUseCase.html",[166,2.299,177,0.17]],["body/injectables/LoginUseCase.html",[14,0.017,23,0.158,24,0.14,25,0.14,28,0.3,29,0.336,34,1.049,59,0.158,60,0.049,61,0.011,62,0.011,69,0.214,70,0.777,71,0.896,84,0.532,86,0.897,87,0.777,88,0.353,89,0.897,90,2.486,91,0.612,93,3.731,101,1.926,102,1.598,115,0.94,120,2.726,124,2.5,129,0.897,130,0.816,133,1.03,142,0.642,143,3.038,146,1.165,166,2.989,177,0.22,178,0.961,202,1.519,213,2.329,214,1.684,215,2.566,221,3.21,222,1.23,223,1.884,224,2.297,225,2.713,226,2.866,227,2.866,228,2.297,267,2.003,269,1.884,277,2.003,293,1.315,298,2.297,300,3.045,301,3.045,468,3.045,567,3.045,568,3.529,569,3.045,570,3.529,571,3.529,572,4.932,573,3.529,574,3.529,575,3.529,576,2.487,577,3.529,578,2.487,579,3.529,580,3.529]],["title/injectables/PasswdRecoveryUseCase.html",[167,2.299,177,0.17]],["body/injectables/PasswdRecoveryUseCase.html",[14,0.017,23,0.17,24,0.15,25,0.15,28,0.297,29,0.362,34,1.129,59,0.17,60,0.053,61,0.011,62,0.011,69,0.23,70,0.817,71,0.931,78,1.291,84,0.56,86,0.944,87,0.817,88,0.371,89,0.944,91,0.659,101,2.48,115,1.051,124,2.557,129,0.944,130,0.978,133,0.793,143,2.349,146,1.102,167,3.145,177,0.232,178,1.034,181,3.181,192,2.472,213,2.126,214,1.812,215,2.618,217,4.008,223,2.028,224,2.472,225,1.812,226,1.914,227,1.914,228,2.472,267,2.156,269,2.028,272,2.302,273,2.302,277,2.156,298,2.472,355,2.933,364,2.933,576,2.677,578,2.677,581,3.277,582,3.798,583,3.798,584,5.189,585,3.798,586,2.933,587,5.189,588,3.798,589,3.798,590,2.933]],["title/injectables/PopulateProductsService.html",[18,2.299,177,0.17]],["body/injectables/PopulateProductsService.html",[14,0.017,18,2.716,23,0.296,24,0.122,25,0.122,28,0.259,29,0.294,34,0.917,59,0.138,60,0.043,61,0.01,62,0.01,69,0.187,70,0.706,71,0.831,78,1.265,84,0.625,86,0.561,87,0.486,88,0.321,89,0.561,91,0.778,115,0.51,124,2.391,129,0.561,130,1.095,132,1.472,133,0.936,137,1.647,138,1.555,142,0.815,146,0.916,177,0.2,178,0.84,201,1.456,208,3.435,214,1.472,271,0.704,274,1.869,291,1.168,396,2.06,440,3.427,472,2.174,591,2.382,592,4.997,593,4.473,594,4.481,595,3.085,596,4.336,597,3.085,598,2.661,599,3.461,600,2.382,601,4.957,602,4.957,603,4.957,604,4.957,605,3.866,606,2.661,607,4.553,608,4.553,609,2.661,610,4.553,611,5.537,612,4.553,613,4.553,614,2.661,615,2.661,616,2.661,617,2.382,618,2.661,619,2.661,620,2.661,621,2.661,622,2.661,623,3.866,624,2.661,625,2.174,626,3.866,627,2.661,628,2.661,629,2.661,630,2.661]],["title/interfaces/ProductEl.html",[271,0.867,596,2.674]],["body/interfaces/ProductEl.html",[14,0.017,18,1.869,23,0.314,24,0.122,25,0.122,28,0.259,29,0.294,34,0.917,59,0.138,60,0.043,61,0.01,62,0.01,69,0.187,71,0.486,78,1.572,88,0.459,115,0.51,124,1.966,130,0.873,132,1.472,133,0.936,137,1.647,138,1.555,142,0.815,146,0.916,177,0.2,201,1.456,208,3.435,271,0.704,274,1.869,291,1.673,304,1.472,396,1.594,440,3.693,472,2.174,591,2.382,592,2.661,593,2.382,596,4.082,598,2.661,599,3.461,600,2.382,601,5.342,602,5.342,603,5.342,604,5.342,605,3.866,606,2.661,607,4.553,608,4.553,609,2.661,610,4.553,611,5.537,612,4.553,613,4.553,614,2.661,615,2.661,616,2.661,617,2.382,618,2.661,619,2.661,620,2.661,621,2.661,622,2.661,623,3.866,624,2.661,625,2.174,626,3.866,627,2.661,628,2.661,629,2.661,630,2.661]],["title/interfaces/ProductRepositoryInterface.html",[271,0.867,631,2.674]],["body/interfaces/ProductRepositoryInterface.html",[14,0.017,23,0.172,24,0.153,25,0.153,28,0.266,29,0.367,59,0.172,60,0.054,61,0.011,62,0.011,69,0.233,70,0.826,71,0.939,78,1.569,84,0.643,86,0.954,87,0.826,88,0.375,89,0.954,91,1.034,115,0.638,129,0.702,130,0.638,142,1.084,177,0.234,253,3.133,271,0.881,304,1.841,396,1.866,399,1.747,401,1.841,421,2.257,437,2.19,440,2.801,442,2.512,631,4.2,632,2.98,633,5.77,634,4.526,635,4.526,636,3.859,637,5.141,638,3.859,639,5.141,640,3.859,641,2.98,642,3.329,643,3.329,644,3.329,645,5.141,646,3.329,647,4.526,648,3.329,649,4.526,650,4.526,651,3.329]],["title/classes/Products.html",[60,0.053,396,1.35]],["body/classes/Products.html",[14,0.017,23,0.261,24,0.124,25,0.124,28,0.238,56,4.135,59,0.14,60,0.044,61,0.01,62,0.01,69,0.19,78,1.489,81,2.792,84,0.735,87,0.494,88,0.529,199,1.285,201,1.474,222,1.457,262,2.643,291,1.683,293,1.985,384,1.285,393,2.686,396,1.896,408,2.423,413,3.869,414,3.198,417,4.804,418,2.212,419,3.198,420,2.953,421,1.35,422,1.902,423,2.212,424,2.424,425,2.212,426,2.212,440,2.845,601,4.116,602,4.116,603,4.116,604,4.116,652,2.707,653,4.598,654,5.744,655,6.229,656,3.138,657,3.915,658,3.138,659,3.138,660,3.138,661,3.138,662,3.138,663,3.138,664,2.707,665,3.915,666,3.138,667,3.915,668,3.138,669,3.138,670,5.037,671,4.537]],["title/controllers/ProductsControllers.html",[63,2.154,672,2.674]],["body/controllers/ProductsControllers.html",[14,0.017,23,0.189,24,0.168,25,0.168,28,0.297,29,0.403,59,0.189,60,0.059,61,0.012,62,0.012,63,2.402,65,2.402,67,3.269,69,0.256,70,0.879,71,0.983,78,1.219,81,1.734,84,0.456,86,0.77,87,0.667,88,0.447,89,0.77,91,0.734,102,1.916,113,2.565,114,3.269,115,0.923,118,5.726,125,3.269,126,2.133,129,0.77,130,0.7,132,2.019,133,0.884,137,2.26,138,2.133,139,3.269,142,0.77,146,0.968,249,2.565,396,1.505,434,3.543,440,3.333,442,4.063,672,3.933,673,3.651,674,4.814,675,4.232,676,5.58,677,4.232,678,3.269,679,4.232,680,4.232,681,4.232,682,5.58,683,4.232]],["title/modules/ProductsModule.html",[0,1.554,16,2.47]],["body/modules/ProductsModule.html",[0,2.557,2,2.133,3,2.26,4,2.565,5,2.565,6,2.26,7,3.543,8,2.402,14,0.017,15,4.021,16,4.944,20,3.381,21,2.565,22,2.402,23,0.189,24,0.168,25,0.168,27,3.632,28,0.323,29,0.403,35,3.269,59,0.189,60,0.059,61,0.012,62,0.012,65,3.167,434,4.021,437,4.021,443,3.651,672,4.4,678,3.269,684,3.651,685,3.651,686,4.232,687,4.611,688,4.232,689,4.232,690,4.232,691,4.31,692,4.232]],["title/injectables/ProductsRepository.html",[177,0.17,437,2.154]],["body/injectables/ProductsRepository.html",[14,0.017,23,0.166,24,0.147,25,0.147,28,0.261,29,0.353,59,0.166,60,0.052,61,0.011,62,0.011,69,0.224,70,0.804,71,1.137,78,1.554,84,0.678,86,1.062,87,0.92,88,0.366,89,1.062,91,1.013,115,0.614,129,0.929,130,0.614,142,1.062,177,0.228,178,1.011,253,3.107,271,0.847,396,1.816,399,1.68,401,1.77,421,2.197,437,2.898,440,2.727,442,2.415,631,3.599,632,2.866,633,5.691,634,4.406,635,4.406,637,5.038,639,5.038,641,2.866,642,3.201,643,3.201,644,4.406,645,5.038,646,3.201,647,4.406,648,3.201,649,4.406,650,4.406,651,3.201,693,3.71,694,3.71,695,3.71,696,3.71,697,3.71]],["title/injectables/ProductsServices.html",[177,0.17,687,2.47]],["body/injectables/ProductsServices.html",[14,0.017,23,0.205,24,0.182,25,0.182,28,0.263,29,0.438,59,0.205,60,0.064,61,0.013,62,0.013,69,0.278,70,0.927,71,1.023,78,1.582,84,0.635,86,1.071,87,0.927,88,0.421,89,1.071,91,0.798,102,2.08,115,0.974,129,1.071,130,0.76,142,0.836,177,0.263,178,1.252,249,3.567,434,4.111,440,3.657,442,2.991,674,5.079,678,3.549,687,3.832,698,3.965,699,4.595,700,4.595,701,5.887,702,4.595,703,4.595]],["title/classes/RegisterBody.html",[60,0.053,104,2.026]],["body/classes/RegisterBody.html",[14,0.017,23,0.205,24,0.182,25,0.182,28,0.263,59,0.205,60,0.082,61,0.013,62,0.013,69,0.278,78,1.582,81,2.661,84,0.701,88,0.465,101,2.536,104,3.143,126,2.316,199,1.882,201,1.913,202,2.795,203,3.549,204,4.547,206,4.458,207,4.458,208,2.991,209,2.785,210,3.549,560,3.965,561,3.965,564,5.079,565,3.965,566,3.965,704,3.965,705,4.578,706,4.595,707,4.595,708,4.595,709,5.887,710,4.595,711,4.595]],["title/injectables/RegisterUseCase.html",[168,2.154,177,0.17]],["body/injectables/RegisterUseCase.html",[14,0.017,23,0.155,24,0.138,25,0.138,28,0.299,29,0.331,34,1.034,59,0.155,60,0.049,61,0.011,62,0.011,69,0.21,70,0.769,71,0.889,78,1.232,84,0.527,86,0.888,87,0.769,88,0.349,89,0.888,91,0.604,101,2.678,115,1.012,124,2.488,129,0.888,130,0.933,133,1.277,143,2.21,146,1.159,168,2.771,177,0.218,178,0.947,181,3.106,185,2.686,192,2.264,202,2.427,213,2.311,214,1.66,215,2.556,221,3.178,223,1.857,225,1.66,226,1.753,227,1.753,229,3.771,230,2.686,267,1.974,269,1.857,271,0.794,272,2.108,273,2.108,277,1.974,298,2.264,356,3.441,569,3.001,576,2.451,578,2.451,586,2.686,590,2.686,705,3.976,712,2.686,713,3.478,714,4.311,715,3.478,716,3.001,717,3.001,718,4.212,719,3.001,720,3.001,721,4.212,722,3.001,723,3.001,724,3.001]],["title/interfaces/RegisterUserCaseProps.html",[271,0.867,714,2.674]],["body/interfaces/RegisterUserCaseProps.html",[14,0.017,23,0.161,24,0.143,25,0.143,28,0.302,29,0.344,34,1.073,59,0.161,60,0.05,61,0.011,62,0.011,69,0.218,71,0.568,78,1.567,88,0.412,101,2.837,115,1.028,124,2.143,129,0.657,130,0.952,133,1.298,143,2.268,146,1.173,168,2.048,177,0.224,181,2.605,185,2.787,192,2.349,201,1.628,202,2.908,213,1.478,215,2.143,221,3.26,223,1.927,225,1.722,226,1.819,227,1.819,229,3.869,230,2.787,267,2.048,269,1.927,271,0.824,272,2.187,273,2.187,277,2.048,298,2.349,304,1.722,356,3.531,576,2.543,578,2.543,586,2.787,590,2.787,705,4.763,712,2.787,714,4.055,716,3.113,717,3.113,718,4.322,719,3.113,720,3.113,721,4.322,722,3.113,723,3.113,724,3.113]],["title/injectables/RmUnverifiedUsers.html",[19,2.47,177,0.17]],["body/injectables/RmUnverifiedUsers.html",[14,0.017,19,3.733,23,0.197,24,0.175,25,0.175,28,0.301,29,0.42,37,3.408,56,2.505,59,0.197,60,0.062,61,0.012,62,0.012,69,0.267,70,0.903,71,1.003,81,1.808,84,0.476,91,0.766,132,2.106,133,0.922,137,2.356,138,2.224,146,0.766,177,0.256,178,1.202,222,1.101,334,4.429,335,3.408,421,1.899,466,2.872,472,3.11,551,2.872,625,4.042,641,3.408,725,3.807,726,6.745,727,5.735,728,4.413,729,4.413,730,4.413,731,5.735,732,4.413,733,3.807,734,4.413,735,4.413,736,4.413]],["title/interfaces/SendEmailProps.html",[251,2.674,271,0.867]],["body/interfaces/SendEmailProps.html",[14,0.017,23,0.179,24,0.158,25,0.158,28,0.29,29,0.381,34,1.189,59,0.179,60,0.056,61,0.012,62,0.012,68,3.088,69,0.242,71,0.63,78,1.633,87,0.63,88,0.434,90,2.015,115,0.661,124,2.26,130,0.889,133,0.835,142,0.727,146,0.694,177,0.24,181,1.81,201,1.746,222,0.997,241,3.088,242,3.449,244,3.449,246,3.449,247,4.635,251,4.277,253,1.72,256,3.449,257,3.088,258,3.449,259,2.818,260,3.449,261,2.818,262,1.81,263,4.635,264,3.449,265,3.449,267,2.269,268,4.635,269,2.135,270,4.149,271,0.913,272,4.224,273,4.224,274,2.423,275,3.449,276,3.449,277,2.269,278,3.449,279,3.449,280,3.088,281,3.088,282,3.449,283,3.449,304,1.908]],["title/classes/ShoppingCart.html",[60,0.053,514,2.026]],["body/classes/ShoppingCart.html",[14,0.017,23,0.198,24,0.176,25,0.176,28,0.286,56,2.52,59,0.198,60,0.062,61,0.013,62,0.013,69,0.269,81,2.358,84,0.621,88,0.484,199,1.819,201,1.871,222,1.436,262,3.061,291,1.762,384,2.617,386,3.049,395,2.238,396,2.048,397,2.52,408,3.074,412,4.968,413,3.268,414,4.765,417,4.504,418,3.129,419,4.504,420,3.748,421,1.911,422,2.691,423,3.129,424,3.429,425,3.129,426,4.058,514,3.412,737,3.831,738,4.44,739,4.44]],["title/injectables/ShoppingCartRepository.html",[177,0.17,450,2.026]],["body/injectables/ShoppingCartRepository.html",[14,0.017,23,0.136,24,0.12,25,0.12,28,0.257,29,0.289,59,0.136,60,0.043,61,0.01,62,0.01,69,0.184,70,0.698,71,1.13,84,0.66,86,1.113,87,0.963,88,0.412,89,1.113,91,0.998,115,0.503,129,0.807,130,0.733,133,1.093,142,0.807,146,0.527,177,0.198,178,0.828,188,1.978,222,1.106,253,3.087,271,0.694,291,2.013,293,1.651,380,2.97,384,3.013,386,3.145,395,1.532,396,1.577,397,1.725,399,1.376,401,2.115,402,1.725,406,1.725,407,2.142,408,1.623,450,2.367,500,3.124,501,2.347,502,3.824,503,3.824,504,4.515,505,3.124,506,4.515,508,4.515,510,3.824,512,4.515,514,2.367,515,2.622,516,2.622,517,3.824,518,2.622,519,2.622,520,2.622,521,2.347,522,2.622,740,3.039,741,3.039,742,3.039,743,3.039,744,3.039,745,3.039]],["title/classes/ToggleFavoriteBody.html",[60,0.053,746,2.674]],["body/classes/ToggleFavoriteBody.html",[14,0.017,23,0.235,24,0.209,25,0.209,28,0.286,59,0.235,60,0.09,61,0.014,62,0.014,69,0.319,81,2.157,84,0.568,88,0.377,126,2.654,199,2.157,201,2.083,206,4.172,207,4.172,209,3.191,291,1.671,384,2.83,746,4.517,747,4.543,748,4.543,749,5.265]],["title/injectables/ToggleFavoriteUseCase.html",[177,0.17,750,2.299]],["body/injectables/ToggleFavoriteUseCase.html",[14,0.017,23,0.198,24,0.175,25,0.175,28,0.257,29,0.421,59,0.198,60,0.062,61,0.013,62,0.013,69,0.268,70,0.905,71,1.005,84,0.62,86,1.046,87,0.905,88,0.411,89,1.046,91,0.768,115,0.95,129,1.046,130,0.732,133,1.333,142,0.805,146,0.768,177,0.257,178,1.206,213,2.354,291,1.87,373,3.829,384,2.938,386,2.742,429,3.819,432,3.419,750,3.482,751,3.819,752,4.427,753,4.958,754,4.427,755,4.958,756,4.427,757,4.427,758,4.427]],["title/classes/ToggleShoppingCartBody.html",[60,0.053,759,2.674]],["body/classes/ToggleShoppingCartBody.html",[14,0.017,23,0.235,24,0.209,25,0.209,28,0.286,59,0.235,60,0.09,61,0.014,62,0.014,69,0.319,81,2.157,84,0.568,88,0.377,126,2.654,199,2.157,201,2.083,206,4.172,207,4.172,209,3.191,291,1.671,384,2.83,748,4.543,759,4.517,760,4.543,761,5.265]],["title/injectables/ToggleShoppingCartUseCase.html",[177,0.17,762,2.299]],["body/injectables/ToggleShoppingCartUseCase.html",[14,0.017,23,0.198,24,0.175,25,0.175,28,0.257,29,0.421,59,0.198,60,0.062,61,0.013,62,0.013,69,0.268,70,0.905,71,1.005,84,0.62,86,1.046,87,0.905,88,0.411,89,1.046,91,0.768,115,0.95,129,1.046,130,0.732,133,1.333,142,0.805,146,0.768,177,0.257,178,1.206,213,2.354,291,1.87,384,2.938,386,2.742,449,3.819,450,3.829,453,3.419,514,3.068,753,4.958,762,3.482,763,3.819,764,4.427,765,4.427,766,4.427,767,4.427,768,4.427]],["title/interfaces/UpdateField.html",[271,0.867,528,2.47]],["body/interfaces/UpdateField.html",[14,0.017,23,0.149,24,0.132,25,0.132,28,0.268,29,0.317,59,0.212,60,0.047,61,0.01,62,0.01,69,0.202,71,0.999,78,1.204,88,0.395,104,2.943,115,0.551,129,0.607,130,0.551,133,1.324,142,0.862,146,0.579,177,0.212,201,1.54,202,1.434,215,1.242,222,1.862,234,4.644,235,4.777,253,3.075,271,1.082,291,1.437,293,1.765,304,1.591,380,1.892,395,1.68,399,1.509,401,2.261,402,1.892,406,1.892,413,2.689,421,1.434,523,3.084,524,2.35,526,3.659,528,4.289,529,3.659,532,3.659,534,3.659,536,3.659,537,3.885,538,3.084,540,3.659,541,3.659,545,3.659,546,2.575,547,3.659,548,2.575,549,4.257,550,2.575,551,2.17,552,2.575,553,2.575,554,2.575,555,2.575,556,2.575,557,2.575,558,2.575]],["title/classes/User.html",[60,0.053,222,0.947]],["body/classes/User.html",[14,0.017,23,0.139,24,0.124,25,0.124,28,0.26,56,4.048,59,0.139,60,0.044,61,0.01,62,0.01,69,0.189,78,1.407,81,2.722,84,0.717,87,0.711,88,0.516,101,2.073,199,1.277,201,1.467,202,2.285,222,1.127,262,2.635,291,1.177,293,1.978,386,2.155,393,2.676,396,2.363,397,1.77,408,2.411,409,4.772,413,3.771,414,3.183,417,4.54,418,2.198,419,4.103,420,2.939,421,1.342,422,1.889,423,2.198,425,2.198,426,2.198,514,2.835,521,4.772,538,2.939,551,3.456,653,2.69,654,5.33,655,5.871,657,3.896,664,3.896,665,5.022,667,4.581,670,2.69,705,3.742,769,2.69,770,3.118,771,3.118,772,3.118,773,3.118,774,3.118,775,3.118,776,4.516,777,3.118,778,3.118,779,3.118,780,3.118,781,3.118,782,3.118,783,3.118]],["title/controllers/UserControllers.html",[63,2.154,784,2.674]],["body/controllers/UserControllers.html",[14,0.017,23,0.091,24,0.08,25,0.08,28,0.281,29,0.193,34,0.602,44,1.227,45,1.564,59,0.091,60,0.028,61,0.007,62,0.007,63,1.149,65,1.149,67,1.564,69,0.123,70,0.511,71,1.126,79,3.931,80,3.592,81,2.338,84,0.616,86,1.038,87,0.899,88,0.409,89,1.038,90,2.877,91,0.99,96,5.533,102,2.105,113,1.227,114,1.564,115,0.672,117,1.427,119,1.747,121,1.227,124,1.514,125,1.564,126,1.021,129,0.368,130,0.537,132,2.723,133,1.192,137,3.047,138,2.877,139,4.408,142,0.846,143,1.47,146,1.151,151,1.747,157,1.747,198,3.278,202,2.001,222,1.014,327,1.564,328,1.318,377,2.289,384,1.905,393,2.738,505,2.289,746,3.278,755,2.802,759,3.278,784,2.289,785,1.747,786,2.802,787,2.802,788,2.802,789,2.802,790,3.507,791,2.025,792,6.17,793,6.206,794,3.247,795,2.025,796,2.025,797,3.247,798,2.025,799,2.025,800,4.65,801,2.025,802,2.025,803,4.012,804,2.025,805,2.025,806,2.025,807,2.025,808,4.65,809,2.025,810,2.025,811,2.025,812,2.025,813,2.646,814,1.747,815,2.025,816,2.025,817,2.025,818,2.025,819,2.025,820,5.707,821,2.025,822,2.025,823,2.025,824,2.025,825,2.025,826,2.025,827,2.025,828,2.025,829,2.025,830,2.025,831,2.025,832,2.025,833,2.025,834,2.025,835,2.025]],["title/modules/UserModule.html",[0,1.554,17,2.299]],["body/modules/UserModule.html",[0,2.09,2,1.467,3,1.554,4,1.764,5,1.764,6,1.554,7,2.896,8,2.896,14,0.017,15,3.569,17,4.688,20,2.603,21,1.764,22,1.652,23,0.13,24,0.115,25,0.115,27,2.795,28,0.334,29,0.277,33,3.027,34,0.866,35,2.248,59,0.13,60,0.041,61,0.009,62,0.009,65,2.437,164,3.81,176,2.511,211,3.81,215,2.65,220,2.051,287,3.81,373,3.798,427,3.81,432,2.248,447,3.81,450,3.798,453,2.248,455,3.81,750,3.81,762,3.81,784,3.597,813,2.795,814,2.511,836,2.511,837,2.911,838,2.511,839,2.511,840,2.911,841,2.911,842,2.511,843,2.511,844,2.511,845,2.511,846,2.511,847,3.317,848,2.911,849,3.317,850,2.911,851,2.511,852,2.511,853,3.317,854,2.911]],["title/injectables/UserRepository.html",[177,0.17,215,1.413]],["body/injectables/UserRepository.html",[14,0.017,23,0.124,24,0.11,25,0.11,28,0.246,29,0.264,59,0.185,60,0.039,61,0.009,62,0.009,69,0.168,70,0.652,71,1.141,78,0.605,84,0.666,86,1.124,87,0.973,88,0.421,89,1.124,91,1.022,104,3.143,115,0.458,129,0.753,130,0.458,133,1.229,142,0.753,146,0.481,177,0.185,178,0.755,202,1.192,215,1.542,222,1.807,234,3.494,235,3.876,249,1.679,253,3.117,271,0.946,291,1.534,293,1.542,328,2.695,380,2.35,395,1.397,399,1.254,401,1.976,402,1.573,406,1.573,413,2.35,421,1.192,523,2.695,524,1.953,525,3.572,526,4.248,527,3.572,528,4.378,529,3.829,531,2.391,532,3.829,534,3.829,535,2.391,536,4.248,537,4.149,538,3.58,540,3.829,541,3.829,543,2.391,545,3.198,546,2.14,547,3.198,548,2.14,549,3.829,550,2.14,551,1.804,552,2.14,553,2.14,554,2.14,555,2.14,556,2.14,557,2.14,558,2.14,855,2.771,856,2.771,857,2.771,858,2.771,859,2.771,860,2.771,861,2.771]],["title/classes/UserServices.html",[60,0.053,813,2.47]],["body/classes/UserServices.html",[14,0.017,23,0.108,24,0.095,25,0.095,28,0.289,29,0.229,59,0.108,60,0.034,61,0.008,62,0.008,69,0.146,70,0.586,71,1.157,78,1.626,84,0.679,86,1.146,87,0.992,88,0.451,89,1.146,90,3.072,91,1.058,101,1.452,102,2.759,115,1.069,129,0.677,130,1.042,142,1.109,146,1.058,180,2.076,181,2.647,192,1.566,199,0.986,211,3.694,218,4.413,287,3.694,291,1.524,293,2.459,377,2.622,384,2.579,386,1.775,427,3.694,447,3.694,455,3.694,505,2.622,750,3.694,762,3.694,786,3.209,787,3.209,788,3.209,789,3.209,790,3.209,813,2.421,842,2.076,843,2.076,844,2.076,845,2.076,846,2.076,851,2.076,852,2.076,862,2.076,863,2.406,864,3.72,865,2.406,866,3.72,867,2.406,868,3.72,869,2.406,870,3.72,871,2.406,872,3.72,873,2.406,874,3.72,875,2.406,876,3.72,877,2.406,878,6.096,879,2.406,880,2.406,881,2.406,882,2.406,883,2.406,884,2.406,885,2.406]],["title/coverage.html",[886,4.005]],["body/coverage.html",[6,1.372,14,0.017,18,1.557,19,1.672,25,0.102,42,1.811,44,1.557,60,0.097,61,0.009,62,0.009,63,2.688,64,1.811,66,2.216,88,0.184,93,1.557,104,1.372,113,1.557,122,1.557,165,1.557,166,1.557,167,1.557,168,1.458,177,0.331,179,2.216,181,1.163,198,1.811,200,2.216,211,1.557,212,2.216,215,0.957,222,0.641,241,3.021,251,1.811,271,1.504,285,1.984,287,1.557,288,2.216,295,2.216,303,1.811,305,3.021,373,1.372,374,3.021,393,1.295,396,0.914,398,1.811,411,2.216,420,1.672,427,1.557,428,2.216,434,1.458,435,2.216,437,1.458,447,1.557,448,2.216,450,1.372,455,1.557,456,2.216,459,2.216,466,1.672,475,1.984,476,2.216,500,1.811,501,3.021,514,1.372,523,1.672,524,3.338,528,1.672,559,2.216,567,2.216,581,2.216,591,3.021,596,1.811,625,5.542,631,1.811,632,3.021,652,2.216,672,1.811,673,2.216,687,1.672,691,1.984,698,2.216,704,2.216,712,3.021,714,1.811,725,2.216,737,2.216,746,1.811,747,2.216,750,1.557,751,2.216,759,1.811,760,2.216,762,1.557,763,2.216,769,2.216,784,1.811,785,2.216,813,1.672,847,1.984,849,1.984,853,1.984,862,2.216,886,1.984,887,2.216,888,2.569,889,2.569,890,4.735,891,6,892,6.239,893,5.696,894,7.254,895,5.696,896,5.696,897,6.239,898,2.216,899,2.216,900,2.216,901,2.216,902,3.911,903,3.911,904,2.216,905,2.216,906,1.984,907,2.216,908,2.569,909,2.569]],["title/dependencies.html",[3,2.438,910,2.731]],["body/dependencies.html",[3,2.328,14,0.017,29,0.415,31,3.761,32,3.367,34,1.296,37,3.367,60,0.08,61,0.012,62,0.012,121,3.448,126,2.197,209,2.642,221,2.838,269,2.328,270,3.367,314,3.367,330,3.367,421,2.448,422,2.642,460,3.761,599,3.367,600,3.367,793,3.761,911,4.36,912,6.334,913,4.36,914,4.36,915,4.36,916,4.36,917,4.36,918,4.36,919,4.36,920,4.36,921,4.36,922,5.69,923,4.36,924,4.36,925,4.36,926,4.36,927,4.36,928,4.36,929,4.36,930,4.36,931,4.36,932,4.36,933,4.36,934,4.36,935,4.36,936,4.36,937,4.36,938,4.36,939,4.36,940,4.36,941,4.36,942,4.36,943,4.36,944,4.36,945,4.36,946,3.761,947,4.36,948,4.36,949,4.36,950,4.36,951,4.36]],["title/miscellaneous/functions.html",[952,2.231,953,3.939]],["body/miscellaneous/functions.html",[6,3.881,14,0.015,61,0.015,62,0.015,69,0.359,907,5.121,952,4.184,953,5.121,954,5.936]],["title/index.html",[69,0.191,955,2.731,956,2.731]],["body/index.html",[14,0.017,24,0.173,61,0.012,62,0.012,341,3.082,344,3.082,422,2.65,593,5.521,886,3.377,957,4.373,958,4.373,959,5.701,960,4.373,961,4.373,962,4.373,963,4.373,964,4.373,965,3.773,966,6.343,967,4.373,968,4.373,969,4.373,970,6.343,971,7.28,972,4.373,973,4.373,974,4.373,975,4.373,976,4.373,977,5.701,978,4.373,979,4.373,980,4.373,981,4.373,982,5.701,983,5.701,984,4.373,985,4.373,986,4.373,987,5.701,988,5.701,989,4.373,990,4.373,991,4.373,992,4.373,993,4.373,994,3.773,995,4.373,996,4.373,997,4.373,998,4.373,999,4.373,1000,4.373,1001,4.373,1002,4.373,1003,4.373,1004,3.773,1005,4.373,1006,4.373,1007,4.373,1008,4.373,1009,4.373,1010,4.373,1011,3.082]],["title/guards/isLoggedIn.html",[44,2.299,906,2.931]],["body/guards/isLoggedIn.html",[14,0.017,23,0.182,24,0.161,25,0.161,28,0.292,29,0.387,34,1.209,44,3.292,59,0.182,60,0.057,61,0.012,62,0.012,69,0.246,70,0.856,84,0.586,86,0.989,87,0.856,88,0.389,89,0.989,90,2.738,91,0.706,115,0.899,124,2.609,129,0.989,130,0.672,132,1.94,137,2.171,142,0.74,146,0.943,177,0.243,214,1.94,225,2.592,253,2.338,262,1.84,267,2.307,269,2.171,277,2.307,399,1.84,464,3.14,466,3.536,538,3.536,792,3.507,905,3.507,946,3.507,1012,4.065,1013,6.807,1014,4.065,1015,4.065,1016,6.532,1017,4.065,1018,5.433,1019,6.119,1020,4.065,1021,4.065,1022,4.065,1023,4.065,1024,4.065,1025,4.065,1026,4.065,1027,4.065]],["title/license.html",[955,2.731,956,2.731,1011,2.231]],["body/license.html",[14,0.012,22,2.314,61,0.012,62,0.012,121,2.471,272,2.471,273,2.471,360,3.149,537,2.873,617,3.149,887,3.517,1011,4.319,1028,4.077,1029,4.077,1030,5.443,1031,5.443,1032,3.517,1033,4.077,1034,5.443,1035,4.077,1036,3.517,1037,3.517,1038,4.077,1039,4.077,1040,4.077,1041,4.077,1042,4.077,1043,4.077,1044,4.077,1045,5.443,1046,7.157,1047,4.077,1048,4.077,1049,4.077,1050,6.128,1051,4.077,1052,5.443,1053,4.077,1054,4.077,1055,6.539,1056,4.077,1057,4.077,1058,4.077,1059,4.077,1060,4.077,1061,4.077,1062,4.077,1063,4.077,1064,4.077,1065,4.077,1066,4.077,1067,4.077,1068,4.077,1069,3.517,1070,4.077,1071,4.077,1072,4.077,1073,4.077,1074,4.077,1075,4.077,1076,4.077,1077,4.077,1078,4.077,1079,4.077,1080,4.077,1081,4.077,1082,4.077,1083,4.077,1084,4.077,1085,4.077,1086,4.077,1087,4.077,1088,4.077,1089,4.077,1090,4.077,1091,4.077,1092,4.077,1093,4.077,1094,4.077,1095,4.077,1096,4.077,1097,4.077,1098,4.077,1099,4.077,1100,4.077,1101,4.077,1102,4.077,1103,4.077,1104,4.077,1105,4.077,1106,4.077,1107,4.077,1108,4.077,1109,4.077,1110,4.077,1111,4.077,1112,4.077,1113,4.077,1114,4.077,1115,4.077,1116,4.077,1117,4.077,1118,4.077,1119,4.077]],["title/modules.html",[2,2.614]],["body/modules.html",[1,3.837,2,2.744,13,3.543,14,0.014,15,3.09,16,3.543,17,3.299,61,0.014,62,0.014,164,3.299,994,6.417,1120,7.438,1121,7.438,1122,7.553,1123,5.444,1124,5.444]],["title/overview.html",[1125,4.474]],["body/overview.html",[0,1.237,1,5.18,2,1.522,3,1.613,4,1.83,5,1.83,6,1.613,7,1.714,8,1.714,9,2.606,10,2.606,11,2.606,12,2.606,13,4.842,14,0.017,15,3.462,16,4.612,17,4.702,18,3.987,19,3.394,20,2.674,21,1.83,22,1.714,61,0.01,62,0.01,65,1.714,122,3.16,161,2.606,162,2.606,163,2.606,164,3.987,165,3.16,166,3.16,167,3.16,168,2.959,178,0.823,181,2.978,199,1.237,211,3.16,215,2.451,236,2.606,237,2.606,238,2.606,287,3.16,304,1.441,373,3.513,427,3.16,434,2.959,437,2.959,447,3.16,450,3.513,455,3.16,684,2.606,685,2.606,687,3.394,733,2.606,750,3.16,762,3.16,836,2.606,838,2.606,839,2.606,906,2.333,1125,2.606,1126,3.02,1127,3.02,1128,3.02,1129,3.02,1130,3.02]],["title/properties.html",[201,1.484,910,2.731]],["body/properties.html",[14,0.017,61,0.015,62,0.015,201,1.853,280,4.404,281,4.404,965,4.919,1004,4.919,1011,4.019,1032,4.919,1036,4.919,1037,4.919,1131,5.702,1132,5.702,1133,5.702,1134,5.702,1135,5.702]],["title/miscellaneous/variables.html",[952,2.231,1136,3.939]],["body/miscellaneous/variables.html",[14,0.017,42,3.031,53,2.253,56,1.655,61,0.009,62,0.009,69,0.176,70,0.459,71,0.459,88,0.43,90,2.168,101,2.202,117,2.056,132,1.392,133,0.609,138,1.47,142,1.184,146,0.506,222,1.57,254,5.429,255,5.429,259,2.056,261,2.056,262,2.313,285,3.322,303,3.031,305,2.253,306,2.516,307,2.516,308,2.516,309,2.516,310,2.516,311,2.516,312,2.516,313,2.516,314,2.253,315,2.516,316,2.516,317,2.516,318,2.516,319,2.516,320,2.516,321,2.516,322,2.516,323,2.516,324,2.516,325,2.516,326,2.516,327,2.253,328,1.898,329,2.516,330,2.253,331,2.516,332,2.516,333,2.516,334,3.322,335,2.253,336,2.516,337,2.516,338,2.516,339,2.516,340,2.516,341,2.056,342,2.253,343,2.253,344,2.056,345,2.253,346,3.711,347,2.516,348,2.516,349,2.516,350,2.516,351,2.516,352,2.516,353,2.516,354,3.711,355,2.253,356,2.056,357,2.516,358,2.516,359,2.516,360,2.253,361,2.516,362,2.516,363,2.516,364,2.253,365,4.865,366,2.516,367,2.516,368,2.516,369,2.516,370,3.711,371,3.711,372,3.711,393,2.575,396,1.817,421,2.427,466,1.898,514,2.296,691,3.322,803,2.516,847,3.322,849,3.322,853,3.322,898,2.516,899,2.516,900,2.516,901,2.516,904,2.516,952,2.056,1069,5.188,1136,2.516,1137,2.916,1138,2.916,1139,2.916,1140,2.916,1141,2.916,1142,2.916,1143,2.916,1144,2.916,1145,2.916,1146,2.916,1147,2.916,1148,2.916,1149,2.916,1150,2.916,1151,5.64]]],"invertedIndex":[["",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"guards/isLoggedIn.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":625,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RmUnverifiedUsers.html":{},"coverage.html":{}}}],["0.14.1",{"_index":928,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":945,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":927,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":892,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":897,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":894,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":895,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":896,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":893,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":903,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":902,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":890,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":733,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{},"overview.html":{}}}],["1.0.0",{"_index":1132,"title":{},"body":{"properties.html":{}}}],["1.4.6",{"_index":932,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":930,"title":{},"body":{"dependencies.html":{}}}],["1.99",{"_index":619,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["10.0.0",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":920,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":566,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["100)@isemail",{"_index":561,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["1000",{"_index":335,"title":{},"body":{"interfaces/Env.html":{},"injectables/RmUnverifiedUsers.html":{},"miscellaneous/variables.html":{}}}],["12",{"_index":1129,"title":{},"body":{"overview.html":{}}}],["12.0.1",{"_index":925,"title":{},"body":{"dependencies.html":{}}}],["14.99",{"_index":622,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["16",{"_index":204,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["16.4.5",{"_index":935,"title":{},"body":{"dependencies.html":{}}}],["1d",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["1h",{"_index":586,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["2.1.6",{"_index":949,"title":{},"body":{"dependencies.html":{}}}],["2.2.2",{"_index":921,"title":{},"body":{"dependencies.html":{}}}],["2.8.5",{"_index":933,"title":{},"body":{"dependencies.html":{}}}],["2.99",{"_index":615,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["20",{"_index":611,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["2024",{"_index":617,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"license.html":{}}}],["21",{"_index":1128,"title":{},"body":{"overview.html":{}}}],["24",{"_index":333,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["24.99",{"_index":621,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["24}h",{"_index":580,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["3",{"_index":1127,"title":{},"body":{"overview.html":{}}}],["3.2.3",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["3.25",{"_index":618,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["4.0",{"_index":1032,"title":{},"body":{"license.html":{},"properties.html":{}}}],["4.1.0",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["4.1.1",{"_index":940,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":300,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"injectables/LoginUseCase.html":{}}}],["401",{"_index":1027,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["403",{"_index":1024,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["404",{"_index":228,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{}}}],["409",{"_index":717,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["422",{"_index":468,"title":{},"body":{"classes/HandleError.html":{},"injectables/LoginUseCase.html":{}}}],["465",{"_index":260,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["5.1.1",{"_index":923,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":951,"title":{},"body":{"dependencies.html":{}}}],["5.99",{"_index":614,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["50",{"_index":709,"title":{},"body":{"classes/RegisterBody.html":{}}}],["500",{"_index":474,"title":{},"body":{"classes/HandleError.html":{}}}],["6",{"_index":1126,"title":{},"body":{"overview.html":{}}}],["6.37.3",{"_index":948,"title":{},"body":{"dependencies.html":{}}}],["6.9.14",{"_index":942,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":334,"title":{},"body":{"interfaces/Env.html":{},"injectables/RmUnverifiedUsers.html":{},"miscellaneous/variables.html":{}}}],["7",{"_index":608,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["7.4.0",{"_index":922,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":947,"title":{},"body":{"dependencies.html":{}}}],["8.4.1",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":1130,"title":{},"body":{"overview.html":{}}}],["9.0.2",{"_index":941,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":347,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["action",{"_index":1113,"title":{},"body":{"license.html":{}}}],["additional",{"_index":1082,"title":{},"body":{"license.html":{}}}],["address",{"_index":282,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["allownull",{"_index":655,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["already",{"_index":357,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["amazing",{"_index":995,"title":{},"body":{"index.html":{}}}],["and/or",{"_index":1061,"title":{},"body":{"license.html":{}}}],["anything",{"_index":1092,"title":{},"body":{"license.html":{}}}],["api",{"_index":1133,"title":{},"body":{"properties.html":{}}}],["api_addr",{"_index":306,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["apiproperty",{"_index":206,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{}}}],["apiproperty()@isnotempty",{"_index":748,"title":{},"body":{"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{}}}],["apiproperty()@isnotempty()@length(0",{"_index":560,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["apiproperty()@isnotempty()@length(3",{"_index":708,"title":{},"body":{"classes/RegisterBody.html":{}}}],["apiproperty()@isnotempty()@length(6",{"_index":203,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["apitags",{"_index":125,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["apitags('auth",{"_index":127,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["apitags('products",{"_index":679,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["apitags('user",{"_index":817,"title":{},"body":{"controllers/UserControllers.html":{}}}],["app",{"_index":973,"title":{},"body":{"index.html":{}}}],["applications",{"_index":964,"title":{},"body":{"index.html":{}}}],["apply",{"_index":1084,"title":{},"body":{"license.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appropriate",{"_index":1067,"title":{},"body":{"license.html":{}}}],["argumentshost",{"_index":479,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["arising",{"_index":1117,"title":{},"body":{"license.html":{}}}],["array.from",{"_index":607,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["array.isarray(msg",{"_index":494,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["associated",{"_index":1047,"title":{},"body":{"license.html":{}}}],["async",{"_index":71,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"miscellaneous/variables.html":{}}}],["attributes",{"_index":549,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["attribution",{"_index":1030,"title":{},"body":{"license.html":{}}}],["auth",{"_index":68,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["auth.controller.js",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service.js",{"_index":123,"title":{},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{}}}],["auth/dto/registerbody.dto.js",{"_index":546,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["auth_duration_days",{"_index":307,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["authcontrollers",{"_index":64,"title":{"controllers/AuthControllers.html":{}},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authentication",{"_index":352,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["authmodule",{"_index":13,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authmsg",{"_index":350,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["author",{"_index":1004,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authors",{"_index":1106,"title":{},"body":{"license.html":{}}}],["authservices",{"_index":122,"title":{"injectables/AuthServices.html":{}},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"coverage.html":{},"overview.html":{}}}],["authtoken",{"_index":147,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["autoincrement",{"_index":657,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["available",{"_index":1124,"title":{},"body":{"modules.html":{}}}],["await",{"_index":133,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":996,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":221,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"dependencies.html":{}}}],["bcrypt.compare(passwd",{"_index":573,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["bcrypt.gensalt(10",{"_index":230,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["bcrypt.hash(newpasswd",{"_index":232,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["bcrypt.hash(passwd",{"_index":719,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["belongstomany",{"_index":667,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["belongstomany(undefined",{"_index":664,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["best",{"_index":620,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["body",{"_index":96,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["boolean",{"_index":538,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"guards/isLoggedIn.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1122,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1120,"title":{},"body":{"modules.html":{}}}],["building",{"_index":960,"title":{},"body":{"index.html":{}}}],["c",{"_index":1035,"title":{},"body":{"license.html":{}}}],["cache",{"_index":938,"title":{},"body":{"dependencies.html":{}}}],["cacheable",{"_index":924,"title":{},"body":{"dependencies.html":{}}}],["canactivate",{"_index":1013,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["canactivate(context",{"_index":1015,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["catch",{"_index":137,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/HttpExceptionFilter.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RmUnverifiedUsers.html":{},"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{}}}],["catch(exception",{"_index":478,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["catch(httpexception",{"_index":482,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["category",{"_index":440,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{}}}],["cc",{"_index":1134,"title":{},"body":{"properties.html":{}}}],["change/${recoverytoken",{"_index":589,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["changepasswd",{"_index":786,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["changepasswd(@body",{"_index":822,"title":{},"body":{"controllers/UserControllers.html":{}}}],["changepasswd(body",{"_index":791,"title":{},"body":{"controllers/UserControllers.html":{}}}],["changepasswd(token",{"_index":864,"title":{},"body":{"classes/UserServices.html":{}}}],["changepasswdbody",{"_index":198,"title":{"classes/ChangePasswdBody.html":{}},"body":{"classes/ChangePasswdBody.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["changepasswdusecase",{"_index":211,"title":{"injectables/ChangePasswdUseCase.html":{}},"body":{"injectables/ChangePasswdUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["changes",{"_index":1071,"title":{},"body":{"license.html":{}}}],["charge",{"_index":1042,"title":{},"body":{"license.html":{}}}],["checkpasswd",{"_index":572,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["claim",{"_index":1109,"title":{},"body":{"license.html":{}}}],["class",{"_index":60,"title":{"classes/ChangePasswdBody.html":{},"classes/Favorites.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginBody.html":{},"classes/Products.html":{},"classes/RegisterBody.html":{},"classes/ShoppingCart.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{},"classes/User.html":{},"classes/UserServices.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["classes",{"_index":199,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/Favorites.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"classes/LoginBody.html":{},"classes/Products.html":{},"classes/RegisterBody.html":{},"classes/ShoppingCart.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{},"classes/User.html":{},"classes/UserServices.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_exports",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":236,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":238,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_providers",{"_index":237,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_productsmodule",{"_index":684,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_productsmodule_imports",{"_index":686,"title":{},"body":{"modules/ProductsModule.html":{}}}],["cluster_productsmodule_providers",{"_index":685,"title":{},"body":{"modules/ProductsModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":836,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":839,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":837,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":838,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":417,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["column({type",{"_index":654,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["commercial",{"_index":1080,"title":{},"body":{"license.html":{}}}],["common.service.js",{"_index":240,"title":{},"body":{"modules/CommonModule.html":{}}}],["common/common.module.js",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["common/common.service.js",{"_index":192,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"classes/UserServices.html":{}}}],["commonmodule",{"_index":164,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["commons",{"_index":1029,"title":{},"body":{"license.html":{}}}],["commonservices",{"_index":181,"title":{"injectables/CommonServices.html":{}},"body":{"injectables/AuthServices.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["compression",{"_index":929,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":1065,"title":{},"body":{"license.html":{}}}],["config/configuration.js",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/UserModule.html":{}}}],["configmodule.forroot",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":124,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{}}}],["configuration",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Env.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":1118,"title":{},"body":{"license.html":{}}}],["console.error(err",{"_index":472,"title":{},"body":{"classes/HandleError.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RmUnverifiedUsers.html":{}}}],["console.log('\\n",{"_index":628,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["const",{"_index":146,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":129,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["constructor(@inject",{"_index":274,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/SendEmailProps.html":{}}}],["constructor(commonservices",{"_index":180,"title":{},"body":{"injectables/AuthServices.html":{},"classes/UserServices.html":{}}}],["constructor(configservice",{"_index":214,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"injectables/RegisterUseCase.html":{},"guards/isLoggedIn.html":{}}}],["constructor(favoritemodel",{"_index":379,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["constructor(favoriterepository",{"_index":429,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{},"injectables/ToggleFavoriteUseCase.html":{}}}],["constructor(getproductsusecase",{"_index":699,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["constructor(productmodel",{"_index":693,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["constructor(productsrepository",{"_index":436,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["constructor(shoppingcartmodel",{"_index":740,"title":{},"body":{"injectables/ShoppingCartRepository.html":{}}}],["constructor(shoppingcartrepository",{"_index":449,"title":{},"body":{"injectables/GetShoppingCartUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{}}}],["constructor(usermodel",{"_index":855,"title":{},"body":{"injectables/UserRepository.html":{}}}],["context",{"_index":1018,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["context.switchtohttp().getrequest",{"_index":1020,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["contract",{"_index":1114,"title":{},"body":{"license.html":{}}}],["controller",{"_index":63,"title":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["controller('/auth",{"_index":128,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["controller('/products",{"_index":680,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["controller('/user",{"_index":818,"title":{},"body":{"controllers/UserControllers.html":{}}}],["controllers",{"_index":65,"title":{},"body":{"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":330,"title":{},"body":{"interfaces/Env.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["cookieoptions",{"_index":315,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["copies",{"_index":1063,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1045,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1034,"title":{},"body":{"license.html":{}}}],["core/auth/auth.module.js",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["core/products/products.entity.js",{"_index":598,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["core/products/products.module.js",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["core/user/user.entity.js",{"_index":729,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["core/user/user.module.js",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["cors",{"_index":314,"title":{},"body":{"interfaces/Env.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["corsoptions",{"_index":313,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["coverage",{"_index":886,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":525,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["create(userattributes",{"_index":529,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["created",{"_index":370,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":735,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["createfavorite",{"_index":375,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["createfavorite(userid",{"_index":383,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["createshoppingcart",{"_index":502,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["createshoppingcart(userid",{"_index":506,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["creative",{"_index":1028,"title":{},"body":{"license.html":{}}}],["credentials",{"_index":329,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["credit",{"_index":1068,"title":{},"body":{"license.html":{}}}],["cron",{"_index":730,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["cron('0",{"_index":727,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["ctx",{"_index":483,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["ctx.getresponse",{"_index":485,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["custom",{"_index":226,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["custom.status",{"_index":471,"title":{},"body":{"classes/HandleError.html":{}}}],["damages",{"_index":1110,"title":{},"body":{"license.html":{}}}],["data",{"_index":188,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["data/database.db",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data?.favoriteproducts",{"_index":410,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["data?.shoppingcartproducts",{"_index":522,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["database.providers.js",{"_index":286,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["database/database.module.js",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{}}}],["database/seed/populateproducts.service.js",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":15,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["databaseproviders",{"_index":285,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["datatype",{"_index":418,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["datatype.bigint",{"_index":426,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["datatype.boolean",{"_index":783,"title":{},"body":{"classes/User.html":{}}}],["datatype.decimal",{"_index":671,"title":{},"body":{"classes/Products.html":{}}}],["datatype.string",{"_index":670,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["datatype.string(100",{"_index":782,"title":{},"body":{"classes/User.html":{}}}],["datatype.string(50",{"_index":781,"title":{},"body":{"classes/User.html":{}}}],["date(date.now",{"_index":732,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["db\\n",{"_index":630,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["deal",{"_index":1049,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1119,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":81,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/ChangePasswdBody.html":{},"classes/Favorites.html":{},"classes/LoginBody.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"classes/RegisterBody.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/ShoppingCart.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{},"classes/User.html":{},"controllers/UserControllers.html":{}}}],["default",{"_index":254,"title":{},"body":{"injectables/CommonServices.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":776,"title":{},"body":{"classes/User.html":{}}}],["defined",{"_index":84,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["delete",{"_index":328,"title":{},"body":{"interfaces/Env.html":{},"interfaces/IUserRepository.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["delete('/delete",{"_index":797,"title":{},"body":{"controllers/UserControllers.html":{}}}],["delete(target",{"_index":532,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["deleted",{"_index":371,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["deletefavorite",{"_index":376,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["deletefavorite(userid",{"_index":387,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["deleteshoppingcart",{"_index":503,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["deleteshoppingcart(userid",{"_index":508,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["deleteuser",{"_index":787,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["deleteuser(@req",{"_index":825,"title":{},"body":{"controllers/UserControllers.html":{}}}],["deleteuser(req",{"_index":796,"title":{},"body":{"controllers/UserControllers.html":{}}}],["deleteuser(token",{"_index":866,"title":{},"body":{"classes/UserServices.html":{}}}],["deleteuserusecase",{"_index":287,"title":{"injectables/DeleteUserUseCase.html":{}},"body":{"injectables/DeleteUserUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["denied",{"_index":346,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":965,"title":{},"body":{"index.html":{},"properties.html":{}}}],["develop",{"_index":280,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"properties.html":{}}}],["development",{"_index":974,"title":{},"body":{"index.html":{}}}],["dialect",{"_index":1144,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":1059,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":887,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["doing",{"_index":1091,"title":{},"body":{"license.html":{}}}],["dotenv",{"_index":934,"title":{},"body":{"dependencies.html":{}}}],["dto/changepasswdbody.dto.js",{"_index":812,"title":{},"body":{"controllers/UserControllers.html":{}}}],["dto/loginbody.dto.js",{"_index":120,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/LoginUseCase.html":{}}}],["dto/registerbody.dto.js",{"_index":112,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["dto/togglefavoritebody.dto.js",{"_index":815,"title":{},"body":{"controllers/UserControllers.html":{}}}],["dto/toggleshoppingcartbody.dto.js",{"_index":816,"title":{},"body":{"controllers/UserControllers.html":{}}}],["e2e",{"_index":984,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":961,"title":{},"body":{"index.html":{}}}],["email",{"_index":101,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"classes/User.html":{},"classes/UserServices.html":{},"miscellaneous/variables.html":{}}}],["emailexists",{"_index":356,"title":{},"body":{"interfaces/Env.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"miscellaneous/variables.html":{}}}],["emailtoken",{"_index":185,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["emailverify",{"_index":72,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["emailverify(@param('token",{"_index":131,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["emailverify(emailtoken",{"_index":183,"title":{},"body":{"injectables/AuthServices.html":{}}}],["emailverify(token",{"_index":77,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["emailverifyusecase",{"_index":165,"title":{"injectables/EmailVerifyUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/EmailVerifyUseCase.html":{},"coverage.html":{},"overview.html":{}}}],["endorses",{"_index":1078,"title":{},"body":{"license.html":{}}}],["env",{"_index":303,"title":{"interfaces/Env.html":{}},"body":{"interfaces/Env.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":138,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"classes/HandleError.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RmUnverifiedUsers.html":{},"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["err.custom",{"_index":469,"title":{},"body":{"classes/HandleError.html":{}}}],["err.message",{"_index":465,"title":{},"body":{"classes/HandleError.html":{}}}],["error",{"_index":343,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"miscellaneous/variables.html":{}}}],["etag",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["event",{"_index":1104,"title":{},"body":{"license.html":{}}}],["example",{"_index":970,"title":{},"body":{"index.html":{}}}],["exception",{"_index":481,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getresponse",{"_index":488,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exception.getstatus",{"_index":486,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exceptionfilter",{"_index":477,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["exclude",{"_index":550,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["execute",{"_index":213,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{}}}],["execute(email",{"_index":217,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{}}}],["execute(id",{"_index":290,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{}}}],["execute(search",{"_index":439,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["execute(undefined",{"_index":569,"title":{},"body":{"injectables/LoginUseCase.html":{},"injectables/RegisterUseCase.html":{}}}],["execute(userid",{"_index":753,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{}}}],["executioncontext",{"_index":1016,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["exists",{"_index":358,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":578,"title":{},"body":{"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["export",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":121,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserControllers.html":{},"dependencies.html":{},"license.html":{}}}],["extends",{"_index":425,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["extractjwtpayload",{"_index":243,"title":{},"body":{"injectables/CommonServices.html":{}}}],["extractjwtpayload(token",{"_index":246,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["faker",{"_index":599,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"dependencies.html":{}}}],["faker.commerce.productdescription().slice(0",{"_index":612,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["faker.commerce.productname().slice(0",{"_index":610,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["false",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"classes/Favorites.html":{},"classes/Products.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["favorite",{"_index":755,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{},"controllers/UserControllers.html":{}}}],["favorite.entity.js",{"_index":394,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["favoritemodel",{"_index":382,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["favoriteproducts",{"_index":409,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"classes/User.html":{}}}],["favoriteproviders",{"_index":849,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["favoriterepository",{"_index":373,"title":{"injectables/FavoriteRepository.html":{}},"body":{"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["favorites",{"_index":393,"title":{"classes/Favorites.html":{}},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"classes/Products.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["favorites/favorite.entity.js",{"_index":778,"title":{},"body":{"classes/User.html":{}}}],["favorites/favorite.repository.js",{"_index":432,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{},"injectables/ToggleFavoriteUseCase.html":{},"modules/UserModule.html":{}}}],["field",{"_index":540,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["field[fieldkey",{"_index":552,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["fieldkey",{"_index":547,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["fieldname",{"_index":234,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["fieldvalue",{"_index":235,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["file",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"guards/isLoggedIn.html":{}}}],["files",{"_index":1048,"title":{},"body":{"license.html":{}}}],["filteredproducts",{"_index":682,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["findattributeoptions",{"_index":545,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["findbyfield",{"_index":526,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["findbyfield(field",{"_index":535,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["fitness",{"_index":1100,"title":{},"body":{"license.html":{}}}],["following",{"_index":1064,"title":{},"body":{"license.html":{}}}],["foreignkey",{"_index":419,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["foreignkey(undefined)@column({type",{"_index":412,"title":{},"body":{"classes/Favorites.html":{},"classes/ShoppingCart.html":{}}}],["found",{"_index":369,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["framework",{"_index":959,"title":{},"body":{"index.html":{}}}],["free",{"_index":1041,"title":{},"body":{"license.html":{}}}],["function",{"_index":908,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":953,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateproducts",{"_index":592,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["get('/email",{"_index":82,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["get('/get",{"_index":800,"title":{},"body":{"controllers/UserControllers.html":{}}}],["get('/passwd",{"_index":98,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["get('/token",{"_index":109,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["getallproducts",{"_index":633,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbycategory",{"_index":634,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbycategory(category",{"_index":637,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbygenericsearch",{"_index":635,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getbygenericsearch(search",{"_index":639,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["getfavorites",{"_index":377,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["getfavorites(@req",{"_index":831,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getfavorites(id",{"_index":389,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["getfavorites(req",{"_index":799,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getfavorites(token",{"_index":868,"title":{},"body":{"classes/UserServices.html":{}}}],["getfavoritesusecase",{"_index":427,"title":{"injectables/GetFavoritesUseCase.html":{}},"body":{"injectables/GetFavoritesUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["getonefavorite",{"_index":378,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["getonefavorite(userid",{"_index":391,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["getoneshoppingcart",{"_index":504,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["getoneshoppingcart(userid",{"_index":510,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["getproducts",{"_index":674,"title":{},"body":{"controllers/ProductsControllers.html":{},"injectables/ProductsServices.html":{}}}],["getproducts(@query",{"_index":681,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["getproducts(query",{"_index":675,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["getproducts(search",{"_index":701,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["getproductsusecase",{"_index":434,"title":{"injectables/GetProductsUseCase.html":{}},"body":{"injectables/GetProductsUseCase.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsServices.html":{},"coverage.html":{},"overview.html":{}}}],["getshoppingcart",{"_index":505,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["getshoppingcart(@req",{"_index":834,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getshoppingcart(id",{"_index":512,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["getshoppingcart(req",{"_index":802,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getshoppingcart(token",{"_index":870,"title":{},"body":{"classes/UserServices.html":{}}}],["getshoppingcartusecase",{"_index":447,"title":{"injectables/GetShoppingCartUseCase.html":{}},"body":{"injectables/GetShoppingCartUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["getting",{"_index":955,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuser",{"_index":788,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["getuser(@req",{"_index":819,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getuser(req",{"_index":805,"title":{},"body":{"controllers/UserControllers.html":{}}}],["getuser(token",{"_index":872,"title":{},"body":{"classes/UserServices.html":{}}}],["getuserusecase",{"_index":455,"title":{"injectables/GetUserUseCase.html":{}},"body":{"injectables/GetUserUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["give",{"_index":1066,"title":{},"body":{"license.html":{}}}],["granted",{"_index":1040,"title":{},"body":{"license.html":{}}}],["graph",{"_index":1123,"title":{},"body":{"modules.html":{}}}],["great",{"_index":339,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":991,"title":{},"body":{"index.html":{}}}],["guard",{"_index":906,"title":{"guards/isLoggedIn.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guard/isloggedin.guard.js",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["guards",{"_index":1012,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["handlecron",{"_index":726,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["handleerror",{"_index":113,"title":{"classes/HandleError.html":{}},"body":{"controllers/AuthControllers.html":{},"classes/HandleError.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["handleerror.http(err",{"_index":139,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["hashednewpasswd",{"_index":231,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["hashedpasswd",{"_index":718,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["here",{"_index":1001,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1039,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1107,"title":{},"body":{"license.html":{}}}],["host",{"_index":257,"title":{},"body":{"injectables/CommonServices.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/SendEmailProps.html":{}}}],["host.switchtohttp",{"_index":484,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["html",{"_index":283,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["http",{"_index":460,"title":{},"body":{"classes/HandleError.html":{},"dependencies.html":{}}}],["http(err",{"_index":461,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexception",{"_index":464,"title":{},"body":{"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"guards/isLoggedIn.html":{}}}],["httpexception('a",{"_index":473,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexception('forbidden",{"_index":1023,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["httpexception('unauthorized",{"_index":1026,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["httpexception(custom.msg",{"_index":470,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexception(err.message",{"_index":467,"title":{},"body":{"classes/HandleError.html":{}}}],["httpexceptionfilter",{"_index":475,"title":{"classes/HttpExceptionFilter.html":{}},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["httponly",{"_index":331,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":1008,"title":{},"body":{"index.html":{}}}],["id",{"_index":293,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"classes/Products.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{}}}],["identifier",{"_index":888,"title":{},"body":{"coverage.html":{}}}],["ifavoritesrepository",{"_index":398,"title":{"interfaces/IFavoritesRepository.html":{}},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"coverage.html":{}}}],["img",{"_index":602,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["implements",{"_index":399,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"guards/isLoggedIn.html":{}}}],["implied",{"_index":1096,"title":{},"body":{"license.html":{}}}],["import",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{}}}],["include",{"_index":407,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["including",{"_index":1052,"title":{},"body":{"license.html":{}}}],["incorrect",{"_index":354,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":69,"title":{"index.html":{}},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"miscellaneous/functions.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":1070,"title":{},"body":{"license.html":{}}}],["info",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["inject",{"_index":115,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["inject('favorites",{"_index":400,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["inject('products",{"_index":643,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["inject('shopping",{"_index":516,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["inject('user",{"_index":402,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["injectable",{"_index":177,"title":{"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"injectables/UserRepository.html":{}},"body":{"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"guards/isLoggedIn.html":{}}}],["injectables",{"_index":178,"title":{},"body":{"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"injectables/UserRepository.html":{},"overview.html":{}}}],["installation",{"_index":969,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":972,"title":{},"body":{"index.html":{}}}],["interface",{"_index":271,"title":{"interfaces/Env.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{}},"body":{"injectables/CommonServices.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["interfaces",{"_index":304,"title":{},"body":{"interfaces/Env.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"overview.html":{}}}],["international",{"_index":1033,"title":{},"body":{"license.html":{}}}],["invalid",{"_index":349,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["invalidtoken",{"_index":348,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["isemail",{"_index":564,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["ishoppingcartrepository",{"_index":500,"title":{"interfaces/IShoppingCartRepository.html":{}},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{},"coverage.html":{}}}],["isloggedin",{"_index":44,"title":{"guards/isLoggedIn.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{},"coverage.html":{},"guards/isLoggedIn.html":{}}}],["isnotempty",{"_index":207,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{}}}],["ispopulated",{"_index":623,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["iuserrepository",{"_index":523,"title":{"interfaces/IUserRepository.html":{}},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["jobs/rmunverifiedusers.service.js",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":998,"title":{},"body":{"index.html":{}}}],["js/faker",{"_index":600,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"dependencies.html":{}}}],["json.parse(raw)['message",{"_index":492,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["jsonwebtoken",{"_index":269,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["jwt",{"_index":267,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"guards/isLoggedIn.html":{}}}],["jwt.sign",{"_index":576,"title":{},"body":{"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["jwt.verify",{"_index":276,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["jwt.verify(token",{"_index":1025,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["jwtpayload",{"_index":268,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["kamil",{"_index":1005,"title":{},"body":{"index.html":{}}}],["kind",{"_index":1095,"title":{},"body":{"license.html":{}}}],["later",{"_index":345,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"miscellaneous/variables.html":{}}}],["legal",{"_index":1085,"title":{},"body":{"license.html":{}}}],["legally",{"_index":1089,"title":{},"body":{"license.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["length",{"_index":208,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/RegisterBody.html":{}}}],["length(0",{"_index":565,"title":{},"body":{"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["length(3",{"_index":711,"title":{},"body":{"classes/RegisterBody.html":{}}}],["length(6",{"_index":210,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{}}}],["liability",{"_index":1111,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1108,"title":{},"body":{"license.html":{}}}],["license",{"_index":1011,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{},"properties.html":{}}}],["licensed",{"_index":988,"title":{},"body":{"index.html":{}}}],["licensor",{"_index":1077,"title":{},"body":{"license.html":{}}}],["limit",{"_index":937,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":1053,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1097,"title":{},"body":{"license.html":{}}}],["link",{"_index":273,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"license.html":{}}}],["literal",{"_index":676,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["load",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":1148,"title":{},"body":{"miscellaneous/variables.html":{}}}],["login",{"_index":73,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["login(@body",{"_index":145,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["login(body",{"_index":92,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["login(data",{"_index":186,"title":{},"body":{"injectables/AuthServices.html":{}}}],["loginbody",{"_index":93,"title":{"classes/LoginBody.html":{}},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"coverage.html":{}}}],["loginusecase",{"_index":166,"title":{"injectables/LoginUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/LoginUseCase.html":{},"coverage.html":{},"overview.html":{}}}],["made",{"_index":1072,"title":{},"body":{"license.html":{}}}],["manner",{"_index":1074,"title":{},"body":{"license.html":{}}}],["matching",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"guards/isLoggedIn.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":1079,"title":{},"body":{"license.html":{}}}],["maxage",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["measures",{"_index":1088,"title":{},"body":{"license.html":{}}}],["merchantability",{"_index":1099,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1057,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":944,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":70,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["miguel",{"_index":1036,"title":{},"body":{"license.html":{},"properties.html":{}}}],["miscellaneous",{"_index":952,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":987,"title":{},"body":{"index.html":{}}}],["mode",{"_index":977,"title":{},"body":{"index.html":{}}}],["model",{"_index":408,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/User.html":{}}}],["modify",{"_index":1056,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1000,"title":{},"body":{"index.html":{}}}],["msg",{"_index":143,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"controllers/UserControllers.html":{}}}],["msg[0",{"_index":495,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["myśliwiec",{"_index":1006,"title":{},"body":{"index.html":{}}}],["name",{"_index":87,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["nc",{"_index":1135,"title":{},"body":{"properties.html":{}}}],["nest",{"_index":966,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1010,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["nestjs/config",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["nestjs/core",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/RmUnverifiedUsers.html":{},"dependencies.html":{}}}],["nestjs/sequelize",{"_index":919,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":126,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"controllers/ProductsControllers.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{},"controllers/UserControllers.html":{},"dependencies.html":{}}}],["new",{"_index":466,"title":{},"body":{"classes/HandleError.html":{},"injectables/RmUnverifiedUsers.html":{},"coverage.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["newpasswd",{"_index":218,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"classes/UserServices.html":{}}}],["node.js",{"_index":958,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":308,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["nodemailer",{"_index":270,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"dependencies.html":{}}}],["nodemailer.createtransport",{"_index":256,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["noemailtoken",{"_index":359,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["noncommercial",{"_index":1031,"title":{},"body":{"license.html":{}}}],["none",{"_index":337,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["noninfringement",{"_index":1103,"title":{},"body":{"license.html":{}}}],["notfound",{"_index":368,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["noverifiedemail",{"_index":361,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["npm",{"_index":971,"title":{},"body":{"index.html":{}}}],["number",{"_index":291,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{}}}],["number(process.env.auth_duration_days",{"_index":322,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["number(process.env.port",{"_index":317,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["object.keys(field)[0",{"_index":548,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["observable",{"_index":1019,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["obtaining",{"_index":1044,"title":{},"body":{"license.html":{}}}],["occurred",{"_index":342,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"miscellaneous/variables.html":{}}}],["ok",{"_index":351,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["oldprice",{"_index":603,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["op",{"_index":641,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/RmUnverifiedUsers.html":{}}}],["op.like",{"_index":649,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["op.lt",{"_index":736,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["op.or",{"_index":646,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["open",{"_index":989,"title":{},"body":{"index.html":{}}}],["optional",{"_index":89,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["origin",{"_index":324,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["origin_addr",{"_index":309,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["others",{"_index":1090,"title":{},"body":{"license.html":{}}}],["otherwise",{"_index":1116,"title":{},"body":{"license.html":{}}}],["out",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1125,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":910,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":116,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["param('token",{"_index":158,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["paramdate",{"_index":731,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["parameters",{"_index":86,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["parser",{"_index":931,"title":{},"body":{"dependencies.html":{}}}],["particular",{"_index":1101,"title":{},"body":{"license.html":{}}}],["pass",{"_index":264,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["passwd",{"_index":202,"title":{},"body":{"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{}}}],["passwdrecovery",{"_index":74,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["passwdrecovery(@param('email",{"_index":153,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["passwdrecovery(email",{"_index":97,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["passwdrecoveryusecase",{"_index":167,"title":{"injectables/PasswdRecoveryUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"coverage.html":{},"overview.html":{}}}],["password",{"_index":355,"title":{},"body":{"interfaces/Env.html":{},"injectables/PasswdRecoveryUseCase.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":327,"title":{},"body":{"interfaces/Env.html":{},"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["patch('/change",{"_index":794,"title":{},"body":{"controllers/UserControllers.html":{}}}],["payload",{"_index":275,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["payload[payloadname",{"_index":278,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["payloadname",{"_index":247,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["permission",{"_index":1038,"title":{},"body":{"license.html":{}}}],["permits",{"_index":1093,"title":{},"body":{"license.html":{}}}],["person",{"_index":1043,"title":{},"body":{"license.html":{}}}],["please",{"_index":344,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["popular",{"_index":616,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["populate",{"_index":629,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["populateproductsservice",{"_index":18,"title":{"injectables/PopulateProductsService.html":{}},"body":{"modules/AppModule.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"coverage.html":{},"overview.html":{}}}],["port",{"_index":259,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/Env.html":{},"interfaces/SendEmailProps.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":117,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["post('/login",{"_index":94,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["post('/register",{"_index":105,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["post('/toggle",{"_index":808,"title":{},"body":{"controllers/UserControllers.html":{}}}],["prefix",{"_index":67,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["price",{"_index":604,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["primarykey",{"_index":414,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["private",{"_index":130,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["process.env.api_addr",{"_index":319,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":316,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.origin_addr",{"_index":318,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.secret",{"_index":323,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.smtp_pass",{"_index":321,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["process.env.smtp_user",{"_index":320,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["product",{"_index":626,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["productel",{"_index":596,"title":{"interfaces/ProductEl.html":{}},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"coverage.html":{}}}],["productid",{"_index":384,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["production",{"_index":979,"title":{},"body":{"index.html":{}}}],["productmodel",{"_index":644,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["productname",{"_index":601,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{}}}],["productrepositoryinterface",{"_index":631,"title":{"interfaces/ProductRepositoryInterface.html":{}},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"coverage.html":{}}}],["products",{"_index":396,"title":{"classes/Products.html":{}},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["products.controller.js",{"_index":690,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.create",{"_index":627,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["products.entity.js",{"_index":642,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["products.findall()).length",{"_index":624,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["products.providers.js",{"_index":692,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products.repository.js",{"_index":443,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"modules/ProductsModule.html":{}}}],["products.service.js",{"_index":689,"title":{},"body":{"modules/ProductsModule.html":{}}}],["products/products.entity.js",{"_index":397,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/User.html":{}}}],["productscontrollers",{"_index":672,"title":{"controllers/ProductsControllers.html":{}},"body":{"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":16,"title":{"modules/ProductsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ProductsModule.html":{},"modules.html":{},"overview.html":{}}}],["productsproviders",{"_index":691,"title":{},"body":{"modules/ProductsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["productsrepository",{"_index":437,"title":{"injectables/ProductsRepository.html":{}},"body":{"injectables/GetProductsUseCase.html":{},"interfaces/ProductRepositoryInterface.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"coverage.html":{},"overview.html":{}}}],["productsservices",{"_index":687,"title":{"injectables/ProductsServices.html":{}},"body":{"modules/ProductsModule.html":{},"injectables/ProductsServices.html":{},"coverage.html":{},"overview.html":{}}}],["progressive",{"_index":957,"title":{},"body":{"index.html":{}}}],["project",{"_index":990,"title":{},"body":{"index.html":{}}}],["promise",{"_index":253,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"guards/isLoggedIn.html":{}}}],["properties",{"_index":201,"title":{"properties.html":{}},"body":{"classes/ChangePasswdBody.html":{},"injectables/CommonServices.html":{},"interfaces/Env.html":{},"classes/Favorites.html":{},"classes/LoginBody.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"classes/Products.html":{},"classes/RegisterBody.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"properties.html":{}}}],["provide",{"_index":1069,"title":{},"body":{"license.html":{},"miscellaneous/variables.html":{}}}],["provided",{"_index":360,"title":{},"body":{"interfaces/Env.html":{},"license.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/favorite.providers.js",{"_index":850,"title":{},"body":{"modules/UserModule.html":{}}}],["providers/shopping.providers.js",{"_index":854,"title":{},"body":{"modules/UserModule.html":{}}}],["providers/user.providers.js",{"_index":848,"title":{},"body":{"modules/UserModule.html":{}}}],["public",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["publish",{"_index":1058,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1102,"title":{},"body":{"license.html":{}}}],["purposes",{"_index":1081,"title":{},"body":{"license.html":{}}}],["query",{"_index":118,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{}}}],["query('setcookie",{"_index":159,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["rate",{"_index":936,"title":{},"body":{"dependencies.html":{}}}],["raw",{"_index":487,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["raw.includes",{"_index":490,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["raw['message",{"_index":493,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["rawisstring",{"_index":489,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["read",{"_index":999,"title":{},"body":{"index.html":{}}}],["reasonable",{"_index":1073,"title":{},"body":{"license.html":{}}}],["recommended",{"_index":609,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["record",{"_index":536,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["recovery",{"_index":364,"title":{},"body":{"interfaces/Env.html":{},"injectables/PasswdRecoveryUseCase.html":{},"miscellaneous/variables.html":{}}}],["recovery/:email",{"_index":99,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["recoveryemail",{"_index":363,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["recoverylink",{"_index":587,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["recoverytoken",{"_index":585,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["redirect(`${this.configservice.get('env.origin_addr')}/login",{"_index":136,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["reflect",{"_index":943,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":75,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{}}}],["register(@body",{"_index":140,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["register(body",{"_index":103,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["register(data",{"_index":190,"title":{},"body":{"injectables/AuthServices.html":{}}}],["registerbody",{"_index":104,"title":{"classes/RegisterBody.html":{}},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"interfaces/IUserRepository.html":{},"classes/RegisterBody.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["registerusecase",{"_index":168,"title":{"injectables/RegisterUseCase.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"coverage.html":{},"overview.html":{}}}],["registerusercaseprops",{"_index":714,"title":{"interfaces/RegisterUserCaseProps.html":{}},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"coverage.html":{}}}],["repository",{"_index":968,"title":{},"body":{"index.html":{}}}],["req",{"_index":792,"title":{},"body":{"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{}}}],["req.cookies",{"_index":820,"title":{},"body":{"controllers/UserControllers.html":{}}}],["req.cookies?.token",{"_index":1022,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["req.params?.token",{"_index":1021,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["request",{"_index":793,"title":{},"body":{"controllers/UserControllers.html":{},"dependencies.html":{}}}],["res",{"_index":79,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserControllers.html":{}}}],["res.clearcookie('token",{"_index":827,"title":{},"body":{"controllers/UserControllers.html":{}}}],["res.cookie('token",{"_index":149,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["res.sendstatus(200",{"_index":160,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["res.status(200).json",{"_index":151,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["res.status(status).json",{"_index":491,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["reset",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["response",{"_index":80,"title":{},"body":{"controllers/AuthControllers.html":{},"classes/HttpExceptionFilter.html":{},"controllers/UserControllers.html":{}}}],["restrict",{"_index":537,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"license.html":{}}}],["restriction",{"_index":1051,"title":{},"body":{"license.html":{}}}],["restrictions",{"_index":1083,"title":{},"body":{"license.html":{}}}],["results",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"guards/isLoggedIn.html":{},"license.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":142,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/CommonServices.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"interfaces/SendEmailProps.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":91,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/FavoriteRepository.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"injectables/RegisterUseCase.html":{},"injectables/RmUnverifiedUsers.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{}}}],["rights",{"_index":1054,"title":{},"body":{"license.html":{}}}],["rmunverifiedusers",{"_index":19,"title":{"injectables/RmUnverifiedUsers.html":{}},"body":{"modules/AppModule.html":{},"injectables/RmUnverifiedUsers.html":{},"coverage.html":{},"overview.html":{}}}],["rootpath",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":593,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"index.html":{}}}],["rxjs",{"_index":946,"title":{},"body":{"dependencies.html":{},"guards/isLoggedIn.html":{}}}],["salt",{"_index":229,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["samesite",{"_index":336,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["save",{"_index":527,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["save(user",{"_index":541,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["scalable",{"_index":962,"title":{},"body":{"index.html":{}}}],["schedulemodule",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["search",{"_index":442,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"interfaces/ProductRepositoryInterface.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{}}}],["search.tolowercase",{"_index":650,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["secret",{"_index":310,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["secure",{"_index":261,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/Env.html":{},"interfaces/SendEmailProps.html":{},"miscellaneous/variables.html":{}}}],["sell",{"_index":1062,"title":{},"body":{"license.html":{}}}],["semantics",{"_index":939,"title":{},"body":{"dependencies.html":{}}}],["send",{"_index":366,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["sendemailprops",{"_index":251,"title":{"interfaces/SendEmailProps.html":{}},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"coverage.html":{}}}],["sendlink",{"_index":244,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["sendlink(undefined",{"_index":250,"title":{},"body":{"injectables/CommonServices.html":{}}}],["sequelize",{"_index":421,"title":{},"body":{"classes/Favorites.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"injectables/ProductsRepository.html":{},"injectables/RmUnverifiedUsers.html":{},"classes/ShoppingCart.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["sequelize.addmodels([user",{"_index":1149,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize.col('info",{"_index":651,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["sequelize.col('productname",{"_index":648,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["sequelize.sync",{"_index":1150,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sequelize.where(sequelize.fn('lower",{"_index":647,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["server",{"_index":341,"title":{},"body":{"interfaces/Env.html":{},"classes/HandleError.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["servermsg",{"_index":338,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["serveroot",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticoptions",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["setcookie",{"_index":108,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["shall",{"_index":1105,"title":{},"body":{"license.html":{}}}],["shopping",{"_index":803,"title":{},"body":{"controllers/UserControllers.html":{},"miscellaneous/variables.html":{}}}],["shopping.entity.js",{"_index":515,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["shopping/shopping.entity.js",{"_index":779,"title":{},"body":{"classes/User.html":{}}}],["shopping/shopping.repository.js",{"_index":453,"title":{},"body":{"injectables/GetShoppingCartUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"modules/UserModule.html":{}}}],["shoppingcart",{"_index":514,"title":{"classes/ShoppingCart.html":{}},"body":{"interfaces/IShoppingCartRepository.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppingcartmodel",{"_index":517,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["shoppingcartproducts",{"_index":521,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{},"classes/User.html":{}}}],["shoppingcartproviders",{"_index":853,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppingcartrepository",{"_index":450,"title":{"injectables/ShoppingCartRepository.html":{}},"body":{"injectables/GetShoppingCartUseCase.html":{},"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{}}}],["side",{"_index":963,"title":{},"body":{"index.html":{}}}],["smtp.gmail.com",{"_index":258,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["smtp_pass",{"_index":311,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["smtp_user",{"_index":312,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["software",{"_index":1046,"title":{},"body":{"license.html":{}}}],["source",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthControllers.html":{},"modules/AuthModule.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"modules/CommonModule.html":{},"injectables/CommonServices.html":{},"modules/DatabaseModule.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"index.html":{},"guards/isLoggedIn.html":{}}}],["sponsors",{"_index":993,"title":{},"body":{"index.html":{}}}],["sqlite",{"_index":1145,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":950,"title":{},"body":{"dependencies.html":{}}}],["src/.../configuration.ts",{"_index":1137,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.providers.ts",{"_index":1138,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../favorite.providers.ts",{"_index":1139,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":954,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../products.providers.ts",{"_index":1140,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shopping.providers.ts",{"_index":1141,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.providers.ts",{"_index":1142,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/configuration.ts",{"_index":305,"title":{},"body":{"interfaces/Env.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/auth/auth.controller.ts",{"_index":66,"title":{},"body":{"controllers/AuthControllers.html":{},"coverage.html":{}}}],["src/core/auth/auth.controller.ts:32",{"_index":85,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:44",{"_index":106,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:54",{"_index":95,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:65",{"_index":100,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.controller.ts:76",{"_index":111,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["src/core/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/core/auth/auth.service.ts",{"_index":179,"title":{},"body":{"injectables/AuthServices.html":{},"coverage.html":{}}}],["src/core/auth/auth.service.ts:11",{"_index":182,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:25",{"_index":184,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:30",{"_index":191,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:34",{"_index":187,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/auth.service.ts:38",{"_index":189,"title":{},"body":{"injectables/AuthServices.html":{}}}],["src/core/auth/dto/loginbody.dto.ts",{"_index":559,"title":{},"body":{"classes/LoginBody.html":{},"coverage.html":{}}}],["src/core/auth/dto/loginbody.dto.ts:14",{"_index":563,"title":{},"body":{"classes/LoginBody.html":{}}}],["src/core/auth/dto/loginbody.dto.ts:9",{"_index":562,"title":{},"body":{"classes/LoginBody.html":{}}}],["src/core/auth/dto/registerbody.dto.ts",{"_index":704,"title":{},"body":{"classes/RegisterBody.html":{},"coverage.html":{}}}],["src/core/auth/dto/registerbody.dto.ts:14",{"_index":706,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/core/auth/dto/registerbody.dto.ts:19",{"_index":707,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/core/auth/dto/registerbody.dto.ts:8",{"_index":710,"title":{},"body":{"classes/RegisterBody.html":{}}}],["src/core/auth/usecases/emailverify.usecase.ts",{"_index":295,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"coverage.html":{}}}],["src/core/auth/usecases/emailverify.usecase.ts:14",{"_index":297,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["src/core/auth/usecases/emailverify.usecase.ts:6",{"_index":296,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["src/core/auth/usecases/login.usecase.ts",{"_index":567,"title":{},"body":{"injectables/LoginUseCase.html":{},"coverage.html":{}}}],["src/core/auth/usecases/login.usecase.ts:17",{"_index":570,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["src/core/auth/usecases/login.usecase.ts:9",{"_index":568,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["src/core/auth/usecases/passwdrecovery.usecase.ts",{"_index":581,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{},"coverage.html":{}}}],["src/core/auth/usecases/passwdrecovery.usecase.ts:18",{"_index":583,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["src/core/auth/usecases/passwdrecovery.usecase.ts:8",{"_index":582,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["src/core/auth/usecases/register.usecase.ts",{"_index":712,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"coverage.html":{}}}],["src/core/auth/usecases/register.usecase.ts:15",{"_index":713,"title":{},"body":{"injectables/RegisterUseCase.html":{}}}],["src/core/auth/usecases/register.usecase.ts:25",{"_index":715,"title":{},"body":{"injectables/RegisterUseCase.html":{}}}],["src/core/common/common.module.ts",{"_index":239,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/core/common/common.service.ts",{"_index":241,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"coverage.html":{}}}],["src/core/common/common.service.ts:13",{"_index":245,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/common/common.service.ts:16",{"_index":248,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/common/common.service.ts:24",{"_index":266,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/common/common.service.ts:34",{"_index":252,"title":{},"body":{"injectables/CommonServices.html":{}}}],["src/core/products/products.controller.ts",{"_index":673,"title":{},"body":{"controllers/ProductsControllers.html":{},"coverage.html":{}}}],["src/core/products/products.controller.ts:15",{"_index":677,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["src/core/products/products.entity.ts",{"_index":652,"title":{},"body":{"classes/Products.html":{},"coverage.html":{}}}],["src/core/products/products.entity.ts:18",{"_index":658,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:24",{"_index":656,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:30",{"_index":663,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:36",{"_index":660,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:42",{"_index":659,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:48",{"_index":661,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:54",{"_index":662,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.entity.ts:62",{"_index":666,"title":{},"body":{"classes/Products.html":{}}}],["src/core/products/products.module.ts",{"_index":688,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/core/products/products.providers.ts",{"_index":898,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/products/products.repository.ts",{"_index":632,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"coverage.html":{}}}],["src/core/products/products.repository.ts:12",{"_index":694,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:18",{"_index":695,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:22",{"_index":696,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:26",{"_index":697,"title":{},"body":{"injectables/ProductsRepository.html":{}}}],["src/core/products/products.repository.ts:6",{"_index":636,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{}}}],["src/core/products/products.repository.ts:7",{"_index":638,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{}}}],["src/core/products/products.repository.ts:8",{"_index":640,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{}}}],["src/core/products/products.service.ts",{"_index":698,"title":{},"body":{"injectables/ProductsServices.html":{},"coverage.html":{}}}],["src/core/products/products.service.ts:11",{"_index":702,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["src/core/products/products.service.ts:5",{"_index":700,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["src/core/products/usecases/getproducts.usecase.ts",{"_index":435,"title":{},"body":{"injectables/GetProductsUseCase.html":{},"coverage.html":{}}}],["src/core/products/usecases/getproducts.usecase.ts:5",{"_index":438,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["src/core/products/usecases/getproducts.usecase.ts:8",{"_index":441,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["src/core/user/dto/changepasswdbody.dto.ts",{"_index":200,"title":{},"body":{"classes/ChangePasswdBody.html":{},"coverage.html":{}}}],["src/core/user/dto/changepasswdbody.dto.ts:8",{"_index":205,"title":{},"body":{"classes/ChangePasswdBody.html":{}}}],["src/core/user/dto/togglefavoritebody.dto.ts",{"_index":747,"title":{},"body":{"classes/ToggleFavoriteBody.html":{},"coverage.html":{}}}],["src/core/user/dto/togglefavoritebody.dto.ts:7",{"_index":749,"title":{},"body":{"classes/ToggleFavoriteBody.html":{}}}],["src/core/user/dto/toggleshoppingcartbody.dto.ts",{"_index":760,"title":{},"body":{"classes/ToggleShoppingCartBody.html":{},"coverage.html":{}}}],["src/core/user/dto/toggleshoppingcartbody.dto.ts:7",{"_index":761,"title":{},"body":{"classes/ToggleShoppingCartBody.html":{}}}],["src/core/user/favorites/favorite.entity.ts",{"_index":411,"title":{},"body":{"classes/Favorites.html":{},"coverage.html":{}}}],["src/core/user/favorites/favorite.entity.ts:15",{"_index":416,"title":{},"body":{"classes/Favorites.html":{}}}],["src/core/user/favorites/favorite.entity.ts:19",{"_index":415,"title":{},"body":{"classes/Favorites.html":{}}}],["src/core/user/favorites/favorite.repository.ts",{"_index":374,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"coverage.html":{}}}],["src/core/user/favorites/favorite.repository.ts:10",{"_index":498,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:14",{"_index":381,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:22",{"_index":392,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:28",{"_index":388,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:32",{"_index":385,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:36",{"_index":390,"title":{},"body":{"injectables/FavoriteRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:7",{"_index":499,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:8",{"_index":497,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/favorites/favorite.repository.ts:9",{"_index":496,"title":{},"body":{"interfaces/IFavoritesRepository.html":{}}}],["src/core/user/providers/favorite.providers.ts",{"_index":899,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/user/providers/shopping.providers.ts",{"_index":900,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/user/providers/user.providers.ts",{"_index":901,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/user/shopping/shopping.entity.ts",{"_index":737,"title":{},"body":{"classes/ShoppingCart.html":{},"coverage.html":{}}}],["src/core/user/shopping/shopping.entity.ts:15",{"_index":739,"title":{},"body":{"classes/ShoppingCart.html":{}}}],["src/core/user/shopping/shopping.entity.ts:19",{"_index":738,"title":{},"body":{"classes/ShoppingCart.html":{}}}],["src/core/user/shopping/shopping.repository.ts",{"_index":501,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{},"coverage.html":{}}}],["src/core/user/shopping/shopping.repository.ts:10",{"_index":513,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:14",{"_index":741,"title":{},"body":{"injectables/ShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:22",{"_index":744,"title":{},"body":{"injectables/ShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:31",{"_index":743,"title":{},"body":{"injectables/ShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:35",{"_index":742,"title":{},"body":{"injectables/ShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:39",{"_index":745,"title":{},"body":{"injectables/ShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:7",{"_index":511,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:8",{"_index":509,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{}}}],["src/core/user/shopping/shopping.repository.ts:9",{"_index":507,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{}}}],["src/core/user/usecases/changepasswd.usecase.ts",{"_index":212,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/changepasswd.usecase.ts:15",{"_index":219,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["src/core/user/usecases/changepasswd.usecase.ts:7",{"_index":216,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["src/core/user/usecases/deleteuser.usecase.ts",{"_index":288,"title":{},"body":{"injectables/DeleteUserUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/deleteuser.usecase.ts:14",{"_index":292,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["src/core/user/usecases/deleteuser.usecase.ts:6",{"_index":289,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["src/core/user/usecases/getfavorites.usecase.ts",{"_index":428,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/getfavorites.usecase.ts:5",{"_index":430,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{}}}],["src/core/user/usecases/getfavorites.usecase.ts:8",{"_index":431,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{}}}],["src/core/user/usecases/getshopping.usecase.ts",{"_index":448,"title":{},"body":{"injectables/GetShoppingCartUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/getshopping.usecase.ts:10",{"_index":452,"title":{},"body":{"injectables/GetShoppingCartUseCase.html":{}}}],["src/core/user/usecases/getshopping.usecase.ts:5",{"_index":451,"title":{},"body":{"injectables/GetShoppingCartUseCase.html":{}}}],["src/core/user/usecases/getuser.usecase.ts",{"_index":456,"title":{},"body":{"injectables/GetUserUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/getuser.usecase.ts:14",{"_index":458,"title":{},"body":{"injectables/GetUserUseCase.html":{}}}],["src/core/user/usecases/getuser.usecase.ts:6",{"_index":457,"title":{},"body":{"injectables/GetUserUseCase.html":{}}}],["src/core/user/usecases/togglefavorite.usecase.ts",{"_index":751,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/togglefavorite.usecase.ts:11",{"_index":754,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["src/core/user/usecases/togglefavorite.usecase.ts:5",{"_index":752,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["src/core/user/usecases/toggleshopping.usecase.ts",{"_index":763,"title":{},"body":{"injectables/ToggleShoppingCartUseCase.html":{},"coverage.html":{}}}],["src/core/user/usecases/toggleshopping.usecase.ts:11",{"_index":765,"title":{},"body":{"injectables/ToggleShoppingCartUseCase.html":{}}}],["src/core/user/usecases/toggleshopping.usecase.ts:5",{"_index":764,"title":{},"body":{"injectables/ToggleShoppingCartUseCase.html":{}}}],["src/core/user/user.controller.ts",{"_index":785,"title":{},"body":{"controllers/UserControllers.html":{},"coverage.html":{}}}],["src/core/user/user.controller.ts:110",{"_index":804,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:35",{"_index":806,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:46",{"_index":795,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:60",{"_index":798,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:74",{"_index":809,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:85",{"_index":801,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.controller.ts:96",{"_index":811,"title":{},"body":{"controllers/UserControllers.html":{}}}],["src/core/user/user.entity.ts",{"_index":769,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/core/user/user.entity.ts:19",{"_index":772,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:25",{"_index":775,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:31",{"_index":770,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:38",{"_index":777,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:44",{"_index":773,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:53",{"_index":771,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.entity.ts:62",{"_index":774,"title":{},"body":{"classes/User.html":{}}}],["src/core/user/user.module.ts",{"_index":840,"title":{},"body":{"modules/UserModule.html":{}}}],["src/core/user/user.repository.ts",{"_index":524,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["src/core/user/user.repository.ts:13",{"_index":539,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:17",{"_index":533,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:18",{"_index":544,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:19",{"_index":542,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:20",{"_index":530,"title":{},"body":{"interfaces/IUserRepository.html":{}}}],["src/core/user/user.repository.ts:24",{"_index":856,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:30",{"_index":859,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:47",{"_index":858,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:55",{"_index":861,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:64",{"_index":860,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.repository.ts:68",{"_index":857,"title":{},"body":{"injectables/UserRepository.html":{}}}],["src/core/user/user.service.ts",{"_index":862,"title":{},"body":{"classes/UserServices.html":{},"coverage.html":{}}}],["src/core/user/user.service.ts:11",{"_index":863,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:31",{"_index":873,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:36",{"_index":865,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:41",{"_index":867,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:46",{"_index":875,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:51",{"_index":869,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:56",{"_index":877,"title":{},"body":{"classes/UserServices.html":{}}}],["src/core/user/user.service.ts:61",{"_index":871,"title":{},"body":{"classes/UserServices.html":{}}}],["src/database/database.module.ts",{"_index":284,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/database.providers.ts",{"_index":904,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/seed/populateproducts.service.ts",{"_index":591,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"coverage.html":{}}}],["src/database/seed/populateproducts.service.ts:17",{"_index":594,"title":{},"body":{"injectables/PopulateProductsService.html":{}}}],["src/database/seed/populateproducts.service.ts:23",{"_index":595,"title":{},"body":{"injectables/PopulateProductsService.html":{}}}],["src/database/seed/populateproducts.service.ts:52",{"_index":597,"title":{},"body":{"injectables/PopulateProductsService.html":{}}}],["src/filters/httpexception.filter.ts",{"_index":476,"title":{},"body":{"classes/HttpExceptionFilter.html":{},"coverage.html":{}}}],["src/filters/httpexception.filter.ts:11",{"_index":480,"title":{},"body":{"classes/HttpExceptionFilter.html":{}}}],["src/guard/isloggedin.guard.ts",{"_index":905,"title":{},"body":{"coverage.html":{},"guards/isLoggedIn.html":{}}}],["src/guard/isloggedin.guard.ts:13",{"_index":1014,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["src/guard/isloggedin.guard.ts:19",{"_index":1017,"title":{},"body":{"guards/isLoggedIn.html":{}}}],["src/jobs/rmunverifiedusers.service.ts",{"_index":725,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{},"coverage.html":{}}}],["src/jobs/rmunverifiedusers.service.ts:9",{"_index":728,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["src/main.ts",{"_index":907,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/utils/handleerror.ts",{"_index":459,"title":{},"body":{"classes/HandleError.html":{},"coverage.html":{}}}],["src/utils/handleerror.ts:4",{"_index":462,"title":{},"body":{"classes/HandleError.html":{}}}],["start",{"_index":975,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":978,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":980,"title":{},"body":{"index.html":{}}}],["started",{"_index":956,"title":{"index.html":{},"license.html":{}},"body":{}}],["starter",{"_index":967,"title":{},"body":{"index.html":{}}}],["statements",{"_index":889,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"classes/HandleError.html":{},"dependencies.html":{}}}],["status",{"_index":227,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HttpExceptionFilter.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["status(200",{"_index":135,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["stay",{"_index":1002,"title":{},"body":{"index.html":{}}}],["storage",{"_index":1146,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":281,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{},"properties.html":{}}}],["string",{"_index":78,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/GetProductsUseCase.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{}}}],["subject",{"_index":272,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"license.html":{}}}],["sublicense",{"_index":1060,"title":{},"body":{"license.html":{}}}],["successful",{"_index":353,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["successfully",{"_index":365,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["suggests",{"_index":1076,"title":{},"body":{"license.html":{}}}],["support",{"_index":994,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1121,"title":{},"body":{"modules.html":{}}}],["table",{"_index":420,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{},"coverage.html":{}}}],["tablename",{"_index":423,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":909,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":534,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["target.destroy",{"_index":554,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["technological",{"_index":1087,"title":{},"body":{"license.html":{}}}],["terms",{"_index":1086,"title":{},"body":{"license.html":{}}}],["test",{"_index":983,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":986,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":985,"title":{},"body":{"index.html":{}}}],["tests",{"_index":982,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":992,"title":{},"body":{"index.html":{}}}],["this.authservices.emailverify(token",{"_index":134,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.authservices.login(body",{"_index":148,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.authservices.passwdrecovery(email",{"_index":154,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.authservices.register(body",{"_index":141,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.changepasswdusecase.execute(email",{"_index":880,"title":{},"body":{"classes/UserServices.html":{}}}],["this.commonservices.extractjwtpayload(emailtoken",{"_index":193,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.commonservices.extractjwtpayload(token",{"_index":878,"title":{},"body":{"classes/UserServices.html":{}}}],["this.commonservices.sendlink",{"_index":590,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.configservice.get('authmsg.emailexists",{"_index":716,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.configservice.get('authmsg.incorrect",{"_index":575,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["this.configservice.get('authmsg.noverifiedemail",{"_index":571,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["this.configservice.get('authmsg.ok",{"_index":152,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('authmsg.recoveryemail",{"_index":155,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('cookie",{"_index":150,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('env.api_addr')}/auth/email",{"_index":722,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.configservice.get('env.api_addr')}/public/product.webp",{"_index":613,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["this.configservice.get('env.auth_duration_days",{"_index":579,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["this.configservice.get('env.origin_addr')}/passwd",{"_index":588,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["this.configservice.get('env.secret",{"_index":277,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"guards/isLoggedIn.html":{}}}],["this.configservice.get('env.smtp_pass",{"_index":265,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["this.configservice.get('env.smtp_user",{"_index":263,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["this.configservice.get('servermsg.invalidtoken",{"_index":299,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["this.configservice.get('usermsg.created",{"_index":144,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["this.configservice.get('usermsg.deleted",{"_index":828,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.configservice.get('usermsg.notfound",{"_index":224,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{}}}],["this.configservice.get('usermsg.updated",{"_index":824,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.deleteuserusecase.execute(id",{"_index":881,"title":{},"body":{"classes/UserServices.html":{}}}],["this.emailverifyusecase.execute(email",{"_index":194,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.env.api_addr",{"_index":326,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["this.env.auth_duration_days",{"_index":332,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["this.env.origin_addr",{"_index":325,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["this.favoritemodel.create",{"_index":405,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["this.favoritemodel.destroy",{"_index":404,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["this.favoritemodel.findone",{"_index":403,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{}}}],["this.favoriterepository.createfavorite(userid",{"_index":758,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["this.favoriterepository.deletefavorite(userid",{"_index":757,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["this.favoriterepository.getfavorites(id",{"_index":433,"title":{},"body":{"injectables/GetFavoritesUseCase.html":{}}}],["this.favoriterepository.getonefavorite",{"_index":756,"title":{},"body":{"injectables/ToggleFavoriteUseCase.html":{}}}],["this.generateproducts",{"_index":606,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["this.getfavoritesusecase.execute(id",{"_index":883,"title":{},"body":{"classes/UserServices.html":{}}}],["this.getproductsusecase.execute",{"_index":683,"title":{},"body":{"controllers/ProductsControllers.html":{}}}],["this.getproductsusecase.execute(search",{"_index":703,"title":{},"body":{"injectables/ProductsServices.html":{}}}],["this.getshoppingcartusecase.execute(id",{"_index":885,"title":{},"body":{"classes/UserServices.html":{}}}],["this.getuserusecase.execute(id",{"_index":879,"title":{},"body":{"classes/UserServices.html":{}}}],["this.loginusecase.execute(data",{"_index":196,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.passwdrecoveryusecase.execute(email",{"_index":197,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.productmodel.findall",{"_index":645,"title":{},"body":{"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{}}}],["this.products",{"_index":605,"title":{},"body":{"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{}}}],["this.productsrepository.getallproducts",{"_index":446,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["this.productsrepository.getbycategory(category",{"_index":444,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["this.productsrepository.getbygenericsearch(search",{"_index":445,"title":{},"body":{"injectables/GetProductsUseCase.html":{}}}],["this.registerusecase.execute(data",{"_index":195,"title":{},"body":{"injectables/AuthServices.html":{}}}],["this.save(user",{"_index":556,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.shoppingcartmodel.create",{"_index":520,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["this.shoppingcartmodel.destroy",{"_index":519,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["this.shoppingcartmodel.findone",{"_index":518,"title":{},"body":{"interfaces/IShoppingCartRepository.html":{},"injectables/ShoppingCartRepository.html":{}}}],["this.shoppingcartrepository.createshoppingcart(userid",{"_index":768,"title":{},"body":{"injectables/ToggleShoppingCartUseCase.html":{}}}],["this.shoppingcartrepository.deleteshoppingcart(userid",{"_index":767,"title":{},"body":{"injectables/ToggleShoppingCartUseCase.html":{}}}],["this.shoppingcartrepository.getoneshoppingcart",{"_index":766,"title":{},"body":{"injectables/ToggleShoppingCartUseCase.html":{}}}],["this.shoppingcartrepository.getshoppingcart(id",{"_index":454,"title":{},"body":{"injectables/GetShoppingCartUseCase.html":{}}}],["this.togglefavoriteusecase.execute(userid",{"_index":882,"title":{},"body":{"classes/UserServices.html":{}}}],["this.toggleshoppingcartusecase.execute(userid",{"_index":884,"title":{},"body":{"classes/UserServices.html":{}}}],["this.transporter.sendmail",{"_index":279,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["this.usermodel.create(userattributes",{"_index":558,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.usermodel.destroy",{"_index":553,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.usermodel.findone",{"_index":406,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["this.userrepository.create",{"_index":720,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.userrepository.delete(user",{"_index":294,"title":{},"body":{"injectables/DeleteUserUseCase.html":{}}}],["this.userrepository.findbyfield",{"_index":223,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["this.userrepository.save(user",{"_index":302,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{}}}],["this.userrepository.updatefield",{"_index":233,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{}}}],["this.userservices.changepasswd(token",{"_index":823,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.deleteuser(token",{"_index":826,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.getfavorites(token",{"_index":832,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.getshoppingcart(token",{"_index":835,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.getuser(token",{"_index":821,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.togglefavorite(token",{"_index":830,"title":{},"body":{"controllers/UserControllers.html":{}}}],["this.userservices.toggleshoppingcart(token",{"_index":833,"title":{},"body":{"controllers/UserControllers.html":{}}}],["through",{"_index":665,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["throw",{"_index":225,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"guards/isLoggedIn.html":{}}}],["timestamps",{"_index":424,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{}}}],["togglefavorite",{"_index":789,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["togglefavorite(@body",{"_index":829,"title":{},"body":{"controllers/UserControllers.html":{}}}],["togglefavorite(body",{"_index":807,"title":{},"body":{"controllers/UserControllers.html":{}}}],["togglefavorite(token",{"_index":874,"title":{},"body":{"classes/UserServices.html":{}}}],["togglefavoritebody",{"_index":746,"title":{"classes/ToggleFavoriteBody.html":{}},"body":{"classes/ToggleFavoriteBody.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["togglefavoriteusecase",{"_index":750,"title":{"injectables/ToggleFavoriteUseCase.html":{}},"body":{"injectables/ToggleFavoriteUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["toggleshoppingcart",{"_index":790,"title":{},"body":{"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["toggleshoppingcart(body",{"_index":810,"title":{},"body":{"controllers/UserControllers.html":{}}}],["toggleshoppingcart(token",{"_index":876,"title":{},"body":{"classes/UserServices.html":{}}}],["toggleshoppingcartbody",{"_index":759,"title":{"classes/ToggleShoppingCartBody.html":{}},"body":{"classes/ToggleShoppingCartBody.html":{},"controllers/UserControllers.html":{},"coverage.html":{}}}],["toggleshoppingcartusecase",{"_index":762,"title":{"injectables/ToggleShoppingCartUseCase.html":{}},"body":{"injectables/ToggleShoppingCartUseCase.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{},"overview.html":{}}}],["token",{"_index":90,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/CommonServices.html":{},"interfaces/Env.html":{},"injectables/LoginUseCase.html":{},"interfaces/SendEmailProps.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["tokenvalidator",{"_index":76,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["tokenvalidator(token",{"_index":107,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["tort",{"_index":1115,"title":{},"body":{"license.html":{}}}],["touch",{"_index":1003,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":926,"title":{},"body":{"dependencies.html":{}}}],["transporter",{"_index":242,"title":{},"body":{"injectables/CommonServices.html":{},"interfaces/SendEmailProps.html":{}}}],["true",{"_index":262,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"classes/Favorites.html":{},"injectables/GetUserUseCase.html":{},"classes/Products.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":132,"title":{},"body":{"controllers/AuthControllers.html":{},"interfaces/Env.html":{},"classes/HandleError.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"controllers/ProductsControllers.html":{},"injectables/RmUnverifiedUsers.html":{},"controllers/UserControllers.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["twitter",{"_index":1009,"title":{},"body":{"index.html":{}}}],["type",{"_index":88,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"classes/ChangePasswdBody.html":{},"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/LoginBody.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/PopulateProductsService.html":{},"interfaces/ProductEl.html":{},"interfaces/ProductRepositoryInterface.html":{},"classes/Products.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsRepository.html":{},"injectables/ProductsServices.html":{},"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"classes/ToggleFavoriteBody.html":{},"injectables/ToggleFavoriteUseCase.html":{},"classes/ToggleShoppingCartBody.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"classes/UserServices.html":{},"coverage.html":{},"guards/isLoggedIn.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":401,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/HttpExceptionFilter.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"interfaces/ProductRepositoryInterface.html":{},"injectables/ProductsRepository.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["types",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":422,"title":{},"body":{"classes/Favorites.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"classes/User.html":{},"dependencies.html":{},"index.html":{}}}],["uname",{"_index":705,"title":{},"body":{"classes/RegisterBody.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"classes/User.html":{}}}],["undefined",{"_index":413,"title":{},"body":{"classes/Favorites.html":{},"interfaces/IUserRepository.html":{},"classes/Products.html":{},"classes/ShoppingCart.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["unit",{"_index":981,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":102,"title":{},"body":{"controllers/AuthControllers.html":{},"injectables/AuthServices.html":{},"injectables/GetFavoritesUseCase.html":{},"injectables/GetProductsUseCase.html":{},"injectables/GetShoppingCartUseCase.html":{},"injectables/GetUserUseCase.html":{},"injectables/LoginUseCase.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsServices.html":{},"controllers/UserControllers.html":{},"classes/UserServices.html":{}}}],["updated",{"_index":372,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["updatedat",{"_index":780,"title":{},"body":{"classes/User.html":{}}}],["updatefield",{"_index":528,"title":{"interfaces/UpdateField.html":{}},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{},"coverage.html":{}}}],["updatefield(undefined",{"_index":543,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["use",{"_index":1055,"title":{},"body":{"license.html":{}}}],["usecases/changepasswd.usecase.js",{"_index":846,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/deleteuser.usecase.js",{"_index":843,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/emailverify.usecase.js",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/getfavorites.usecase.js",{"_index":845,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/getproducts.usecase.js",{"_index":678,"title":{},"body":{"controllers/ProductsControllers.html":{},"modules/ProductsModule.html":{},"injectables/ProductsServices.html":{}}}],["usecases/getshopping.usecase.js",{"_index":852,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/getuser.usecase.js",{"_index":842,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/login.usecase.js",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/passwdrecovery.usecase.js",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/register.usecase.js",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthServices.html":{}}}],["usecases/togglefavorite.usecase.js",{"_index":844,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usecases/toggleshopping.usecase.js",{"_index":851,"title":{},"body":{"modules/UserModule.html":{},"classes/UserServices.html":{}}}],["usefactory",{"_index":1143,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":119,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["useguards(isloggedin",{"_index":157,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/UserControllers.html":{}}}],["user",{"_index":222,"title":{"classes/User.html":{}},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/CommonServices.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"interfaces/Env.html":{},"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"classes/Products.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/SendEmailProps.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"controllers/UserControllers.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.controller.js",{"_index":841,"title":{},"body":{"modules/UserModule.html":{}}}],["user.destroy",{"_index":734,"title":{},"body":{"injectables/RmUnverifiedUsers.html":{}}}],["user.entity.js",{"_index":395,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["user.id",{"_index":577,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["user.passwd",{"_index":574,"title":{},"body":{"injectables/LoginUseCase.html":{}}}],["user.repository.js",{"_index":220,"title":{},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/GetUserUseCase.html":{},"modules/UserModule.html":{}}}],["user.save",{"_index":557,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["user.service.js",{"_index":814,"title":{},"body":{"controllers/UserControllers.html":{},"modules/UserModule.html":{}}}],["user.verified_email",{"_index":301,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"injectables/LoginUseCase.html":{}}}],["user/favorites/favorite.entity.js",{"_index":669,"title":{},"body":{"classes/Products.html":{}}}],["user/user.entity.js",{"_index":668,"title":{},"body":{"classes/Products.html":{}}}],["user/user.module.js",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["user/user.repository.js",{"_index":298,"title":{},"body":{"injectables/EmailVerifyUseCase.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["user[fieldname",{"_index":555,"title":{},"body":{"interfaces/IUserRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["userattributes",{"_index":531,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/UserRepository.html":{}}}],["usercontrollers",{"_index":784,"title":{"controllers/UserControllers.html":{}},"body":{"controllers/UserControllers.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userexists",{"_index":584,"title":{},"body":{"injectables/PasswdRecoveryUseCase.html":{}}}],["userid",{"_index":386,"title":{},"body":{"injectables/FavoriteRepository.html":{},"classes/Favorites.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"classes/ShoppingCart.html":{},"injectables/ShoppingCartRepository.html":{},"injectables/ToggleFavoriteUseCase.html":{},"injectables/ToggleShoppingCartUseCase.html":{},"classes/User.html":{},"classes/UserServices.html":{}}}],["usermodel",{"_index":380,"title":{},"body":{"injectables/FavoriteRepository.html":{},"interfaces/IFavoritesRepository.html":{},"interfaces/IShoppingCartRepository.html":{},"interfaces/IUserRepository.html":{},"injectables/ShoppingCartRepository.html":{},"interfaces/UpdateField.html":{},"injectables/UserRepository.html":{}}}],["usermodule",{"_index":17,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["usermsg",{"_index":367,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["userproviders",{"_index":847,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":215,"title":{"injectables/UserRepository.html":{}},"body":{"injectables/ChangePasswdUseCase.html":{},"injectables/DeleteUserUseCase.html":{},"injectables/EmailVerifyUseCase.html":{},"injectables/GetUserUseCase.html":{},"interfaces/IUserRepository.html":{},"injectables/LoginUseCase.html":{},"injectables/PasswdRecoveryUseCase.html":{},"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{},"interfaces/UpdateField.html":{},"modules/UserModule.html":{},"injectables/UserRepository.html":{},"coverage.html":{},"overview.html":{}}}],["users",{"_index":653,"title":{},"body":{"classes/Products.html":{},"classes/User.html":{}}}],["userservices",{"_index":813,"title":{"classes/UserServices.html":{}},"body":{"controllers/UserControllers.html":{},"modules/UserModule.html":{},"classes/UserServices.html":{},"coverage.html":{}}}],["usevalue",{"_index":1151,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utils/handleerror.js",{"_index":114,"title":{},"body":{"controllers/AuthControllers.html":{},"controllers/ProductsControllers.html":{},"controllers/UserControllers.html":{}}}],["validator",{"_index":209,"title":{},"body":{"classes/ChangePasswdBody.html":{},"classes/LoginBody.html":{},"classes/RegisterBody.html":{},"classes/ToggleFavoriteBody.html":{},"classes/ToggleShoppingCartBody.html":{},"dependencies.html":{}}}],["validator/:token",{"_index":156,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["validator/:token')@useguards(isloggedin",{"_index":110,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["value",{"_index":255,"title":{},"body":{"injectables/CommonServices.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":891,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1136,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":724,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["verified",{"_index":362,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["verified_email",{"_index":551,"title":{},"body":{"interfaces/IUserRepository.html":{},"injectables/RmUnverifiedUsers.html":{},"interfaces/UpdateField.html":{},"classes/User.html":{},"injectables/UserRepository.html":{}}}],["verify/${emailtoken",{"_index":723,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["verify/:token",{"_index":83,"title":{},"body":{"controllers/AuthControllers.html":{}}}],["verifylink",{"_index":721,"title":{},"body":{"injectables/RegisterUseCase.html":{},"interfaces/RegisterUserCaseProps.html":{}}}],["version",{"_index":1131,"title":{},"body":{"properties.html":{}}}],["void",{"_index":463,"title":{},"body":{"classes/HandleError.html":{},"classes/HttpExceptionFilter.html":{}}}],["warranties",{"_index":1098,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1094,"title":{},"body":{"license.html":{}}}],["watch",{"_index":976,"title":{},"body":{"index.html":{}}}],["way",{"_index":1075,"title":{},"body":{"license.html":{}}}],["website",{"_index":1007,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":340,"title":{},"body":{"interfaces/Env.html":{},"miscellaneous/variables.html":{}}}],["whether",{"_index":1112,"title":{},"body":{"license.html":{}}}],["without",{"_index":1050,"title":{},"body":{"license.html":{}}}],["yes",{"_index":249,"title":{},"body":{"injectables/CommonServices.html":{},"injectables/GetProductsUseCase.html":{},"interfaces/IUserRepository.html":{},"controllers/ProductsControllers.html":{},"injectables/ProductsServices.html":{},"injectables/UserRepository.html":{}}}],["you'd",{"_index":997,"title":{},"body":{"index.html":{}}}],["zacca",{"_index":1037,"title":{},"body":{"license.html":{},"properties.html":{}}}],["zoom",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/ProductsModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nProductsModule\n\nProductsModule\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nPopulateProductsService \n\nPopulateProductsService \n\nPopulateProductsService  -->\n\nAppModule->PopulateProductsService \n\n\n\n\n\nPopulateProductsService\n\nPopulateProductsService\n\nAppModule -->\n\nPopulateProductsService->AppModule\n\n\n\n\n\nRmUnverifiedUsers\n\nRmUnverifiedUsers\n\nAppModule -->\n\nRmUnverifiedUsers->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PopulateProductsService\n                        \n                        \n                            RmUnverifiedUsers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            ProductsModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PopulateProductsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ServeStaticModule } from '@nestjs/serve-static'\nimport { ConfigModule } from '@nestjs/config'\nimport { DatabaseModule } from './database/database.module.js'\nimport { ScheduleModule } from '@nestjs/schedule'\nimport { RmUnverifiedUsers } from './jobs/rmUnverifiedUsers.service.js'\nimport { UserModule } from './core/user/user.module.js'\nimport { AuthModule } from './core/auth/auth.module.js'\nimport { ProductsModule } from './core/products/products.module.js'\nimport { configuration } from './config/configuration.js'\nimport { isLoggedIn } from './guard/isLoggedIn.guard.js'\nimport { PopulateProductsService } from './database/seed/populateProducts.service.js'\n\n@Module({\n  imports: [\n    UserModule,\n    AuthModule,\n    ProductsModule,\n    DatabaseModule,\n    ScheduleModule.forRoot(),\n    ServeStaticModule.forRoot({\n      rootPath: 'public',\n      serveRoot: '/public',\n      serveStaticOptions: {\n        maxAge: '1d',\n        etag: false,\n      },\n    }),\n    ConfigModule.forRoot({\n      load: [configuration],\n    }),\n  ],\n  providers: [RmUnverifiedUsers, isLoggedIn, PopulateProductsService],\n  exports: [PopulateProductsService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthControllers.html":{"url":"controllers/AuthControllers.html","title":"controller - AuthControllers","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthControllers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                emailVerify\n                            \n                            \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                passwdRecovery\n                            \n                            \n                                    \n                                    Async\n                                register\n                            \n                            \n                                    \n                                    \n                                    Async\n                                tokenValidator\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        emailVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailVerify(token: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/email-verify/:token')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(body: LoginBody, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:54\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        passwdRecovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwdRecovery(email: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/passwd-recovery/:email')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(body: RegisterBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        tokenValidator\n                        \n                    \n                \n            \n            \n                \n                        \n                    tokenValidator(token: string, setCookie: string, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/token-validator/:token')@UseGuards(isLoggedIn)\n                \n            \n\n                    \n                        \n                            Defined in src/core/auth/auth.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                setCookie\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { RegisterBody } from './dto/registerBody.dto.js'\nimport { HandleError } from '../../utils/handleError.js'\nimport {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Param,\n  Post,\n  Query,\n  Res,\n  UseGuards,\n} from '@nestjs/common'\nimport { LoginBody } from './dto/loginBody.dto.js'\nimport { Response } from 'express'\nimport { isLoggedIn } from '../../guard/isLoggedIn.guard.js'\nimport { AuthServices } from './auth.service.js'\nimport { ConfigService } from '@nestjs/config'\nimport { ApiTags } from '@nestjs/swagger'\n\n@ApiTags('auth')\n@Controller('/auth')\nexport class AuthControllers {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private authServices: AuthServices,\n  ) {}\n\n  @Get('/email-verify/:token')\n  async emailVerify(@Param('token') token: string, @Res() res: Response) {\n    try {\n      await this.authServices.emailVerify(token)\n      res\n        .status(200)\n        .redirect(`${this.configService.get('env.ORIGIN_ADDR')}/login`)\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/register')\n  async register(@Body() body: RegisterBody) {\n    try {\n      await this.authServices.register(body)\n      return { msg: this.configService.get('userMsg.created') }\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/login')\n  async login(@Body() body: LoginBody, @Res() res: Response) {\n    try {\n      const authToken = await this.authServices.login(body)\n      res.cookie('token', authToken, this.configService.get('cookie'))\n      res.status(200).json({ msg: this.configService.get('authMsg.ok') })\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/passwd-recovery/:email')\n  async passwdRecovery(@Param('email') email: string) {\n    try {\n      await this.authServices.passwdRecovery(email)\n      return { msg: this.configService.get('authMsg.recoveryEmail') }\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/token-validator/:token')\n  @UseGuards(isLoggedIn)\n  async tokenValidator(\n    @Param('token') token: string,\n    @Query('setCookie') setCookie: string,\n    @Res() res: Response,\n  ) {\n    if (setCookie) {\n      res.cookie('token', token, this.configService.get('cookie'))\n    }\n    res.sendStatus(200)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthServices\n\nAuthServices\n\nAuthModule -->\n\nAuthServices->AuthModule\n\n\n\n\n\nEmailVerifyUseCase\n\nEmailVerifyUseCase\n\nAuthModule -->\n\nEmailVerifyUseCase->AuthModule\n\n\n\n\n\nLoginUseCase\n\nLoginUseCase\n\nAuthModule -->\n\nLoginUseCase->AuthModule\n\n\n\n\n\nPasswdRecoveryUseCase\n\nPasswdRecoveryUseCase\n\nAuthModule -->\n\nPasswdRecoveryUseCase->AuthModule\n\n\n\n\n\nRegisterUseCase\n\nRegisterUseCase\n\nAuthModule -->\n\nRegisterUseCase->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthServices\n                        \n                        \n                            EmailVerifyUseCase\n                        \n                        \n                            LoginUseCase\n                        \n                        \n                            PasswdRecoveryUseCase\n                        \n                        \n                            RegisterUseCase\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthControllers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { AuthControllers } from './auth.controller.js'\nimport { AuthServices } from './auth.service.js'\nimport { EmailVerifyUseCase } from './usecases/emailVerify.usecase.js'\nimport { LoginUseCase } from './usecases/login.usecase.js'\nimport { PasswdRecoveryUseCase } from './usecases/passwdRecovery.usecase.js'\nimport { RegisterUseCase } from './usecases/register.usecase.js'\nimport { UserModule } from '../user/user.module.js'\nimport { CommonModule } from '../common/common.module.js'\nimport { ConfigModule } from '@nestjs/config'\n\n@Module({\n  imports: [UserModule, CommonModule, ConfigModule],\n  controllers: [AuthControllers],\n  providers: [\n    AuthServices,\n    EmailVerifyUseCase,\n    LoginUseCase,\n    PasswdRecoveryUseCase,\n    RegisterUseCase,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthServices.html":{"url":"injectables/AuthServices.html","title":"injectable - AuthServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                emailVerify\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                passwdRecovery\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonServices: CommonServices, emailVerifyUseCase: EmailVerifyUseCase, registerUseCase: RegisterUseCase, loginUseCase: LoginUseCase, passwdRecoveryUseCase: PasswdRecoveryUseCase)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/auth.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailVerifyUseCase\n                                                  \n                                                        \n                                                                        EmailVerifyUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registerUseCase\n                                                  \n                                                        \n                                                                        RegisterUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginUseCase\n                                                  \n                                                        \n                                                                        LoginUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        passwdRecoveryUseCase\n                                                  \n                                                        \n                                                                        PasswdRecoveryUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        emailVerify\n                        \n                    \n                \n            \n            \n                \n                        \n                    emailVerify(emailToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                emailToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(data: LoginBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        passwdRecovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    passwdRecovery(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(data: RegisterBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/auth.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { CommonServices } from '../common/common.service.js'\nimport { LoginBody } from './dto/loginBody.dto.js'\nimport { RegisterBody } from './dto/registerBody.dto.js'\nimport { EmailVerifyUseCase } from './usecases/emailVerify.usecase.js'\nimport { LoginUseCase } from './usecases/login.usecase.js'\nimport { PasswdRecoveryUseCase } from './usecases/passwdRecovery.usecase.js'\nimport { RegisterUseCase } from './usecases/register.usecase.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class AuthServices {\n  constructor(\n    @Inject()\n    private commonServices: CommonServices,\n    @Inject()\n    private emailVerifyUseCase: EmailVerifyUseCase,\n    @Inject()\n    private registerUseCase: RegisterUseCase,\n    @Inject()\n    private loginUseCase: LoginUseCase,\n    @Inject()\n    private passwdRecoveryUseCase: PasswdRecoveryUseCase,\n  ) {}\n\n  async emailVerify(emailToken: string) {\n    const email = this.commonServices.extractJwtPayload(emailToken, 'email')\n    return this.emailVerifyUseCase.execute(email)\n  }\n\n  async register(data: RegisterBody) {\n    return this.registerUseCase.execute(data)\n  }\n\n  async login(data: LoginBody) {\n    return this.loginUseCase.execute(data)\n  }\n\n  async passwdRecovery(email: string) {\n    return this.passwdRecoveryUseCase.execute(email)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswdBody.html":{"url":"classes/ChangePasswdBody.html","title":"class - ChangePasswdBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswdBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/dto/changePasswdBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                passwd\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(6, 16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/dto/changePasswdBody.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty, Length } from 'class-validator'\n\nexport class ChangePasswdBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(6, 16)\n  passwd: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ChangePasswdUseCase.html":{"url":"injectables/ChangePasswdUseCase.html","title":"injectable - ChangePasswdUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ChangePasswdUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/changePasswd.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/changePasswd.usecase.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string, newPasswd: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/changePasswd.usecase.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPasswd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\n\n@Injectable()\nexport class ChangePasswdUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(email: string, newPasswd: string) {\n    const user = await this.userRepository.findByField({ email })\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    const salt = await bcrypt.genSalt(10)\n    const hashedNewPasswd = await bcrypt.hash(newPasswd, salt)\n\n    await this.userRepository.updateField({\n      user,\n      fieldName: 'passwd',\n      fieldValue: hashedNewPasswd,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nCommonServices \n\nCommonServices \n\n\n\nCommonModule\n\nCommonModule\n\nCommonServices  -->\n\nCommonModule->CommonServices \n\n\n\n\n\nCommonServices\n\nCommonServices\n\nCommonModule -->\n\nCommonServices->CommonModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CommonServices\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CommonServices\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { CommonServices } from './common.service.js'\nimport { ConfigModule } from '@nestjs/config'\n\n@Module({\n  imports: [ConfigModule],\n  providers: [CommonServices],\n  exports: [CommonServices],\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CommonServices.html":{"url":"injectables/CommonServices.html","title":"injectable - CommonServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CommonServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/common.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                transporter\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                extractJwtPayload\n                            \n                            \n                                    Async\n                                sendLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/common.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        extractJwtPayload\n                        \n                    \n                \n            \n            \n                \nextractJwtPayload(token: string, payloadName?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/common.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payloadName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendLink\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendLink(undefined: SendEmailProps)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/common.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            SendEmailProps\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        transporter\n                        \n                    \n                \n            \n                \n                    \n                        Default value : nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 465,\n    secure: true,\n    auth: {\n      user: this.configService.get('env.SMTP_USER'),\n      pass: this.configService.get('env.SMTP_PASS'),\n    },\n  })\n                    \n                \n                    \n                        \n                                Defined in src/core/common/common.service.ts:24\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport jwt, { JwtPayload } from 'jsonwebtoken'\nimport * as nodemailer from 'nodemailer'\n\ninterface SendEmailProps {\n  to: string\n  subject: string\n  link: string\n}\n\n@Injectable()\nexport class CommonServices {\n  constructor(@Inject() private configService: ConfigService) {}\n\n  extractJwtPayload(token: string, payloadName?: string) {\n    const payload = jwt.verify(\n      token,\n      this.configService.get('env.SECRET'),\n    ) as JwtPayload\n    return payloadName && payload[payloadName]\n  }\n\n  private transporter = nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 465,\n    secure: true,\n    auth: {\n      user: this.configService.get('env.SMTP_USER'),\n      pass: this.configService.get('env.SMTP_PASS'),\n    },\n  })\n\n  async sendLink({ to, subject, link }: SendEmailProps): Promise {\n    await this.transporter.sendMail({\n      from: {\n        name: 'Develop Store',\n        address: this.configService.get('env.SMTP_USER'),\n      },\n      to,\n      subject,\n      html: `${link}`,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { databaseProviders } from './database.providers.js'\n\n@Module({\n  providers: [...databaseProviders],\n  exports: [...databaseProviders],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DeleteUserUseCase.html":{"url":"injectables/DeleteUserUseCase.html","title":"injectable - DeleteUserUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DeleteUserUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/deleteUser.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/deleteUser.usecase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/deleteUser.usecase.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class DeleteUserUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(id: number) {\n    const user = await this.userRepository.findByField({ id })\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    await this.userRepository.delete(user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailVerifyUseCase.html":{"url":"injectables/EmailVerifyUseCase.html","title":"injectable - EmailVerifyUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailVerifyUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/emailVerify.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/emailVerify.usecase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/emailVerify.usecase.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class EmailVerifyUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(email: string) {\n    const user = await this.userRepository.findByField({ email })\n\n    if (!user) {\n      const msg = this.configService.get('serverMsg.invalidToken')\n      throw { custom: { status: 400, msg } }\n    }\n\n    if (user.verified_email) {\n      return\n    }\n\n    user.verified_email = true\n    await this.userRepository.save(user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Env.html":{"url":"interfaces/Env.html","title":"interface - Env","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Env\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/configuration.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            API_ADDR\n                                        \n                                \n                                \n                                        \n                                            AUTH_DURATION_DAYS\n                                        \n                                \n                                \n                                        \n                                            NODE_ENV\n                                        \n                                \n                                \n                                        \n                                            ORIGIN_ADDR\n                                        \n                                \n                                \n                                        \n                                            PORT\n                                        \n                                \n                                \n                                        \n                                            SECRET\n                                        \n                                \n                                \n                                        \n                                            SMTP_PASS\n                                        \n                                \n                                \n                                        \n                                            SMTP_USER\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        API_ADDR\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        API_ADDR:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        AUTH_DURATION_DAYS\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        AUTH_DURATION_DAYS:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        NODE_ENV\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        NODE_ENV:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ORIGIN_ADDR\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ORIGIN_ADDR:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        PORT\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        PORT:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SECRET\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SECRET:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMTP_PASS\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMTP_PASS:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        SMTP_USER\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        SMTP_USER:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CorsOptions } from 'cors'\nimport { CookieOptions } from 'express'\n\ninterface Env {\n  NODE_ENV: string\n  PORT: number\n  ORIGIN_ADDR: string\n  API_ADDR: string\n  SMTP_USER: string\n  SMTP_PASS: string\n  AUTH_DURATION_DAYS: number\n  SECRET: string\n}\n\nexport const configuration = () => ({\n  get env() {\n    return {\n      NODE_ENV: process.env.NODE_ENV,\n      PORT: Number(process.env.PORT),\n      ORIGIN_ADDR: process.env.ORIGIN_ADDR,\n      API_ADDR: process.env.API_ADDR,\n      SMTP_USER: process.env.SMTP_USER,\n      SMTP_PASS: process.env.SMTP_PASS,\n      AUTH_DURATION_DAYS: Number(process.env.AUTH_DURATION_DAYS),\n      SECRET: process.env.SECRET,\n    } as Env\n  },\n\n  get cors() {\n    return {\n      origin: [this.env.ORIGIN_ADDR, this.env.API_ADDR],\n      methods: ['GET', 'POST', 'PATCH', 'DELETE'],\n      credentials: true,\n    } as CorsOptions\n  },\n\n  get cookie() {\n    return {\n      httpOnly: true,\n      secure: true,\n      maxAge: this.env.AUTH_DURATION_DAYS * 24 * 60 * 60 * 1000,\n      sameSite: 'none',\n    } as CookieOptions\n  },\n\n  get serverMsg() {\n    return {\n      great: 'Welcome!',\n      err: 'A server occurred error. Please try later.',\n      denied: 'Access denied.',\n      invalidToken: 'Invalid token.',\n    }\n  },\n\n  get authMsg() {\n    return {\n      ok: 'Authentication successful.',\n      incorrect: 'Incorrect password.',\n      emailExists: 'This email already exists.',\n      noEmailToken: 'No email token provided.',\n      noVerifiedEmail: 'No email verified.',\n      recoveryEmail: 'Recovery email successfully send.',\n    }\n  },\n\n  get userMsg() {\n    return {\n      notFound: 'User not found.',\n      created: 'User created successfully.',\n      deleted: 'User deleted successfully.',\n      updated: 'User updated successfully.',\n    }\n  },\n})\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FavoriteRepository.html":{"url":"injectables/FavoriteRepository.html","title":"injectable - FavoriteRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FavoriteRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/favorites/favorite.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFavorite\n                            \n                            \n                                    Async\n                                deleteFavorite\n                            \n                            \n                                    Async\n                                getFavorites\n                            \n                            \n                                    Async\n                                getOneFavorite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(favoriteModel, userModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/favorites/favorite.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        favoriteModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    createFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFavorites\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFavorites(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Favorites } from './favorite.entity.js'\nimport { User } from '../user.entity.js'\nimport { Products } from '../../products/products.entity.js'\n\ninterface IFavoritesRepository {\n  getOneFavorite(userId: number, productId: number): Promise\n  deleteFavorite(userId: number, productId: number): Promise\n  createFavorite(userId: number, productId: number): Promise\n  getFavorites(id: number): Promise\n}\n\n@Injectable()\nexport class FavoriteRepository implements IFavoritesRepository {\n  constructor(\n    @Inject('FAVORITES')\n    private favoriteModel: typeof Favorites,\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async getOneFavorite(userId: number, productId: number): Promise {\n    return this.favoriteModel.findOne({\n      where: { userId, productId },\n    })\n  }\n\n  async deleteFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.destroy({ where: { userId, productId } })\n  }\n\n  async createFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.create({ userId, productId })\n  }\n\n  async getFavorites(id: number): Promise {\n    const data = await this.userModel.findOne({\n      where: { id },\n      include: [\n        {\n          model: Products,\n          as: 'favoriteProducts',\n        },\n      ],\n    })\n\n    return data?.favoriteProducts || []\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Favorites.html":{"url":"classes/Favorites.html","title":"class - Favorites","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Favorites\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/favorites/favorite.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column({type: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/favorites/favorite.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column({type: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/favorites/favorite.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript'\nimport { Products } from '../../products/products.entity.js'\nimport { User } from '../user.entity.js'\n\n@Table({ tableName: 'favorites', timestamps: false })\nexport class Favorites extends Model {\n  @ForeignKey(() => User)\n  @Column({ type: DataType.BIGINT, primaryKey: true })\n  userId: number\n\n  @ForeignKey(() => Products)\n  @Column({ type: DataType.BIGINT, primaryKey: true })\n  productId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetFavoritesUseCase.html":{"url":"injectables/GetFavoritesUseCase.html","title":"injectable - GetFavoritesUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetFavoritesUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/getFavorites.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(favoriteRepository: FavoriteRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/getFavorites.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        favoriteRepository\n                                                  \n                                                        \n                                                                        FavoriteRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/getFavorites.usecase.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FavoriteRepository } from '../favorites/favorite.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetFavoritesUseCase {\n  constructor(@Inject() private favoriteRepository: FavoriteRepository) {}\n\n  async execute(id: number) {\n    return await this.favoriteRepository.getFavorites(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetProductsUseCase.html":{"url":"injectables/GetProductsUseCase.html","title":"injectable - GetProductsUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetProductsUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/usecases/getProducts.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productsRepository: ProductsRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/products/usecases/getProducts.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productsRepository\n                                                  \n                                                        \n                                                                        ProductsRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(search?: string, category?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/usecases/getProducts.usecase.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ProductsRepository } from '../products.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetProductsUseCase {\n  constructor(@Inject() private productsRepository: ProductsRepository) {}\n\n  async execute(search?: string, category?: string) {\n    if (category) {\n      return this.productsRepository.getByCategory(category)\n    }\n\n    if (search) {\n      return this.productsRepository.getByGenericSearch(search)\n    }\n\n    return this.productsRepository.getAllProducts()\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetShoppingCartUseCase.html":{"url":"injectables/GetShoppingCartUseCase.html","title":"injectable - GetShoppingCartUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetShoppingCartUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/getShopping.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingCartRepository: ShoppingCartRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/getShopping.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingCartRepository\n                                                  \n                                                        \n                                                                        ShoppingCartRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/getShopping.usecase.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ShoppingCartRepository } from '../shopping/shopping.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetShoppingCartUseCase {\n  constructor(\n    @Inject() private shoppingCartRepository: ShoppingCartRepository,\n  ) {}\n\n  async execute(id: number) {\n    return await this.shoppingCartRepository.getShoppingCart(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GetUserUseCase.html":{"url":"injectables/GetUserUseCase.html","title":"injectable - GetUserUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GetUserUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/getUser.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/getUser.usecase.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/getUser.usecase.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConfigService } from '@nestjs/config'\nimport { UserRepository } from '../user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class GetUserUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute(id: number) {\n    const user = await this.userRepository.findByField({ id }, true)\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HandleError.html":{"url":"classes/HandleError.html","title":"class - HandleError","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HandleError\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/handleError.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                http\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        http\n                        \n                    \n                \n            \n            \n                \n                        \n                    http(err: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/handleError.ts:4\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpException } from '@nestjs/common'\n\nexport class HandleError {\n  static http(err: any) {\n    if (err.message) {\n      throw new HttpException(err.message, 422)\n    }\n\n    if (err.custom) {\n      const { custom } = err\n      throw new HttpException(custom.msg, custom.status)\n    }\n\n    console.error(err)\n    throw new HttpException('A server occurred error. Please, try later.', 500)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HttpExceptionFilter.html":{"url":"classes/HttpExceptionFilter.html","title":"class - HttpExceptionFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpExceptionFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/httpException.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n                    \n                        \n                            Defined in src/filters/httpException.filter.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                exception\n                                            \n                                                        HttpException\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                host\n                                            \n                                                        ArgumentsHost\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n} from '@nestjs/common'\nimport { Response } from 'express'\n\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp()\n    const res = ctx.getResponse()\n    const status = exception.getStatus()\n\n    const raw = exception.getResponse() as string\n    const rawIsString = typeof raw === 'string'\n\n    if (rawIsString && !raw.includes('{')) {\n      res.status(status).json({ msg: raw })\n      return\n    }\n\n    const msg = rawIsString ? JSON.parse(raw)['message'] : raw['message']\n\n    res.status(status).json({ msg: Array.isArray(msg) ? msg[0] : msg })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFavoritesRepository.html":{"url":"interfaces/IFavoritesRepository.html","title":"interface - IFavoritesRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFavoritesRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/favorites/favorite.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createFavorite\n                                    \n                                \n                                \n                                    \n                                        deleteFavorite\n                                    \n                                \n                                \n                                    \n                                        getFavorites\n                                    \n                                \n                                \n                                    \n                                        getOneFavorite\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createFavorite\n                        \n                    \n                \n            \n            \n                \ncreateFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteFavorite\n                        \n                    \n                \n            \n            \n                \ndeleteFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFavorites\n                        \n                    \n                \n            \n            \n                \ngetFavorites(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOneFavorite\n                        \n                    \n                \n            \n            \n                \ngetOneFavorite(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/favorites/favorite.repository.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Favorites } from './favorite.entity.js'\nimport { User } from '../user.entity.js'\nimport { Products } from '../../products/products.entity.js'\n\ninterface IFavoritesRepository {\n  getOneFavorite(userId: number, productId: number): Promise\n  deleteFavorite(userId: number, productId: number): Promise\n  createFavorite(userId: number, productId: number): Promise\n  getFavorites(id: number): Promise\n}\n\n@Injectable()\nexport class FavoriteRepository implements IFavoritesRepository {\n  constructor(\n    @Inject('FAVORITES')\n    private favoriteModel: typeof Favorites,\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async getOneFavorite(userId: number, productId: number): Promise {\n    return this.favoriteModel.findOne({\n      where: { userId, productId },\n    })\n  }\n\n  async deleteFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.destroy({ where: { userId, productId } })\n  }\n\n  async createFavorite(userId: number, productId: number): Promise {\n    await this.favoriteModel.create({ userId, productId })\n  }\n\n  async getFavorites(id: number): Promise {\n    const data = await this.userModel.findOne({\n      where: { id },\n      include: [\n        {\n          model: Products,\n          as: 'favoriteProducts',\n        },\n      ],\n    })\n\n    return data?.favoriteProducts || []\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IShoppingCartRepository.html":{"url":"interfaces/IShoppingCartRepository.html","title":"interface - IShoppingCartRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IShoppingCartRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/shopping/shopping.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        createShoppingCart\n                                    \n                                \n                                \n                                    \n                                        deleteShoppingCart\n                                    \n                                \n                                \n                                    \n                                        getOneShoppingCart\n                                    \n                                \n                                \n                                    \n                                        getShoppingCart\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        createShoppingCart\n                        \n                    \n                \n            \n            \n                \ncreateShoppingCart(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteShoppingCart\n                        \n                    \n                \n            \n            \n                \ndeleteShoppingCart(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOneShoppingCart\n                        \n                    \n                \n            \n            \n                \ngetOneShoppingCart(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getShoppingCart\n                        \n                    \n                \n            \n            \n                \ngetShoppingCart(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ShoppingCart } from './shopping.entity.js'\nimport { User } from '../user.entity.js'\nimport { Products } from '../../products/products.entity.js'\n\ninterface IShoppingCartRepository {\n  getOneShoppingCart(userId: number, productId: number): Promise\n  deleteShoppingCart(userId: number, productId: number): Promise\n  createShoppingCart(userId: number, productId: number): Promise\n  getShoppingCart(id: number): Promise\n}\n\n@Injectable()\nexport class ShoppingCartRepository implements IShoppingCartRepository {\n  constructor(\n    @Inject('SHOPPING')\n    private shoppingCartModel: typeof ShoppingCart,\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async getOneShoppingCart(\n    userId: number,\n    productId: number,\n  ): Promise {\n    return this.shoppingCartModel.findOne({\n      where: { userId, productId },\n    })\n  }\n\n  async deleteShoppingCart(userId: number, productId: number): Promise {\n    await this.shoppingCartModel.destroy({ where: { userId, productId } })\n  }\n\n  async createShoppingCart(userId: number, productId: number): Promise {\n    await this.shoppingCartModel.create({ userId, productId })\n  }\n\n  async getShoppingCart(id: number): Promise {\n    const data = await this.userModel.findOne({\n      where: { id },\n      include: [\n        {\n          model: Products,\n          as: 'shoppingCartProducts',\n        },\n      ],\n    })\n\n    return data?.shoppingCartProducts || []\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserRepository.html":{"url":"interfaces/IUserRepository.html","title":"interface - IUserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        create\n                                    \n                                \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        findByField\n                                    \n                                \n                                \n                                    \n                                        save\n                                    \n                                \n                                \n                                    \n                                        updateField\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(userAttributes: RegisterBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userAttributes\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(target: number | User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            number | User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByField\n                        \n                    \n                \n            \n            \n                \nfindByField(field: Record, restrict?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                restrict\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        save\n                        \n                    \n                \n            \n            \n                \nsave(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateField\n                        \n                    \n                \n            \n            \n                \nupdateField(undefined: UpdateField)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            UpdateField\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindAttributeOptions } from 'sequelize'\nimport { RegisterBody } from '../auth/dto/registerBody.dto.js'\nimport { User } from './user.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface UpdateField {\n  user: User\n  fieldName: string\n  fieldValue: any\n}\n\nexport interface IUserRepository {\n  findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise\n  delete(target: number | User): Promise\n  updateField({ user, fieldName, fieldValue }: UpdateField): Promise\n  save(user: User): Promise\n  create(userAttributes: RegisterBody): Promise\n}\n\n@Injectable()\nexport class UserRepository implements IUserRepository {\n  constructor(\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise {\n    const fieldKey = Object.keys(field)[0]\n\n    let attributes: FindAttributeOptions | undefined = undefined\n    if (restrict) {\n      attributes = { exclude: ['id', 'passwd', 'verified_email'] }\n    }\n\n    return this.userModel.findOne({\n      where: { [fieldKey]: field[fieldKey] },\n      attributes,\n    })\n  }\n\n  async delete(target: number | User): Promise {\n    if (typeof target === 'number') {\n      await this.userModel.destroy({ where: { id: target } })\n      return\n    }\n    await target.destroy()\n  }\n\n  async updateField({\n    user,\n    fieldName,\n    fieldValue,\n  }: UpdateField): Promise {\n    user[fieldName] = fieldValue\n    await this.save(user)\n  }\n\n  async save(user: User): Promise {\n    await user.save()\n  }\n\n  async create(userAttributes: RegisterBody): Promise {\n    await this.userModel.create(userAttributes)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginBody.html":{"url":"classes/LoginBody.html","title":"class - LoginBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/dto/loginBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                passwd\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(0, 100)@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/loginBody.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(6, 16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/loginBody.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsEmail, IsNotEmpty, Length } from 'class-validator'\n\nexport class LoginBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(6, 16)\n  passwd: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginUseCase.html":{"url":"injectables/LoginUseCase.html","title":"injectable - LoginUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/login.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/login.usecase.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(undefined: LoginBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/login.usecase.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            LoginBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { LoginBody } from '../dto/loginBody.dto.js'\nimport { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class LoginUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n  ) {}\n\n  async execute({ email, passwd }: LoginBody) {\n    const user = await this.userRepository.findByField({ email })\n\n    if (!user) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    if (!user.verified_email) {\n      const msg = this.configService.get('authMsg.noVerifiedEmail')\n      throw { custom: { status: 400, msg } }\n    }\n\n    const checkPasswd = await bcrypt.compare(passwd, user.passwd)\n\n    if (!checkPasswd) {\n      const msg = this.configService.get('authMsg.incorrect')\n      throw { custom: { status: 422, msg } }\n    }\n\n    const token = jwt.sign(\n      { id: user.id },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: `${this.configService.get('env.AUTH_DURATION_DAYS') * 24}h`,\n      },\n    )\n\n    return token\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswdRecoveryUseCase.html":{"url":"injectables/PasswdRecoveryUseCase.html","title":"injectable - PasswdRecoveryUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PasswdRecoveryUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/passwdRecovery.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository, commonServices: CommonServices)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/passwdRecovery.usecase.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/passwdRecovery.usecase.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport jwt from 'jsonwebtoken'\nimport { CommonServices } from '../../common/common.service.js'\nimport { ConfigService } from '@nestjs/config'\n\n@Injectable()\nexport class PasswdRecoveryUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n    @Inject()\n    private commonServices: CommonServices,\n  ) {}\n\n  async execute(email: string) {\n    const userExists = await this.userRepository.findByField({ email })\n\n    if (!userExists) {\n      const msg = this.configService.get('userMsg.notFound')\n      throw { custom: { status: 404, msg } }\n    }\n\n    const recoveryToken = jwt.sign(\n      { email },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: '1h',\n      },\n    )\n\n    const recoveryLink = `${this.configService.get('env.ORIGIN_ADDR')}/passwd-change/${recoveryToken}`\n\n    this.commonServices.sendLink({\n      to: email,\n      subject: 'Password Recovery',\n      link: recoveryLink,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PopulateProductsService.html":{"url":"injectables/PopulateProductsService.html","title":"injectable - PopulateProductsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PopulateProductsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seed/populateProducts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                products\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateProducts\n                            \n                            \n                                    Async\n                                run\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/database/seed/populateProducts.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/seed/populateProducts.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         ProductEl[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        run\n                        \n                    \n                \n            \n            \n                \n                        \n                    run()\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/seed/populateProducts.service.ts:52\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        products\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ProductEl[]\n\n                    \n                \n                    \n                        \n                                Defined in src/database/seed/populateProducts.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Products } from '../../core/products/products.entity.js'\nimport { faker } from '@faker-js/faker'\nimport { ConfigService } from '@nestjs/config'\n\ninterface ProductEl {\n  category: string\n  productName: string\n  info: string\n  img: string\n  oldPrice: number\n  price: number\n}\n\n@Injectable()\nexport class PopulateProductsService {\n  private products: ProductEl[]\n\n  constructor(@Inject() private configService: ConfigService) {\n    this.products = this.generateProducts()\n  }\n\n  private generateProducts(): ProductEl[] {\n    return [\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Recommended',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 5.99,\n        price: 2.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Popular 2024',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 3.25,\n        price: 1.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'The best',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 24.99,\n        price: 14.99,\n      })),\n    ]\n  }\n\n  async run() {\n    try {\n      const isPopulated = (await Products.findAll()).length > 0\n      if (isPopulated) {\n        return\n      }\n\n      for (const product of this.products) {\n        const { productName, img, category, price, oldPrice, info } = product\n\n        await Products.create({\n          productName,\n          img,\n          category,\n          price,\n          oldPrice,\n          info,\n        })\n      }\n      console.log('\\n> Populate DB\\n')\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductEl.html":{"url":"interfaces/ProductEl.html","title":"interface - ProductEl","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductEl\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/seed/populateProducts.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            category\n                                        \n                                \n                                \n                                        \n                                            img\n                                        \n                                \n                                \n                                        \n                                            info\n                                        \n                                \n                                \n                                        \n                                            oldPrice\n                                        \n                                \n                                \n                                        \n                                            price\n                                        \n                                \n                                \n                                        \n                                            productName\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        category\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        category:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        img\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        img:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        info\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        info:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        oldPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        oldPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        productName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        productName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { Products } from '../../core/products/products.entity.js'\nimport { faker } from '@faker-js/faker'\nimport { ConfigService } from '@nestjs/config'\n\ninterface ProductEl {\n  category: string\n  productName: string\n  info: string\n  img: string\n  oldPrice: number\n  price: number\n}\n\n@Injectable()\nexport class PopulateProductsService {\n  private products: ProductEl[]\n\n  constructor(@Inject() private configService: ConfigService) {\n    this.products = this.generateProducts()\n  }\n\n  private generateProducts(): ProductEl[] {\n    return [\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Recommended',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 5.99,\n        price: 2.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'Popular 2024',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 3.25,\n        price: 1.99,\n      })),\n      ...Array.from({ length: 7 }, () => ({\n        category: 'The best',\n        productName: faker.commerce.productName().slice(0, 20),\n        info: faker.commerce.productDescription().slice(0, 20),\n        img: `${this.configService.get('env.API_ADDR')}/public/product.webp`,\n        oldPrice: 24.99,\n        price: 14.99,\n      })),\n    ]\n  }\n\n  async run() {\n    try {\n      const isPopulated = (await Products.findAll()).length > 0\n      if (isPopulated) {\n        return\n      }\n\n      for (const product of this.products) {\n        const { productName, img, category, price, oldPrice, info } = product\n\n        await Products.create({\n          productName,\n          img,\n          category,\n          price,\n          oldPrice,\n          info,\n        })\n      }\n      console.log('\\n> Populate DB\\n')\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProductRepositoryInterface.html":{"url":"interfaces/ProductRepositoryInterface.html","title":"interface - ProductRepositoryInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProductRepositoryInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAllProducts\n                                    \n                                \n                                \n                                    \n                                        getByCategory\n                                    \n                                \n                                \n                                    \n                                        getByGenericSearch\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \ngetAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByCategory\n                        \n                    \n                \n            \n            \n                \ngetByCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getByGenericSearch\n                        \n                    \n                \n            \n            \n                \ngetByGenericSearch(search: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Sequelize, Op } from 'sequelize'\nimport { Products } from './products.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface ProductRepositoryInterface {\n  getAllProducts(): Promise\n  getByCategory(category: string): Promise\n  getByGenericSearch(search: string): Promise\n}\n\n@Injectable()\nexport class ProductsRepository implements ProductRepositoryInterface {\n  constructor(\n    @Inject('PRODUCTS')\n    private productModel: typeof Products,\n  ) {}\n\n  async getAllProducts(): Promise {\n    return this.productModel.findAll()\n  }\n\n  async getByCategory(category: string): Promise {\n    return this.productModel.findAll({ where: { category } })\n  }\n\n  async getByGenericSearch(search: string): Promise {\n    return this.productModel.findAll({\n      where: {\n        [Op.or]: [\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('productName')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('info')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n        ],\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Products.html":{"url":"classes/Products.html","title":"class - Products","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Products\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                category\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                img\n                            \n                            \n                                    \n                                info\n                            \n                            \n                                    \n                                oldPrice\n                            \n                            \n                                    \n                                price\n                            \n                            \n                                    \n                                productName\n                            \n                            \n                                    \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, autoIncrement: true, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        img\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        info\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        oldPrice\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        productName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsToMany(undefined, {through: () => Favorites, foreignKey: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/products/products.entity.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BelongsToMany,\n  Column,\n  DataType,\n  Model,\n  Table,\n} from 'sequelize-typescript'\nimport { User } from '../user/user.entity.js'\nimport { Favorites } from '../user/favorites/favorite.entity.js'\n\n@Table({ tableName: 'products', timestamps: false })\nexport class Products extends Model {\n  @Column({\n    type: DataType.BIGINT,\n    autoIncrement: true,\n    primaryKey: true,\n  })\n  id: number\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  category: string\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  productName: string\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  info: string\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  img: string\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  oldPrice: number\n\n  @Column({\n    type: DataType.DECIMAL,\n    allowNull: false,\n  })\n  price: number\n\n  @BelongsToMany(() => User, {\n    through: () => Favorites,\n    foreignKey: {\n      name: 'productId',\n    },\n  })\n  users: User[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsControllers.html":{"url":"controllers/ProductsControllers.html","title":"controller - ProductsControllers","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsControllers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /products\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                getProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProducts(query?: literal type)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/core/products/products.controller.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                query\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { GetProductsUseCase } from './usecases/getProducts.usecase.js'\nimport { HandleError } from '../../utils/handleError.js'\nimport { Controller, Get, Inject, Query } from '@nestjs/common'\nimport { ApiTags } from '@nestjs/swagger'\n\n@ApiTags('products')\n@Controller('/products')\nexport class ProductsControllers {\n  constructor(\n    @Inject()\n    private getProductsUseCase: GetProductsUseCase,\n  ) {}\n\n  @Get('/')\n  async getProducts(@Query() query?: { search?: string; category?: string }) {\n    try {\n      const { search, category } = query\n\n      const filteredProducts = await this.getProductsUseCase.execute(\n        search,\n        category,\n      )\n\n      return filteredProducts\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_ProductsModule_imports\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nDatabaseModule->ProductsModule\n\n\n\n\n\nGetProductsUseCase\n\nGetProductsUseCase\n\nProductsModule -->\n\nGetProductsUseCase->ProductsModule\n\n\n\n\n\nProductsRepository\n\nProductsRepository\n\nProductsModule -->\n\nProductsRepository->ProductsModule\n\n\n\n\n\nProductsServices\n\nProductsServices\n\nProductsModule -->\n\nProductsServices->ProductsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            GetProductsUseCase\n                        \n                        \n                            ProductsRepository\n                        \n                        \n                            ProductsServices\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ProductsControllers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            DatabaseModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { ProductsServices } from './products.service.js'\nimport { GetProductsUseCase } from './usecases/getProducts.usecase.js'\nimport { ProductsRepository } from './products.repository.js'\nimport { ProductsControllers } from './products.controller.js'\nimport { DatabaseModule } from '../../database/database.module.js'\nimport { productsProviders } from './products.providers.js'\n\n@Module({\n  imports: [DatabaseModule],\n  controllers: [ProductsControllers],\n  providers: [\n    ProductsServices,\n    GetProductsUseCase,\n    ProductsRepository,\n    ...productsProviders,\n  ],\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsRepository.html":{"url":"injectables/ProductsRepository.html","title":"injectable - ProductsRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllProducts\n                            \n                            \n                                    Async\n                                getByCategory\n                            \n                            \n                                    Async\n                                getByGenericSearch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(productModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/products/products.repository.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        productModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAllProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllProducts()\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByCategory\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByCategory(category: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getByGenericSearch\n                        \n                    \n                \n            \n            \n                \n                        \n                    getByGenericSearch(search: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Sequelize, Op } from 'sequelize'\nimport { Products } from './products.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface ProductRepositoryInterface {\n  getAllProducts(): Promise\n  getByCategory(category: string): Promise\n  getByGenericSearch(search: string): Promise\n}\n\n@Injectable()\nexport class ProductsRepository implements ProductRepositoryInterface {\n  constructor(\n    @Inject('PRODUCTS')\n    private productModel: typeof Products,\n  ) {}\n\n  async getAllProducts(): Promise {\n    return this.productModel.findAll()\n  }\n\n  async getByCategory(category: string): Promise {\n    return this.productModel.findAll({ where: { category } })\n  }\n\n  async getByGenericSearch(search: string): Promise {\n    return this.productModel.findAll({\n      where: {\n        [Op.or]: [\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('productName')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n          Sequelize.where(Sequelize.fn('LOWER', Sequelize.col('info')), {\n            [Op.like]: `%${search.toLowerCase()}%`,\n          }),\n        ],\n      },\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ProductsServices.html":{"url":"injectables/ProductsServices.html","title":"injectable - ProductsServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ProductsServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/products/products.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProducts\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(getProductsUseCase: GetProductsUseCase)\n                    \n                \n                        \n                            \n                                Defined in src/core/products/products.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        getProductsUseCase\n                                                  \n                                                        \n                                                                        GetProductsUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProducts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProducts(search?: string, category?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/products/products.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                search\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                category\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { GetProductsUseCase } from './usecases/getProducts.usecase.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class ProductsServices {\n  constructor(\n    @Inject()\n    private getProductsUseCase: GetProductsUseCase,\n  ) {}\n\n  async getProducts(search?: string, category?: string) {\n    return this.getProductsUseCase.execute(search, category)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterBody.html":{"url":"classes/RegisterBody.html","title":"class - RegisterBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/dto/registerBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                passwd\n                            \n                            \n                                    \n                                    \n                                    \n                                uname\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(0, 100)@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/registerBody.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(6, 16)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/registerBody.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        uname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@Length(3, 50)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/auth/dto/registerBody.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsEmail, IsNotEmpty, Length } from 'class-validator'\n\nexport class RegisterBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(3, 50)\n  uname: string\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(0, 100)\n  @IsEmail()\n  email: string\n\n  @ApiProperty()\n  @IsNotEmpty()\n  @Length(6, 16)\n  passwd: string\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegisterUseCase.html":{"url":"injectables/RegisterUseCase.html","title":"injectable - RegisterUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegisterUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/register.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userRepository: UserRepository, commonServices: CommonServices)\n                    \n                \n                        \n                            \n                                Defined in src/core/auth/usecases/register.usecase.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(undefined: RegisterUserCaseProps)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/auth/usecases/register.usecase.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            RegisterUserCaseProps\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { CommonServices } from '../../common/common.service.js'\nimport { ConfigService } from '@nestjs/config'\n\ninterface RegisterUserCaseProps {\n  uname: string\n  passwd: string\n  email: string\n}\n\n@Injectable()\nexport class RegisterUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n    @Inject()\n    private commonServices: CommonServices,\n  ) {}\n\n  async execute({ uname, passwd, email }: RegisterUserCaseProps) {\n    const emailExists = await this.userRepository.findByField({ email })\n\n    if (emailExists) {\n      const msg = this.configService.get('authMsg.emailExists')\n      throw { custom: { status: 409, msg } }\n    }\n\n    const salt = await bcrypt.genSalt(10)\n    const hashedPasswd = await bcrypt.hash(passwd, salt)\n\n    await this.userRepository.create({\n      uname,\n      email,\n      passwd: hashedPasswd,\n    })\n\n    const emailToken = jwt.sign(\n      { email },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: '1h',\n      },\n    )\n\n    const verifyLink = `${this.configService.get('env.API_ADDR')}/auth/email-verify/${emailToken}`\n\n    this.commonServices.sendLink({\n      to: email,\n      subject: 'Email Verification',\n      link: verifyLink,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterUserCaseProps.html":{"url":"interfaces/RegisterUserCaseProps.html","title":"interface - RegisterUserCaseProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterUserCaseProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/auth/usecases/register.usecase.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            passwd\n                                        \n                                \n                                \n                                        \n                                            uname\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        passwd\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        passwd:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uname\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uname:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { UserRepository } from '../../user/user.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\nimport * as bcrypt from 'bcrypt'\nimport jwt from 'jsonwebtoken'\nimport { CommonServices } from '../../common/common.service.js'\nimport { ConfigService } from '@nestjs/config'\n\ninterface RegisterUserCaseProps {\n  uname: string\n  passwd: string\n  email: string\n}\n\n@Injectable()\nexport class RegisterUseCase {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userRepository: UserRepository,\n    @Inject()\n    private commonServices: CommonServices,\n  ) {}\n\n  async execute({ uname, passwd, email }: RegisterUserCaseProps) {\n    const emailExists = await this.userRepository.findByField({ email })\n\n    if (emailExists) {\n      const msg = this.configService.get('authMsg.emailExists')\n      throw { custom: { status: 409, msg } }\n    }\n\n    const salt = await bcrypt.genSalt(10)\n    const hashedPasswd = await bcrypt.hash(passwd, salt)\n\n    await this.userRepository.create({\n      uname,\n      email,\n      passwd: hashedPasswd,\n    })\n\n    const emailToken = jwt.sign(\n      { email },\n      this.configService.get('env.SECRET'),\n      {\n        expiresIn: '1h',\n      },\n    )\n\n    const verifyLink = `${this.configService.get('env.API_ADDR')}/auth/email-verify/${emailToken}`\n\n    this.commonServices.sendLink({\n      to: email,\n      subject: 'Email Verification',\n      link: verifyLink,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RmUnverifiedUsers.html":{"url":"injectables/RmUnverifiedUsers.html","title":"injectable - RmUnverifiedUsers","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RmUnverifiedUsers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/jobs/rmUnverifiedUsers.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                handleCron\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        handleCron\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleCron()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron('0 0 * * *')\n                \n            \n\n                    \n                        \n                            Defined in src/jobs/rmUnverifiedUsers.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Op } from 'sequelize'\nimport { User } from '../core/user/user.entity.js'\nimport { Injectable } from '@nestjs/common'\nimport { Cron } from '@nestjs/schedule'\n\n@Injectable()\nexport class RmUnverifiedUsers {\n  @Cron('0 0 * * *')\n  async handleCron() {\n    try {\n      const paramDate = new Date(Date.now() - 1 * 60 * 60 * 1000)\n\n      await User.destroy({\n        where: {\n          verified_email: false,\n          createdAt: {\n            [Op.lt]: paramDate,\n          },\n        },\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SendEmailProps.html":{"url":"interfaces/SendEmailProps.html","title":"interface - SendEmailProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SendEmailProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/common.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                                \n                                        \n                                            to\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        to\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        to:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport jwt, { JwtPayload } from 'jsonwebtoken'\nimport * as nodemailer from 'nodemailer'\n\ninterface SendEmailProps {\n  to: string\n  subject: string\n  link: string\n}\n\n@Injectable()\nexport class CommonServices {\n  constructor(@Inject() private configService: ConfigService) {}\n\n  extractJwtPayload(token: string, payloadName?: string) {\n    const payload = jwt.verify(\n      token,\n      this.configService.get('env.SECRET'),\n    ) as JwtPayload\n    return payloadName && payload[payloadName]\n  }\n\n  private transporter = nodemailer.createTransport({\n    host: 'smtp.gmail.com',\n    port: 465,\n    secure: true,\n    auth: {\n      user: this.configService.get('env.SMTP_USER'),\n      pass: this.configService.get('env.SMTP_PASS'),\n    },\n  })\n\n  async sendLink({ to, subject, link }: SendEmailProps): Promise {\n    await this.transporter.sendMail({\n      from: {\n        name: 'Develop Store',\n        address: this.configService.get('env.SMTP_USER'),\n      },\n      to,\n      subject,\n      html: `${link}`,\n    })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingCart.html":{"url":"classes/ShoppingCart.html","title":"class - ShoppingCart","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingCart\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/shopping/shopping.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                productId\n                            \n                            \n                                    \n                                    \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column({type: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/shopping/shopping.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ForeignKey(undefined)@Column({type: undefined, primaryKey: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/shopping/shopping.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  DataType,\n  ForeignKey,\n  Model,\n  Table,\n} from 'sequelize-typescript'\nimport { Products } from '../../products/products.entity.js'\nimport { User } from '../user.entity.js'\n\n@Table({ tableName: 'shoppingCart', timestamps: false })\nexport class ShoppingCart extends Model {\n  @ForeignKey(() => User)\n  @Column({ type: DataType.BIGINT, primaryKey: true })\n  userId: number\n\n  @ForeignKey(() => Products)\n  @Column({ type: DataType.BIGINT, primaryKey: true })\n  productId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShoppingCartRepository.html":{"url":"injectables/ShoppingCartRepository.html","title":"injectable - ShoppingCartRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShoppingCartRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/shopping/shopping.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createShoppingCart\n                            \n                            \n                                    Async\n                                deleteShoppingCart\n                            \n                            \n                                    Async\n                                getOneShoppingCart\n                            \n                            \n                                    Async\n                                getShoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingCartModel, userModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/shopping/shopping.repository.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingCartModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    createShoppingCart(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteShoppingCart(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getOneShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOneShoppingCart(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getShoppingCart(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/shopping/shopping.repository.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common'\nimport { ShoppingCart } from './shopping.entity.js'\nimport { User } from '../user.entity.js'\nimport { Products } from '../../products/products.entity.js'\n\ninterface IShoppingCartRepository {\n  getOneShoppingCart(userId: number, productId: number): Promise\n  deleteShoppingCart(userId: number, productId: number): Promise\n  createShoppingCart(userId: number, productId: number): Promise\n  getShoppingCart(id: number): Promise\n}\n\n@Injectable()\nexport class ShoppingCartRepository implements IShoppingCartRepository {\n  constructor(\n    @Inject('SHOPPING')\n    private shoppingCartModel: typeof ShoppingCart,\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async getOneShoppingCart(\n    userId: number,\n    productId: number,\n  ): Promise {\n    return this.shoppingCartModel.findOne({\n      where: { userId, productId },\n    })\n  }\n\n  async deleteShoppingCart(userId: number, productId: number): Promise {\n    await this.shoppingCartModel.destroy({ where: { userId, productId } })\n  }\n\n  async createShoppingCart(userId: number, productId: number): Promise {\n    await this.shoppingCartModel.create({ userId, productId })\n  }\n\n  async getShoppingCart(id: number): Promise {\n    const data = await this.userModel.findOne({\n      where: { id },\n      include: [\n        {\n          model: Products,\n          as: 'shoppingCartProducts',\n        },\n      ],\n    })\n\n    return data?.shoppingCartProducts || []\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToggleFavoriteBody.html":{"url":"classes/ToggleFavoriteBody.html","title":"class - ToggleFavoriteBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToggleFavoriteBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/dto/toggleFavoriteBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/dto/toggleFavoriteBody.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty } from 'class-validator'\n\nexport class ToggleFavoriteBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  productId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ToggleFavoriteUseCase.html":{"url":"injectables/ToggleFavoriteUseCase.html","title":"injectable - ToggleFavoriteUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ToggleFavoriteUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/toggleFavorite.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(favoriteRepository: FavoriteRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/toggleFavorite.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        favoriteRepository\n                                                  \n                                                        \n                                                                        FavoriteRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/toggleFavorite.usecase.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FavoriteRepository } from '../favorites/favorite.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class ToggleFavoriteUseCase {\n  constructor(\n    @Inject()\n    private favoriteRepository: FavoriteRepository,\n  ) {}\n\n  async execute(userId: number, productId: number) {\n    const favorite = await this.favoriteRepository.getOneFavorite(\n      userId,\n      productId,\n    )\n\n    if (favorite) {\n      await this.favoriteRepository.deleteFavorite(userId, productId)\n      return\n    }\n\n    await this.favoriteRepository.createFavorite(userId, productId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ToggleShoppingCartBody.html":{"url":"classes/ToggleShoppingCartBody.html","title":"class - ToggleShoppingCartBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ToggleShoppingCartBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/dto/toggleShoppingCartBody.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                productId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        productId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/dto/toggleShoppingCartBody.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger'\nimport { IsNotEmpty } from 'class-validator'\n\nexport class ToggleShoppingCartBody {\n  @ApiProperty()\n  @IsNotEmpty()\n  productId: number\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ToggleShoppingCartUseCase.html":{"url":"injectables/ToggleShoppingCartUseCase.html","title":"injectable - ToggleShoppingCartUseCase","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ToggleShoppingCartUseCase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/usecases/toggleShopping.usecase.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                execute\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingCartRepository: ShoppingCartRepository)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/usecases/toggleShopping.usecase.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingCartRepository\n                                                  \n                                                        \n                                                                        ShoppingCartRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        execute\n                        \n                    \n                \n            \n            \n                \n                        \n                    execute(userId: number, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/usecases/toggleShopping.usecase.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ShoppingCartRepository } from '../shopping/shopping.repository.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\n@Injectable()\nexport class ToggleShoppingCartUseCase {\n  constructor(\n    @Inject()\n    private shoppingCartRepository: ShoppingCartRepository,\n  ) {}\n\n  async execute(userId: number, productId: number) {\n    const shoppingCart = await this.shoppingCartRepository.getOneShoppingCart(\n      userId,\n      productId,\n    )\n\n    if (shoppingCart) {\n      await this.shoppingCartRepository.deleteShoppingCart(userId, productId)\n      return\n    }\n\n    await this.shoppingCartRepository.createShoppingCart(userId, productId)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UpdateField.html":{"url":"interfaces/UpdateField.html","title":"interface - UpdateField","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UpdateField\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.repository.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            fieldName\n                                        \n                                \n                                \n                                        \n                                            fieldValue\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        fieldName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fieldValue\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fieldValue:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { FindAttributeOptions } from 'sequelize'\nimport { RegisterBody } from '../auth/dto/registerBody.dto.js'\nimport { User } from './user.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface UpdateField {\n  user: User\n  fieldName: string\n  fieldValue: any\n}\n\nexport interface IUserRepository {\n  findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise\n  delete(target: number | User): Promise\n  updateField({ user, fieldName, fieldValue }: UpdateField): Promise\n  save(user: User): Promise\n  create(userAttributes: RegisterBody): Promise\n}\n\n@Injectable()\nexport class UserRepository implements IUserRepository {\n  constructor(\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise {\n    const fieldKey = Object.keys(field)[0]\n\n    let attributes: FindAttributeOptions | undefined = undefined\n    if (restrict) {\n      attributes = { exclude: ['id', 'passwd', 'verified_email'] }\n    }\n\n    return this.userModel.findOne({\n      where: { [fieldKey]: field[fieldKey] },\n      attributes,\n    })\n  }\n\n  async delete(target: number | User): Promise {\n    if (typeof target === 'number') {\n      await this.userModel.destroy({ where: { id: target } })\n      return\n    }\n    await target.destroy()\n  }\n\n  async updateField({\n    user,\n    fieldName,\n    fieldValue,\n  }: UpdateField): Promise {\n    user[fieldName] = fieldValue\n    await this.save(user)\n  }\n\n  async save(user: User): Promise {\n    await user.save()\n  }\n\n  async create(userAttributes: RegisterBody): Promise {\n    await this.userModel.create(userAttributes)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                favoriteProducts\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                passwd\n                            \n                            \n                                    \n                                shoppingCartProducts\n                            \n                            \n                                    \n                                uname\n                            \n                            \n                                    \n                                verified_email\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        favoriteProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Products[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsToMany(undefined, {through: () => Favorites, foreignKey: undefined, as: 'favoriteProducts'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, primaryKey: true, autoIncrement: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        passwd\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        shoppingCartProducts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Products[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @BelongsToMany(undefined, {through: () => ShoppingCart, foreignKey: undefined, as: 'shoppingCartProducts'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uname\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        verified_email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: undefined, allowNull: false, defaultValue: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/user/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Table,\n  Model,\n  Column,\n  DataType,\n  BelongsToMany,\n} from 'sequelize-typescript'\nimport { Products } from '../products/products.entity.js'\nimport { Favorites } from './favorites/favorite.entity.js'\nimport { ShoppingCart } from './shopping/shopping.entity.js'\n\n@Table({ tableName: 'users', updatedAt: false })\nexport class User extends Model {\n  @Column({\n    type: DataType.BIGINT,\n    primaryKey: true,\n    autoIncrement: true,\n  })\n  id: number\n\n  @Column({\n    type: DataType.STRING(50),\n    allowNull: false,\n  })\n  uname: string\n\n  @Column({\n    type: DataType.STRING(100),\n    allowNull: false,\n  })\n  email: string\n\n  @Column({\n    type: DataType.BOOLEAN,\n    allowNull: false,\n    defaultValue: false,\n  })\n  verified_email: boolean\n\n  @Column({\n    type: DataType.STRING,\n    allowNull: false,\n  })\n  passwd: string\n\n  @BelongsToMany(() => Products, {\n    through: () => Favorites,\n    foreignKey: {\n      name: 'userId',\n    },\n    as: 'favoriteProducts',\n  })\n  favoriteProducts: Products[]\n\n  @BelongsToMany(() => Products, {\n    through: () => ShoppingCart,\n    foreignKey: {\n      name: 'userId',\n    },\n    as: 'shoppingCartProducts',\n  })\n  shoppingCartProducts: Products[]\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserControllers.html":{"url":"controllers/UserControllers.html","title":"controller - UserControllers","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserControllers\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                /user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                changePasswd\n                            \n                            \n                                    \n                                    Async\n                                deleteUser\n                            \n                            \n                                    \n                                    Async\n                                getFavorites\n                            \n                            \n                                    \n                                    Async\n                                getShoppingCart\n                            \n                            \n                                    \n                                    Async\n                                getUser\n                            \n                            \n                                    \n                                    Async\n                                toggleFavorite\n                            \n                            \n                                    \n                                    Async\n                                toggleShoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        changePasswd\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswd(body: ChangePasswdBody, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/change-passwd')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ChangePasswdBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(req: Request, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/delete')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getFavorites\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFavorites(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/get-favorites')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getShoppingCart(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/get-shopping')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:110\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        toggleFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFavorite(body: ToggleFavoriteBody, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/toggle-favorite')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ToggleFavoriteBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        toggleShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleShoppingCart(body: ToggleShoppingCartBody, req: Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/toggle-shopping')\n                \n            \n\n                    \n                        \n                            Defined in src/core/user/user.controller.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            ToggleShoppingCartBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { HandleError } from '../../utils/handleError.js'\nimport {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Inject,\n  Patch,\n  Post,\n  Req,\n  Res,\n  UseGuards,\n} from '@nestjs/common'\nimport { Request, Response } from 'express'\nimport { ChangePasswdBody } from './dto/changePasswdBody.dto.js'\nimport { isLoggedIn } from '../../guard/isLoggedIn.guard.js'\nimport { UserServices } from './user.service.js'\nimport { ConfigService } from '@nestjs/config'\nimport { ToggleFavoriteBody } from './dto/toggleFavoriteBody.dto.js'\nimport { ApiTags } from '@nestjs/swagger'\nimport { ToggleShoppingCartBody } from './dto/toggleShoppingCartBody.dto.js'\n\n@ApiTags('user')\n@Controller('/user')\n@UseGuards(isLoggedIn)\nexport class UserControllers {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n    @Inject()\n    private userServices: UserServices,\n  ) {}\n\n  @Get('/')\n  async getUser(@Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const user = await this.userServices.getUser(token)\n      return user\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Patch('/change-passwd')\n  async changePasswd(@Body() body: ChangePasswdBody, @Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const { passwd } = body\n\n      await this.userServices.changePasswd(token, passwd)\n\n      return { msg: this.configService.get('userMsg.updated') }\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Delete('/delete')\n  async deleteUser(@Req() req: Request, @Res() res: Response) {\n    try {\n      const { token } = req.cookies\n\n      await this.userServices.deleteUser(token)\n\n      res.clearCookie('token')\n      res.status(200).json({ msg: this.configService.get('userMsg.deleted') })\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/toggle-favorite')\n  async toggleFavorite(@Body() body: ToggleFavoriteBody, @Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const { productId } = body\n      await this.userServices.toggleFavorite(token, productId)\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/get-favorites')\n  async getFavorites(@Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const favorites = await this.userServices.getFavorites(token)\n      return favorites\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Post('/toggle-shopping')\n  async toggleShoppingCart(\n    @Body() body: ToggleShoppingCartBody,\n    @Req() req: Request,\n  ) {\n    try {\n      const { token } = req.cookies\n      const { productId } = body\n      await this.userServices.toggleShoppingCart(token, productId)\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n\n  @Get('/get-shopping')\n  async getShoppingCart(@Req() req: Request) {\n    try {\n      const { token } = req.cookies\n      const favorites = await this.userServices.getShoppingCart(token)\n      return favorites\n    } catch (err) {\n      HandleError.http(err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_imports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nCommonModule->UserModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\n\n\nFavoriteRepository \n\nFavoriteRepository \n\nFavoriteRepository  -->\n\nUserModule->FavoriteRepository \n\n\n\n\n\nShoppingCartRepository \n\nShoppingCartRepository \n\nShoppingCartRepository  -->\n\nUserModule->ShoppingCartRepository \n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\n\n\nChangePasswdUseCase\n\nChangePasswdUseCase\n\nUserModule -->\n\nChangePasswdUseCase->UserModule\n\n\n\n\n\nDeleteUserUseCase\n\nDeleteUserUseCase\n\nUserModule -->\n\nDeleteUserUseCase->UserModule\n\n\n\n\n\nFavoriteRepository\n\nFavoriteRepository\n\nUserModule -->\n\nFavoriteRepository->UserModule\n\n\n\n\n\nGetFavoritesUseCase\n\nGetFavoritesUseCase\n\nUserModule -->\n\nGetFavoritesUseCase->UserModule\n\n\n\n\n\nGetShoppingCartUseCase\n\nGetShoppingCartUseCase\n\nUserModule -->\n\nGetShoppingCartUseCase->UserModule\n\n\n\n\n\nGetUserUseCase\n\nGetUserUseCase\n\nUserModule -->\n\nGetUserUseCase->UserModule\n\n\n\n\n\nShoppingCartRepository\n\nShoppingCartRepository\n\nUserModule -->\n\nShoppingCartRepository->UserModule\n\n\n\n\n\nToggleFavoriteUseCase\n\nToggleFavoriteUseCase\n\nUserModule -->\n\nToggleFavoriteUseCase->UserModule\n\n\n\n\n\nToggleShoppingCartUseCase\n\nToggleShoppingCartUseCase\n\nUserModule -->\n\nToggleShoppingCartUseCase->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ChangePasswdUseCase\n                        \n                        \n                            DeleteUserUseCase\n                        \n                        \n                            FavoriteRepository\n                        \n                        \n                            GetFavoritesUseCase\n                        \n                        \n                            GetShoppingCartUseCase\n                        \n                        \n                            GetUserUseCase\n                        \n                        \n                            ShoppingCartRepository\n                        \n                        \n                            ToggleFavoriteUseCase\n                        \n                        \n                            ToggleShoppingCartUseCase\n                        \n                        \n                            UserRepository\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserControllers\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FavoriteRepository\n                        \n                        \n                            ShoppingCartRepository\n                        \n                        \n                            UserRepository\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { UserControllers } from './user.controller.js'\nimport { UserServices } from './user.service.js'\nimport { GetUserUseCase } from './usecases/getUser.usecase.js'\nimport { DeleteUserUseCase } from './usecases/deleteUser.usecase.js'\nimport { ToggleFavoriteUseCase } from './usecases/toggleFavorite.usecase.js'\nimport { GetFavoritesUseCase } from './usecases/getFavorites.usecase.js'\nimport { ChangePasswdUseCase } from './usecases/changePasswd.usecase.js'\nimport { UserRepository } from './user.repository.js'\nimport { CommonModule } from '../common/common.module.js'\nimport { DatabaseModule } from '../../database/database.module.js'\nimport { userProviders } from './providers/user.providers.js'\nimport { favoriteProviders } from './providers/favorite.providers.js'\nimport { ConfigModule } from '@nestjs/config'\nimport { FavoriteRepository } from './favorites/favorite.repository.js'\nimport { ToggleShoppingCartUseCase } from './usecases/toggleShopping.usecase.js'\nimport { GetShoppingCartUseCase } from './usecases/getShopping.usecase.js'\nimport { ShoppingCartRepository } from './shopping/shopping.repository.js'\nimport { shoppingCartProviders } from './providers/shopping.providers.js'\n\n@Module({\n  imports: [CommonModule, DatabaseModule, ConfigModule],\n  controllers: [UserControllers],\n  providers: [\n    UserServices,\n    GetUserUseCase,\n    DeleteUserUseCase,\n    ToggleFavoriteUseCase,\n    GetFavoritesUseCase,\n    ToggleShoppingCartUseCase,\n    ShoppingCartRepository,\n    GetShoppingCartUseCase,\n    ChangePasswdUseCase,\n    FavoriteRepository,\n    UserRepository,\n    ...userProviders,\n    ...favoriteProviders,\n    ...shoppingCartProviders,\n  ],\n  exports: [UserRepository, FavoriteRepository, ShoppingCartRepository],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserRepository.html":{"url":"injectables/UserRepository.html","title":"injectable - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                findByField\n                            \n                            \n                                    Async\n                                save\n                            \n                            \n                                    Async\n                                updateField\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/user.repository.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userAttributes: RegisterBody)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userAttributes\n                                            \n                                                            RegisterBody\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(target: number | User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                target\n                                            \n                                                            number | User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findByField\n                        \n                    \n                \n            \n            \n                \n                        \n                    findByField(field: Record, restrict?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                field\n                                            \n                                                        Record\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                restrict\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        save\n                        \n                    \n                \n            \n            \n                \n                        \n                    save(user: User)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateField\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateField(undefined: UpdateField)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.repository.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            UpdateField\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FindAttributeOptions } from 'sequelize'\nimport { RegisterBody } from '../auth/dto/registerBody.dto.js'\nimport { User } from './user.entity.js'\nimport { Inject, Injectable } from '@nestjs/common'\n\ninterface UpdateField {\n  user: User\n  fieldName: string\n  fieldValue: any\n}\n\nexport interface IUserRepository {\n  findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise\n  delete(target: number | User): Promise\n  updateField({ user, fieldName, fieldValue }: UpdateField): Promise\n  save(user: User): Promise\n  create(userAttributes: RegisterBody): Promise\n}\n\n@Injectable()\nexport class UserRepository implements IUserRepository {\n  constructor(\n    @Inject('USER')\n    private userModel: typeof User,\n  ) {}\n\n  async findByField(\n    field: Record,\n    restrict?: boolean,\n  ): Promise {\n    const fieldKey = Object.keys(field)[0]\n\n    let attributes: FindAttributeOptions | undefined = undefined\n    if (restrict) {\n      attributes = { exclude: ['id', 'passwd', 'verified_email'] }\n    }\n\n    return this.userModel.findOne({\n      where: { [fieldKey]: field[fieldKey] },\n      attributes,\n    })\n  }\n\n  async delete(target: number | User): Promise {\n    if (typeof target === 'number') {\n      await this.userModel.destroy({ where: { id: target } })\n      return\n    }\n    await target.destroy()\n  }\n\n  async updateField({\n    user,\n    fieldName,\n    fieldValue,\n  }: UpdateField): Promise {\n    user[fieldName] = fieldValue\n    await this.save(user)\n  }\n\n  async save(user: User): Promise {\n    await user.save()\n  }\n\n  async create(userAttributes: RegisterBody): Promise {\n    await this.userModel.create(userAttributes)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserServices.html":{"url":"classes/UserServices.html","title":"class - UserServices","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserServices\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/user/user.service.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePasswd\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getFavorites\n                            \n                            \n                                    Async\n                                getShoppingCart\n                            \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                toggleFavorite\n                            \n                            \n                                    Async\n                                toggleShoppingCart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(commonServices: CommonServices, getUserUseCase: GetUserUseCase, changePasswdUseCase: ChangePasswdUseCase, deleteUserUseCase: DeleteUserUseCase, toggleFavoriteUseCase: ToggleFavoriteUseCase, getFavoritesUseCase: GetFavoritesUseCase, toggleShoppingCartUseCase: ToggleShoppingCartUseCase, getShoppingCartUseCase: GetShoppingCartUseCase)\n                    \n                \n                        \n                            \n                                Defined in src/core/user/user.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        commonServices\n                                                  \n                                                        \n                                                                        CommonServices\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getUserUseCase\n                                                  \n                                                        \n                                                                        GetUserUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        changePasswdUseCase\n                                                  \n                                                        \n                                                                        ChangePasswdUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        deleteUserUseCase\n                                                  \n                                                        \n                                                                        DeleteUserUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        toggleFavoriteUseCase\n                                                  \n                                                        \n                                                                        ToggleFavoriteUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getFavoritesUseCase\n                                                  \n                                                        \n                                                                        GetFavoritesUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        toggleShoppingCartUseCase\n                                                  \n                                                        \n                                                                        ToggleShoppingCartUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        getShoppingCartUseCase\n                                                  \n                                                        \n                                                                        GetShoppingCartUseCase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePasswd\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePasswd(token: string, newPasswd: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                newPasswd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteUser(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getFavorites\n                        \n                    \n                \n            \n            \n                \n                        \n                    getFavorites(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    getShoppingCart(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        toggleFavorite\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleFavorite(token: string, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        toggleShoppingCart\n                        \n                    \n                \n            \n            \n                \n                        \n                    toggleShoppingCart(token: string, productId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/user/user.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                productId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChangePasswdUseCase } from './usecases/changePasswd.usecase.js'\nimport { DeleteUserUseCase } from './usecases/deleteUser.usecase.js'\nimport { GetFavoritesUseCase } from './usecases/getFavorites.usecase.js'\nimport { GetUserUseCase } from './usecases/getUser.usecase.js'\nimport { ToggleFavoriteUseCase } from './usecases/toggleFavorite.usecase.js'\nimport { Inject } from '@nestjs/common'\nimport { CommonServices } from '../common/common.service.js'\nimport { ToggleShoppingCartUseCase } from './usecases/toggleShopping.usecase.js'\nimport { GetShoppingCartUseCase } from './usecases/getShopping.usecase.js'\n\nexport class UserServices {\n  constructor(\n    @Inject()\n    private commonServices: CommonServices,\n    @Inject()\n    private getUserUseCase: GetUserUseCase,\n    @Inject()\n    private changePasswdUseCase: ChangePasswdUseCase,\n    @Inject()\n    private deleteUserUseCase: DeleteUserUseCase,\n    @Inject()\n    private toggleFavoriteUseCase: ToggleFavoriteUseCase,\n    @Inject()\n    private getFavoritesUseCase: GetFavoritesUseCase,\n    @Inject()\n    private toggleShoppingCartUseCase: ToggleShoppingCartUseCase,\n    @Inject()\n    private getShoppingCartUseCase: GetShoppingCartUseCase,\n  ) {}\n\n  async getUser(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.getUserUseCase.execute(id)\n  }\n\n  async changePasswd(token: string, newPasswd: string) {\n    const email = this.commonServices.extractJwtPayload(token, 'email')\n    return this.changePasswdUseCase.execute(email, newPasswd)\n  }\n\n  async deleteUser(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.deleteUserUseCase.execute(id)\n  }\n\n  async toggleFavorite(token: string, productId: number) {\n    const userId = this.commonServices.extractJwtPayload(token, 'id')\n    return this.toggleFavoriteUseCase.execute(userId, productId)\n  }\n\n  async getFavorites(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.getFavoritesUseCase.execute(id)\n  }\n\n  async toggleShoppingCart(token: string, productId: number) {\n    const userId = this.commonServices.extractJwtPayload(token, 'id')\n    return this.toggleShoppingCartUseCase.execute(userId, productId)\n  }\n\n  async getShoppingCart(token: string) {\n    const id = this.commonServices.extractJwtPayload(token, 'id')\n    return this.getShoppingCartUseCase.execute(id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/configuration.ts\n            \n            interface\n            Env\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/config/configuration.ts\n            \n            variable\n            configuration\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/auth/auth.controller.ts\n            \n            controller\n            AuthControllers\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/auth/auth.service.ts\n            \n            injectable\n            AuthServices\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/auth/dto/loginBody.dto.ts\n            \n            class\n            LoginBody\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/dto/registerBody.dto.ts\n            \n            class\n            RegisterBody\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/emailVerify.usecase.ts\n            \n            injectable\n            EmailVerifyUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/login.usecase.ts\n            \n            injectable\n            LoginUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/passwdRecovery.usecase.ts\n            \n            injectable\n            PasswdRecoveryUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/register.usecase.ts\n            \n            injectable\n            RegisterUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/auth/usecases/register.usecase.ts\n            \n            interface\n            RegisterUserCaseProps\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/common/common.service.ts\n            \n            injectable\n            CommonServices\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/common/common.service.ts\n            \n            interface\n            SendEmailProps\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/products/products.controller.ts\n            \n            controller\n            ProductsControllers\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/products/products.entity.ts\n            \n            class\n            Products\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/core/products/products.providers.ts\n            \n            variable\n            productsProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/products/products.repository.ts\n            \n            injectable\n            ProductsRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/products/products.repository.ts\n            \n            interface\n            ProductRepositoryInterface\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/products/products.service.ts\n            \n            injectable\n            ProductsServices\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/products/usecases/getProducts.usecase.ts\n            \n            injectable\n            GetProductsUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/dto/changePasswdBody.dto.ts\n            \n            class\n            ChangePasswdBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/user/dto/toggleFavoriteBody.dto.ts\n            \n            class\n            ToggleFavoriteBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/user/dto/toggleShoppingCartBody.dto.ts\n            \n            class\n            ToggleShoppingCartBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/user/favorites/favorite.entity.ts\n            \n            class\n            Favorites\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/favorites/favorite.repository.ts\n            \n            injectable\n            FavoriteRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/favorites/favorite.repository.ts\n            \n            interface\n            IFavoritesRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/user/providers/favorite.providers.ts\n            \n            variable\n            favoriteProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/user/providers/shopping.providers.ts\n            \n            variable\n            shoppingCartProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/user/providers/user.providers.ts\n            \n            variable\n            userProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/user/shopping/shopping.entity.ts\n            \n            class\n            ShoppingCart\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/shopping/shopping.repository.ts\n            \n            injectable\n            ShoppingCartRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/shopping/shopping.repository.ts\n            \n            interface\n            IShoppingCartRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/core/user/usecases/changePasswd.usecase.ts\n            \n            injectable\n            ChangePasswdUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/deleteUser.usecase.ts\n            \n            injectable\n            DeleteUserUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/getFavorites.usecase.ts\n            \n            injectable\n            GetFavoritesUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/getShopping.usecase.ts\n            \n            injectable\n            GetShoppingCartUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/getUser.usecase.ts\n            \n            injectable\n            GetUserUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/toggleFavorite.usecase.ts\n            \n            injectable\n            ToggleFavoriteUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/usecases/toggleShopping.usecase.ts\n            \n            injectable\n            ToggleShoppingCartUseCase\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/user/user.controller.ts\n            \n            controller\n            UserControllers\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/user/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/core/user/user.repository.ts\n            \n            injectable\n            UserRepository\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/user/user.repository.ts\n            \n            interface\n            IUserRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/core/user/user.repository.ts\n            \n            interface\n            UpdateField\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/user/user.service.ts\n            \n            class\n            UserServices\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/database/database.providers.ts\n            \n            variable\n            databaseProviders\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/seed/populateProducts.service.ts\n            \n            injectable\n            PopulateProductsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/database/seed/populateProducts.service.ts\n            \n            interface\n            ProductEl\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/filters/httpException.filter.ts\n            \n            class\n            HttpExceptionFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/guard/isLoggedIn.guard.ts\n            \n            guard\n            isLoggedIn\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/jobs/rmUnverifiedUsers.service.ts\n            \n            injectable\n            RmUnverifiedUsers\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/handleError.ts\n            \n            class\n            HandleError\n            \n                0 %\n                (0/2)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @faker-js/faker : ^8.4.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/schedule : ^4.1.0\n        \n            @nestjs/sequelize : ^10.0.1\n        \n            @nestjs/serve-static : ^2.2.2\n        \n            @nestjs/swagger : ^7.4.0\n        \n            bcrypt : ^5.1.1\n        \n            cacheable-request : ^12.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.6\n        \n            cors : ^2.8.5\n        \n            dotenv : ^16.4.5\n        \n            express-rate-limit : ^7.4.0\n        \n            http-cache-semantics : ^4.1.1\n        \n            jsonwebtoken : ^9.0.2\n        \n            nodemailer : ^6.9.14\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            sequelize : ^6.37.3\n        \n            sequelize-typescript : ^2.1.6\n        \n            sqlite3 : ^5.1.7\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/isLoggedIn.html":{"url":"guards/isLoggedIn.html","title":"guard - isLoggedIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    isLoggedIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/guard/isLoggedIn.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/guard/isLoggedIn.guard.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/guard/isLoggedIn.guard.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     boolean | Promise | Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  Inject,\n  Injectable,\n} from '@nestjs/common'\nimport { ConfigService } from '@nestjs/config'\nimport jwt from 'jsonwebtoken'\nimport { Observable } from 'rxjs'\n\n@Injectable()\nexport class isLoggedIn implements CanActivate {\n  constructor(\n    @Inject()\n    private configService: ConfigService,\n  ) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    const req = context.switchToHttp().getRequest()\n    const token = req.params?.token || req.cookies?.token\n\n    if (!token) {\n      throw new HttpException('Forbidden', 403)\n    }\n\n    try {\n      jwt.verify(token, this.configService.get('env.SECRET'))\n      return true\n    } catch {\n      throw new HttpException('Unauthorized', 401)\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nCreative Commons Attribution-NonCommercial 4.0 International License\nCopyright (c) 2024 Miguel Zacca\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in the \nSoftware without restriction, including without limitation the rights to use, copy, \nmodify, merge, publish, distribute, sublicense, and/or sell copies of the Software, \nsubject to the following conditions:\n\nAttribution: You must give appropriate credit, provide a link to the license, \nand indicate if changes were made. You may do so in any reasonable manner, but \nnot in any way that suggests the licensor endorses you or your use.\n\nNonCommercial: You may not use the material for commercial purposes.\n\nNo additional restrictions: You may not apply legal terms or technological \nmeasures that legally restrict others from doing anything the license permits.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT \nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION \nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE \nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_exports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_providers\n\n\n\ncluster_ProductsModule\n\n\n\ncluster_ProductsModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\n\n\nProductsModule\n\nProductsModule\n\nProductsModule -->\n\nDatabaseModule->ProductsModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nDatabaseModule->UserModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nProductsModule->AppModule\n\n\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nFavoriteRepository \n\nFavoriteRepository \n\nFavoriteRepository  -->\n\nUserModule->FavoriteRepository \n\n\n\n\n\nShoppingCartRepository \n\nShoppingCartRepository \n\nShoppingCartRepository  -->\n\nUserModule->ShoppingCartRepository \n\n\n\n\n\nUserRepository \n\nUserRepository \n\nUserRepository  -->\n\nUserModule->UserRepository \n\n\n\n\n\nPopulateProductsService \n\nPopulateProductsService \n\nPopulateProductsService  -->\n\nAppModule->PopulateProductsService \n\n\n\n\n\nPopulateProductsService\n\nPopulateProductsService\n\nAppModule -->\n\nPopulateProductsService->AppModule\n\n\n\n\n\nRmUnverifiedUsers\n\nRmUnverifiedUsers\n\nAppModule -->\n\nRmUnverifiedUsers->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\nUserModule -->\n\nCommonModule->UserModule\n\n\n\n\n\nCommonServices \n\nCommonServices \n\nCommonServices  -->\n\nCommonModule->CommonServices \n\n\n\n\n\nAuthServices\n\nAuthServices\n\nAuthModule -->\n\nAuthServices->AuthModule\n\n\n\n\n\nEmailVerifyUseCase\n\nEmailVerifyUseCase\n\nAuthModule -->\n\nEmailVerifyUseCase->AuthModule\n\n\n\n\n\nLoginUseCase\n\nLoginUseCase\n\nAuthModule -->\n\nLoginUseCase->AuthModule\n\n\n\n\n\nPasswdRecoveryUseCase\n\nPasswdRecoveryUseCase\n\nAuthModule -->\n\nPasswdRecoveryUseCase->AuthModule\n\n\n\n\n\nRegisterUseCase\n\nRegisterUseCase\n\nAuthModule -->\n\nRegisterUseCase->AuthModule\n\n\n\n\n\nCommonServices\n\nCommonServices\n\nCommonModule -->\n\nCommonServices->CommonModule\n\n\n\n\n\nGetProductsUseCase\n\nGetProductsUseCase\n\nProductsModule -->\n\nGetProductsUseCase->ProductsModule\n\n\n\n\n\nProductsRepository\n\nProductsRepository\n\nProductsModule -->\n\nProductsRepository->ProductsModule\n\n\n\n\n\nProductsServices\n\nProductsServices\n\nProductsModule -->\n\nProductsServices->ProductsModule\n\n\n\n\n\nChangePasswdUseCase\n\nChangePasswdUseCase\n\nUserModule -->\n\nChangePasswdUseCase->UserModule\n\n\n\n\n\nDeleteUserUseCase\n\nDeleteUserUseCase\n\nUserModule -->\n\nDeleteUserUseCase->UserModule\n\n\n\n\n\nFavoriteRepository\n\nFavoriteRepository\n\nUserModule -->\n\nFavoriteRepository->UserModule\n\n\n\n\n\nGetFavoritesUseCase\n\nGetFavoritesUseCase\n\nUserModule -->\n\nGetFavoritesUseCase->UserModule\n\n\n\n\n\nGetShoppingCartUseCase\n\nGetShoppingCartUseCase\n\nUserModule -->\n\nGetShoppingCartUseCase->UserModule\n\n\n\n\n\nGetUserUseCase\n\nGetUserUseCase\n\nUserModule -->\n\nGetUserUseCase->UserModule\n\n\n\n\n\nShoppingCartRepository\n\nShoppingCartRepository\n\nUserModule -->\n\nShoppingCartRepository->UserModule\n\n\n\n\n\nToggleFavoriteUseCase\n\nToggleFavoriteUseCase\n\nUserModule -->\n\nToggleFavoriteUseCase->UserModule\n\n\n\n\n\nToggleShoppingCartUseCase\n\nToggleShoppingCartUseCase\n\nUserModule -->\n\nToggleShoppingCartUseCase->UserModule\n\n\n\n\n\nUserRepository\n\nUserRepository\n\nUserModule -->\n\nUserRepository->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    21 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 1.0.0\n        \n            Description : The Develop Store API.\n        \n            License : CC-BY-NC-4.0\n        \n            Author : Miguel Zacca\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            configuration   (src/.../configuration.ts)\n                        \n                        \n                            databaseProviders   (src/.../database.providers.ts)\n                        \n                        \n                            favoriteProviders   (src/.../favorite.providers.ts)\n                        \n                        \n                            productsProviders   (src/.../products.providers.ts)\n                        \n                        \n                            shoppingCartProviders   (src/.../shopping.providers.ts)\n                        \n                        \n                            userProviders   (src/.../user.providers.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/configuration.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        configuration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => ({\n  get env() {\n    return {\n      NODE_ENV: process.env.NODE_ENV,\n      PORT: Number(process.env.PORT),\n      ORIGIN_ADDR: process.env.ORIGIN_ADDR,\n      API_ADDR: process.env.API_ADDR,\n      SMTP_USER: process.env.SMTP_USER,\n      SMTP_PASS: process.env.SMTP_PASS,\n      AUTH_DURATION_DAYS: Number(process.env.AUTH_DURATION_DAYS),\n      SECRET: process.env.SECRET,\n    } as Env\n  },\n\n  get cors() {\n    return {\n      origin: [this.env.ORIGIN_ADDR, this.env.API_ADDR],\n      methods: ['GET', 'POST', 'PATCH', 'DELETE'],\n      credentials: true,\n    } as CorsOptions\n  },\n\n  get cookie() {\n    return {\n      httpOnly: true,\n      secure: true,\n      maxAge: this.env.AUTH_DURATION_DAYS * 24 * 60 * 60 * 1000,\n      sameSite: 'none',\n    } as CookieOptions\n  },\n\n  get serverMsg() {\n    return {\n      great: 'Welcome!',\n      err: 'A server occurred error. Please try later.',\n      denied: 'Access denied.',\n      invalidToken: 'Invalid token.',\n    }\n  },\n\n  get authMsg() {\n    return {\n      ok: 'Authentication successful.',\n      incorrect: 'Incorrect password.',\n      emailExists: 'This email already exists.',\n      noEmailToken: 'No email token provided.',\n      noVerifiedEmail: 'No email verified.',\n      recoveryEmail: 'Recovery email successfully send.',\n    }\n  },\n\n  get userMsg() {\n    return {\n      notFound: 'User not found.',\n      created: 'User created successfully.',\n      deleted: 'User deleted successfully.',\n      updated: 'User updated successfully.',\n    }\n  },\n})\n                    \n                \n\n\n        \n    \n\n    src/database/database.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        databaseProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'SEQUELIZE',\n    useFactory: async () => {\n      const sequelize = new Sequelize({\n        dialect: 'sqlite',\n        storage: './.data/database.db',\n        logging: false,\n      })\n      sequelize.addModels([User, Products, Favorites, ShoppingCart])\n      await sequelize.sync()\n      return sequelize\n    },\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/user/providers/favorite.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        favoriteProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'FAVORITES',\n    useValue: Favorites,\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/products/products.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        productsProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'PRODUCTS',\n    useValue: Products,\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/user/providers/shopping.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        shoppingCartProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'SHOPPING',\n    useValue: ShoppingCart,\n  },\n]\n                    \n                \n\n\n        \n    \n\n    src/core/user/providers/user.providers.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        userProviders\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    provide: 'USER',\n    useValue: User,\n  },\n]\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
